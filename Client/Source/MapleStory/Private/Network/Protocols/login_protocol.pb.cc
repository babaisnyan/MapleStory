// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_protocol.proto

#include "login_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr LoginClientLogin::LoginClientLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LoginClientLoginDefaultTypeInternal {
  constexpr LoginClientLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginClientLoginDefaultTypeInternal() {}
  union {
    LoginClientLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginClientLoginDefaultTypeInternal _LoginClientLogin_default_instance_;
constexpr LoginServerLogin::LoginServerLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct LoginServerLoginDefaultTypeInternal {
  constexpr LoginServerLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginServerLoginDefaultTypeInternal() {}
  union {
    LoginServerLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginServerLoginDefaultTypeInternal _LoginServerLogin_default_instance_;
constexpr LoginClientRequestCharacterList::LoginClientRequestCharacterList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LoginClientRequestCharacterListDefaultTypeInternal {
  constexpr LoginClientRequestCharacterListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginClientRequestCharacterListDefaultTypeInternal() {}
  union {
    LoginClientRequestCharacterList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginClientRequestCharacterListDefaultTypeInternal _LoginClientRequestCharacterList_default_instance_;
constexpr LoginServerCharacterList::LoginServerCharacterList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : characters_(){}
struct LoginServerCharacterListDefaultTypeInternal {
  constexpr LoginServerCharacterListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginServerCharacterListDefaultTypeInternal() {}
  union {
    LoginServerCharacterList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginServerCharacterListDefaultTypeInternal _LoginServerCharacterList_default_instance_;
constexpr LoginClientSelectCharacter::LoginClientSelectCharacter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_id_(0){}
struct LoginClientSelectCharacterDefaultTypeInternal {
  constexpr LoginClientSelectCharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginClientSelectCharacterDefaultTypeInternal() {}
  union {
    LoginClientSelectCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginClientSelectCharacterDefaultTypeInternal _LoginClientSelectCharacter_default_instance_;
constexpr LoginClientDeleteCharacter::LoginClientDeleteCharacter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_id_(0){}
struct LoginClientDeleteCharacterDefaultTypeInternal {
  constexpr LoginClientDeleteCharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginClientDeleteCharacterDefaultTypeInternal() {}
  union {
    LoginClientDeleteCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginClientDeleteCharacterDefaultTypeInternal _LoginClientDeleteCharacter_default_instance_;
constexpr LoginServerDeleteCharacter::LoginServerDeleteCharacter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false)
  , character_id_(0){}
struct LoginServerDeleteCharacterDefaultTypeInternal {
  constexpr LoginServerDeleteCharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginServerDeleteCharacterDefaultTypeInternal() {}
  union {
    LoginServerDeleteCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginServerDeleteCharacterDefaultTypeInternal _LoginServerDeleteCharacter_default_instance_;
constexpr LoginClientCreateCharacter::LoginClientCreateCharacter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0){}
struct LoginClientCreateCharacterDefaultTypeInternal {
  constexpr LoginClientCreateCharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginClientCreateCharacterDefaultTypeInternal() {}
  union {
    LoginClientCreateCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginClientCreateCharacterDefaultTypeInternal _LoginClientCreateCharacter_default_instance_;
constexpr LoginServerCreateCharacter::LoginServerCreateCharacter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_(nullptr)
  , result_(0)
{}
struct LoginServerCreateCharacterDefaultTypeInternal {
  constexpr LoginServerCreateCharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginServerCreateCharacterDefaultTypeInternal() {}
  union {
    LoginServerCreateCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginServerCreateCharacterDefaultTypeInternal _LoginServerCreateCharacter_default_instance_;
constexpr LoginServerCharSelectResult::LoginServerCharSelectResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)

  , port_(0){}
struct LoginServerCharSelectResultDefaultTypeInternal {
  constexpr LoginServerCharSelectResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginServerCharSelectResultDefaultTypeInternal() {}
  union {
    LoginServerCharSelectResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginServerCharSelectResultDefaultTypeInternal _LoginServerCharSelectResult_default_instance_;
constexpr LoginServerChat::LoginServerChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LoginServerChatDefaultTypeInternal {
  constexpr LoginServerChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginServerChatDefaultTypeInternal() {}
  union {
    LoginServerChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginServerChatDefaultTypeInternal _LoginServerChat_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_login_5fprotocol_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_login_5fprotocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_login_5fprotocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_login_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginClientLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginClientLogin, username_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginClientLogin, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerLogin, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginClientRequestCharacterList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerCharacterList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerCharacterList, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginClientSelectCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginClientSelectCharacter, character_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginClientDeleteCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginClientDeleteCharacter, character_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerDeleteCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerDeleteCharacter, success_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerDeleteCharacter, character_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginClientCreateCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginClientCreateCharacter, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginClientCreateCharacter, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerCreateCharacter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerCreateCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerCreateCharacter, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerCreateCharacter, character_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerCharSelectResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerCharSelectResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerCharSelectResult, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerCharSelectResult, ip_),
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerCharSelectResult, port_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::LoginServerChat, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::LoginClientLogin)},
  { 7, -1, sizeof(::protocol::LoginServerLogin)},
  { 13, -1, sizeof(::protocol::LoginClientRequestCharacterList)},
  { 18, -1, sizeof(::protocol::LoginServerCharacterList)},
  { 24, -1, sizeof(::protocol::LoginClientSelectCharacter)},
  { 30, -1, sizeof(::protocol::LoginClientDeleteCharacter)},
  { 36, -1, sizeof(::protocol::LoginServerDeleteCharacter)},
  { 43, -1, sizeof(::protocol::LoginClientCreateCharacter)},
  { 50, 57, sizeof(::protocol::LoginServerCreateCharacter)},
  { 59, 67, sizeof(::protocol::LoginServerCharSelectResult)},
  { 70, -1, sizeof(::protocol::LoginServerChat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginClientLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginServerLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginClientRequestCharacterList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginServerCharacterList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginClientSelectCharacter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginClientDeleteCharacter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginServerDeleteCharacter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginClientCreateCharacter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginServerCreateCharacter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginServerCharSelectResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_LoginServerChat_default_instance_),
};

const char descriptor_table_protodef_login_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024login_protocol.proto\022\010protocol\032\020login_"
  "enum.proto\032\022login_struct.proto\"6\n\020LoginC"
  "lientLogin\022\020\n\010username\030\001 \001(\t\022\020\n\010password"
  "\030\002 \001(\t\"9\n\020LoginServerLogin\022%\n\006result\030\001 \001"
  "(\0162\025.protocol.LoginResult\"!\n\037LoginClient"
  "RequestCharacterList\"H\n\030LoginServerChara"
  "cterList\022,\n\ncharacters\030\001 \003(\0132\030.protocol."
  "LoginCharacter\"2\n\032LoginClientSelectChara"
  "cter\022\024\n\014character_id\030\001 \001(\005\"2\n\032LoginClien"
  "tDeleteCharacter\022\024\n\014character_id\030\001 \001(\005\"C"
  "\n\032LoginServerDeleteCharacter\022\017\n\007success\030"
  "\001 \001(\010\022\024\n\014character_id\030\002 \001(\005\"8\n\032LoginClie"
  "ntCreateCharacter\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030"
  "\002 \001(\005\"\210\001\n\032LoginServerCreateCharacter\022*\n\006"
  "result\030\001 \001(\0162\032.protocol.CreateCharResult"
  "\0220\n\tcharacter\030\002 \001(\0132\030.protocol.LoginChar"
  "acterH\000\210\001\001B\014\n\n_character\"}\n\033LoginServerC"
  "harSelectResult\022*\n\006result\030\001 \001(\0162\032.protoc"
  "ol.SelectCharResult\022\017\n\002ip\030\002 \001(\tH\000\210\001\001\022\021\n\004"
  "port\030\003 \001(\005H\001\210\001\001B\005\n\003_ipB\007\n\005_port\"\"\n\017Login"
  "ServerChat\022\017\n\007message\030\001 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_login_5fprotocol_2eproto_deps[2] = {
  &::descriptor_table_login_5fenum_2eproto,
  &::descriptor_table_login_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_login_5fprotocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_5fprotocol_2eproto = {
  false, false, 835, descriptor_table_protodef_login_5fprotocol_2eproto, "login_protocol.proto", 
  &descriptor_table_login_5fprotocol_2eproto_once, descriptor_table_login_5fprotocol_2eproto_deps, 2, 11,
  schemas, file_default_instances, TableStruct_login_5fprotocol_2eproto::offsets,
  file_level_metadata_login_5fprotocol_2eproto, file_level_enum_descriptors_login_5fprotocol_2eproto, file_level_service_descriptors_login_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_login_5fprotocol_2eproto_getter() {
  return &descriptor_table_login_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_login_5fprotocol_2eproto(&descriptor_table_login_5fprotocol_2eproto);
namespace protocol {

// ===================================================================

class LoginClientLogin::_Internal {
 public:
};

LoginClientLogin::LoginClientLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.LoginClientLogin)
}
LoginClientLogin::LoginClientLogin(const LoginClientLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.LoginClientLogin)
}

void LoginClientLogin::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginClientLogin::~LoginClientLogin() {
  // @@protoc_insertion_point(destructor:protocol.LoginClientLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginClientLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginClientLogin::ArenaDtor(void* object) {
  LoginClientLogin* _this = reinterpret_cast< LoginClientLogin* >(object);
  (void)_this;
}
void LoginClientLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginClientLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginClientLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginClientLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginClientLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.LoginClientLogin.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.LoginClientLogin.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginClientLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginClientLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.LoginClientLogin.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (!this->password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.LoginClientLogin.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginClientLogin)
  return target;
}

size_t LoginClientLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginClientLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (!this->password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginClientLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LoginClientLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginClientLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginClientLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LoginClientLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LoginClientLogin)
    MergeFrom(*source);
  }
}

void LoginClientLogin::MergeFrom(const LoginClientLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginClientLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from.password().empty()) {
    _internal_set_password(from._internal_password());
  }
}

void LoginClientLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LoginClientLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginClientLogin::CopyFrom(const LoginClientLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginClientLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginClientLogin::IsInitialized() const {
  return true;
}

void LoginClientLogin::InternalSwap(LoginClientLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, GetArenaForAllocation(),
      &other->username_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, GetArenaForAllocation(),
      &other->password_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginClientLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[0]);
}

// ===================================================================

class LoginServerLogin::_Internal {
 public:
};

LoginServerLogin::LoginServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.LoginServerLogin)
}
LoginServerLogin::LoginServerLogin(const LoginServerLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:protocol.LoginServerLogin)
}

void LoginServerLogin::SharedCtor() {
result_ = 0;
}

LoginServerLogin::~LoginServerLogin() {
  // @@protoc_insertion_point(destructor:protocol.LoginServerLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginServerLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginServerLogin::ArenaDtor(void* object) {
  LoginServerLogin* _this = reinterpret_cast< LoginServerLogin* >(object);
  (void)_this;
}
void LoginServerLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginServerLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginServerLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginServerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginServerLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.LoginResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::protocol::LoginResult>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginServerLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginServerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.LoginResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginServerLogin)
  return target;
}

size_t LoginServerLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginServerLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.LoginResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginServerLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LoginServerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginServerLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginServerLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LoginServerLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LoginServerLogin)
    MergeFrom(*source);
  }
}

void LoginServerLogin::MergeFrom(const LoginServerLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginServerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void LoginServerLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LoginServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerLogin::CopyFrom(const LoginServerLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerLogin::IsInitialized() const {
  return true;
}

void LoginServerLogin::InternalSwap(LoginServerLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginServerLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[1]);
}

// ===================================================================

class LoginClientRequestCharacterList::_Internal {
 public:
};

LoginClientRequestCharacterList::LoginClientRequestCharacterList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.LoginClientRequestCharacterList)
}
LoginClientRequestCharacterList::LoginClientRequestCharacterList(const LoginClientRequestCharacterList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.LoginClientRequestCharacterList)
}

void LoginClientRequestCharacterList::SharedCtor() {
}

LoginClientRequestCharacterList::~LoginClientRequestCharacterList() {
  // @@protoc_insertion_point(destructor:protocol.LoginClientRequestCharacterList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginClientRequestCharacterList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginClientRequestCharacterList::ArenaDtor(void* object) {
  LoginClientRequestCharacterList* _this = reinterpret_cast< LoginClientRequestCharacterList* >(object);
  (void)_this;
}
void LoginClientRequestCharacterList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginClientRequestCharacterList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginClientRequestCharacterList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginClientRequestCharacterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginClientRequestCharacterList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginClientRequestCharacterList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginClientRequestCharacterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginClientRequestCharacterList)
  return target;
}

size_t LoginClientRequestCharacterList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginClientRequestCharacterList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginClientRequestCharacterList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LoginClientRequestCharacterList)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginClientRequestCharacterList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginClientRequestCharacterList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LoginClientRequestCharacterList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LoginClientRequestCharacterList)
    MergeFrom(*source);
  }
}

void LoginClientRequestCharacterList::MergeFrom(const LoginClientRequestCharacterList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginClientRequestCharacterList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LoginClientRequestCharacterList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LoginClientRequestCharacterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginClientRequestCharacterList::CopyFrom(const LoginClientRequestCharacterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginClientRequestCharacterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginClientRequestCharacterList::IsInitialized() const {
  return true;
}

void LoginClientRequestCharacterList::InternalSwap(LoginClientRequestCharacterList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginClientRequestCharacterList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[2]);
}

// ===================================================================

class LoginServerCharacterList::_Internal {
 public:
};

void LoginServerCharacterList::clear_characters() {
  characters_.Clear();
}
LoginServerCharacterList::LoginServerCharacterList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  characters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.LoginServerCharacterList)
}
LoginServerCharacterList::LoginServerCharacterList(const LoginServerCharacterList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      characters_(from.characters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.LoginServerCharacterList)
}

void LoginServerCharacterList::SharedCtor() {
}

LoginServerCharacterList::~LoginServerCharacterList() {
  // @@protoc_insertion_point(destructor:protocol.LoginServerCharacterList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginServerCharacterList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginServerCharacterList::ArenaDtor(void* object) {
  LoginServerCharacterList* _this = reinterpret_cast< LoginServerCharacterList* >(object);
  (void)_this;
}
void LoginServerCharacterList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginServerCharacterList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginServerCharacterList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginServerCharacterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginServerCharacterList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.LoginCharacter characters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginServerCharacterList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginServerCharacterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.LoginCharacter characters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_characters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginServerCharacterList)
  return target;
}

size_t LoginServerCharacterList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginServerCharacterList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.LoginCharacter characters = 1;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginServerCharacterList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LoginServerCharacterList)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginServerCharacterList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginServerCharacterList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LoginServerCharacterList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LoginServerCharacterList)
    MergeFrom(*source);
  }
}

void LoginServerCharacterList::MergeFrom(const LoginServerCharacterList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginServerCharacterList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  characters_.MergeFrom(from.characters_);
}

void LoginServerCharacterList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LoginServerCharacterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerCharacterList::CopyFrom(const LoginServerCharacterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginServerCharacterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerCharacterList::IsInitialized() const {
  return true;
}

void LoginServerCharacterList::InternalSwap(LoginServerCharacterList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  characters_.InternalSwap(&other->characters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginServerCharacterList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[3]);
}

// ===================================================================

class LoginClientSelectCharacter::_Internal {
 public:
};

LoginClientSelectCharacter::LoginClientSelectCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.LoginClientSelectCharacter)
}
LoginClientSelectCharacter::LoginClientSelectCharacter(const LoginClientSelectCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  character_id_ = from.character_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.LoginClientSelectCharacter)
}

void LoginClientSelectCharacter::SharedCtor() {
character_id_ = 0;
}

LoginClientSelectCharacter::~LoginClientSelectCharacter() {
  // @@protoc_insertion_point(destructor:protocol.LoginClientSelectCharacter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginClientSelectCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginClientSelectCharacter::ArenaDtor(void* object) {
  LoginClientSelectCharacter* _this = reinterpret_cast< LoginClientSelectCharacter* >(object);
  (void)_this;
}
void LoginClientSelectCharacter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginClientSelectCharacter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginClientSelectCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginClientSelectCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginClientSelectCharacter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginClientSelectCharacter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginClientSelectCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_character_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginClientSelectCharacter)
  return target;
}

size_t LoginClientSelectCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginClientSelectCharacter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_character_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginClientSelectCharacter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LoginClientSelectCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginClientSelectCharacter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginClientSelectCharacter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LoginClientSelectCharacter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LoginClientSelectCharacter)
    MergeFrom(*source);
  }
}

void LoginClientSelectCharacter::MergeFrom(const LoginClientSelectCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginClientSelectCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
}

void LoginClientSelectCharacter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LoginClientSelectCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginClientSelectCharacter::CopyFrom(const LoginClientSelectCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginClientSelectCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginClientSelectCharacter::IsInitialized() const {
  return true;
}

void LoginClientSelectCharacter::InternalSwap(LoginClientSelectCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(character_id_, other->character_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginClientSelectCharacter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[4]);
}

// ===================================================================

class LoginClientDeleteCharacter::_Internal {
 public:
};

LoginClientDeleteCharacter::LoginClientDeleteCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.LoginClientDeleteCharacter)
}
LoginClientDeleteCharacter::LoginClientDeleteCharacter(const LoginClientDeleteCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  character_id_ = from.character_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.LoginClientDeleteCharacter)
}

void LoginClientDeleteCharacter::SharedCtor() {
character_id_ = 0;
}

LoginClientDeleteCharacter::~LoginClientDeleteCharacter() {
  // @@protoc_insertion_point(destructor:protocol.LoginClientDeleteCharacter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginClientDeleteCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginClientDeleteCharacter::ArenaDtor(void* object) {
  LoginClientDeleteCharacter* _this = reinterpret_cast< LoginClientDeleteCharacter* >(object);
  (void)_this;
}
void LoginClientDeleteCharacter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginClientDeleteCharacter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginClientDeleteCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginClientDeleteCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginClientDeleteCharacter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginClientDeleteCharacter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginClientDeleteCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_character_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginClientDeleteCharacter)
  return target;
}

size_t LoginClientDeleteCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginClientDeleteCharacter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_character_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginClientDeleteCharacter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LoginClientDeleteCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginClientDeleteCharacter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginClientDeleteCharacter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LoginClientDeleteCharacter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LoginClientDeleteCharacter)
    MergeFrom(*source);
  }
}

void LoginClientDeleteCharacter::MergeFrom(const LoginClientDeleteCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginClientDeleteCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
}

void LoginClientDeleteCharacter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LoginClientDeleteCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginClientDeleteCharacter::CopyFrom(const LoginClientDeleteCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginClientDeleteCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginClientDeleteCharacter::IsInitialized() const {
  return true;
}

void LoginClientDeleteCharacter::InternalSwap(LoginClientDeleteCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(character_id_, other->character_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginClientDeleteCharacter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[5]);
}

// ===================================================================

class LoginServerDeleteCharacter::_Internal {
 public:
};

LoginServerDeleteCharacter::LoginServerDeleteCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.LoginServerDeleteCharacter)
}
LoginServerDeleteCharacter::LoginServerDeleteCharacter(const LoginServerDeleteCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_id_) -
    reinterpret_cast<char*>(&success_)) + sizeof(character_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.LoginServerDeleteCharacter)
}

void LoginServerDeleteCharacter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&character_id_) -
    reinterpret_cast<char*>(&success_)) + sizeof(character_id_));
}

LoginServerDeleteCharacter::~LoginServerDeleteCharacter() {
  // @@protoc_insertion_point(destructor:protocol.LoginServerDeleteCharacter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginServerDeleteCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginServerDeleteCharacter::ArenaDtor(void* object) {
  LoginServerDeleteCharacter* _this = reinterpret_cast< LoginServerDeleteCharacter* >(object);
  (void)_this;
}
void LoginServerDeleteCharacter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginServerDeleteCharacter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginServerDeleteCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginServerDeleteCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_id_) -
      reinterpret_cast<char*>(&success_)) + sizeof(character_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginServerDeleteCharacter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 character_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginServerDeleteCharacter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginServerDeleteCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 character_id = 2;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_character_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginServerDeleteCharacter)
  return target;
}

size_t LoginServerDeleteCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginServerDeleteCharacter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 character_id = 2;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_character_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginServerDeleteCharacter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LoginServerDeleteCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginServerDeleteCharacter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginServerDeleteCharacter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LoginServerDeleteCharacter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LoginServerDeleteCharacter)
    MergeFrom(*source);
  }
}

void LoginServerDeleteCharacter::MergeFrom(const LoginServerDeleteCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginServerDeleteCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
}

void LoginServerDeleteCharacter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LoginServerDeleteCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerDeleteCharacter::CopyFrom(const LoginServerDeleteCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginServerDeleteCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerDeleteCharacter::IsInitialized() const {
  return true;
}

void LoginServerDeleteCharacter::InternalSwap(LoginServerDeleteCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginServerDeleteCharacter, character_id_)
      + sizeof(LoginServerDeleteCharacter::character_id_)
      - PROTOBUF_FIELD_OFFSET(LoginServerDeleteCharacter, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginServerDeleteCharacter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[6]);
}

// ===================================================================

class LoginClientCreateCharacter::_Internal {
 public:
};

LoginClientCreateCharacter::LoginClientCreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.LoginClientCreateCharacter)
}
LoginClientCreateCharacter::LoginClientCreateCharacter(const LoginClientCreateCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.LoginClientCreateCharacter)
}

void LoginClientCreateCharacter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

LoginClientCreateCharacter::~LoginClientCreateCharacter() {
  // @@protoc_insertion_point(destructor:protocol.LoginClientCreateCharacter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginClientCreateCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginClientCreateCharacter::ArenaDtor(void* object) {
  LoginClientCreateCharacter* _this = reinterpret_cast< LoginClientCreateCharacter* >(object);
  (void)_this;
}
void LoginClientCreateCharacter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginClientCreateCharacter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginClientCreateCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginClientCreateCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginClientCreateCharacter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.LoginClientCreateCharacter.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginClientCreateCharacter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginClientCreateCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.LoginClientCreateCharacter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginClientCreateCharacter)
  return target;
}

size_t LoginClientCreateCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginClientCreateCharacter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginClientCreateCharacter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LoginClientCreateCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginClientCreateCharacter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginClientCreateCharacter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LoginClientCreateCharacter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LoginClientCreateCharacter)
    MergeFrom(*source);
  }
}

void LoginClientCreateCharacter::MergeFrom(const LoginClientCreateCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginClientCreateCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void LoginClientCreateCharacter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LoginClientCreateCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginClientCreateCharacter::CopyFrom(const LoginClientCreateCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginClientCreateCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginClientCreateCharacter::IsInitialized() const {
  return true;
}

void LoginClientCreateCharacter::InternalSwap(LoginClientCreateCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginClientCreateCharacter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[7]);
}

// ===================================================================

class LoginServerCreateCharacter::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginServerCreateCharacter>()._has_bits_);
  static const ::protocol::LoginCharacter& character(const LoginServerCreateCharacter* msg);
  static void set_has_character(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::LoginCharacter&
LoginServerCreateCharacter::_Internal::character(const LoginServerCreateCharacter* msg) {
  return *msg->character_;
}
void LoginServerCreateCharacter::clear_character() {
  if (character_ != nullptr) character_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LoginServerCreateCharacter::LoginServerCreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.LoginServerCreateCharacter)
}
LoginServerCreateCharacter::LoginServerCreateCharacter(const LoginServerCreateCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character()) {
    character_ = new ::protocol::LoginCharacter(*from.character_);
  } else {
    character_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:protocol.LoginServerCreateCharacter)
}

void LoginServerCreateCharacter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&character_)) + sizeof(result_));
}

LoginServerCreateCharacter::~LoginServerCreateCharacter() {
  // @@protoc_insertion_point(destructor:protocol.LoginServerCreateCharacter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginServerCreateCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete character_;
}

void LoginServerCreateCharacter::ArenaDtor(void* object) {
  LoginServerCreateCharacter* _this = reinterpret_cast< LoginServerCreateCharacter* >(object);
  (void)_this;
}
void LoginServerCreateCharacter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginServerCreateCharacter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginServerCreateCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginServerCreateCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(character_ != nullptr);
    character_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginServerCreateCharacter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.CreateCharResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::protocol::CreateCharResult>(val));
        } else goto handle_unusual;
        continue;
      // optional .protocol.LoginCharacter character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginServerCreateCharacter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginServerCreateCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.CreateCharResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional .protocol.LoginCharacter character = 2;
  if (_internal_has_character()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::character(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginServerCreateCharacter)
  return target;
}

size_t LoginServerCreateCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginServerCreateCharacter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protocol.LoginCharacter character = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_);
  }

  // .protocol.CreateCharResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginServerCreateCharacter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LoginServerCreateCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginServerCreateCharacter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginServerCreateCharacter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LoginServerCreateCharacter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LoginServerCreateCharacter)
    MergeFrom(*source);
  }
}

void LoginServerCreateCharacter::MergeFrom(const LoginServerCreateCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginServerCreateCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_character()) {
    _internal_mutable_character()->::protocol::LoginCharacter::MergeFrom(from._internal_character());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void LoginServerCreateCharacter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LoginServerCreateCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerCreateCharacter::CopyFrom(const LoginServerCreateCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginServerCreateCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerCreateCharacter::IsInitialized() const {
  return true;
}

void LoginServerCreateCharacter::InternalSwap(LoginServerCreateCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginServerCreateCharacter, result_)
      + sizeof(LoginServerCreateCharacter::result_)
      - PROTOBUF_FIELD_OFFSET(LoginServerCreateCharacter, character_)>(
          reinterpret_cast<char*>(&character_),
          reinterpret_cast<char*>(&other->character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginServerCreateCharacter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[8]);
}

// ===================================================================

class LoginServerCharSelectResult::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginServerCharSelectResult>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LoginServerCharSelectResult::LoginServerCharSelectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.LoginServerCharSelectResult)
}
LoginServerCharSelectResult::LoginServerCharSelectResult(const LoginServerCharSelectResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&result_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:protocol.LoginServerCharSelectResult)
}

void LoginServerCharSelectResult::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&result_)) + sizeof(port_));
}

LoginServerCharSelectResult::~LoginServerCharSelectResult() {
  // @@protoc_insertion_point(destructor:protocol.LoginServerCharSelectResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginServerCharSelectResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginServerCharSelectResult::ArenaDtor(void* object) {
  LoginServerCharSelectResult* _this = reinterpret_cast< LoginServerCharSelectResult* >(object);
  (void)_this;
}
void LoginServerCharSelectResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginServerCharSelectResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginServerCharSelectResult::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginServerCharSelectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginServerCharSelectResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.SelectCharResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::protocol::SelectCharResult>(val));
        } else goto handle_unusual;
        continue;
      // optional string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.LoginServerCharSelectResult.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginServerCharSelectResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginServerCharSelectResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.SelectCharResult result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional string ip = 2;
  if (_internal_has_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.LoginServerCharSelectResult.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // optional int32 port = 3;
  if (_internal_has_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginServerCharSelectResult)
  return target;
}

size_t LoginServerCharSelectResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginServerCharSelectResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string ip = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .protocol.SelectCharResult result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // optional int32 port = 3;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginServerCharSelectResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LoginServerCharSelectResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginServerCharSelectResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginServerCharSelectResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LoginServerCharSelectResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LoginServerCharSelectResult)
    MergeFrom(*source);
  }
}

void LoginServerCharSelectResult::MergeFrom(const LoginServerCharSelectResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginServerCharSelectResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ip()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_has_port()) {
    _internal_set_port(from._internal_port());
  }
}

void LoginServerCharSelectResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LoginServerCharSelectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerCharSelectResult::CopyFrom(const LoginServerCharSelectResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginServerCharSelectResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerCharSelectResult::IsInitialized() const {
  return true;
}

void LoginServerCharSelectResult::InternalSwap(LoginServerCharSelectResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginServerCharSelectResult, port_)
      + sizeof(LoginServerCharSelectResult::port_)
      - PROTOBUF_FIELD_OFFSET(LoginServerCharSelectResult, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginServerCharSelectResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[9]);
}

// ===================================================================

class LoginServerChat::_Internal {
 public:
};

LoginServerChat::LoginServerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.LoginServerChat)
}
LoginServerChat::LoginServerChat(const LoginServerChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.LoginServerChat)
}

void LoginServerChat::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginServerChat::~LoginServerChat() {
  // @@protoc_insertion_point(destructor:protocol.LoginServerChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginServerChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginServerChat::ArenaDtor(void* object) {
  LoginServerChat* _this = reinterpret_cast< LoginServerChat* >(object);
  (void)_this;
}
void LoginServerChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginServerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginServerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LoginServerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginServerChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.LoginServerChat.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginServerChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LoginServerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.LoginServerChat.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LoginServerChat)
  return target;
}

size_t LoginServerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LoginServerChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginServerChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LoginServerChat)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginServerChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginServerChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LoginServerChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LoginServerChat)
    MergeFrom(*source);
  }
}

void LoginServerChat::MergeFrom(const LoginServerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LoginServerChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.message().empty()) {
    _internal_set_message(from._internal_message());
  }
}

void LoginServerChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LoginServerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerChat::CopyFrom(const LoginServerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LoginServerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerChat::IsInitialized() const {
  return true;
}

void LoginServerChat::InternalSwap(LoginServerChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginServerChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::LoginClientLogin* Arena::CreateMaybeMessage< ::protocol::LoginClientLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginClientLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::LoginServerLogin* Arena::CreateMaybeMessage< ::protocol::LoginServerLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginServerLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::LoginClientRequestCharacterList* Arena::CreateMaybeMessage< ::protocol::LoginClientRequestCharacterList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginClientRequestCharacterList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::LoginServerCharacterList* Arena::CreateMaybeMessage< ::protocol::LoginServerCharacterList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginServerCharacterList >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::LoginClientSelectCharacter* Arena::CreateMaybeMessage< ::protocol::LoginClientSelectCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginClientSelectCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::LoginClientDeleteCharacter* Arena::CreateMaybeMessage< ::protocol::LoginClientDeleteCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginClientDeleteCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::LoginServerDeleteCharacter* Arena::CreateMaybeMessage< ::protocol::LoginServerDeleteCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginServerDeleteCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::LoginClientCreateCharacter* Arena::CreateMaybeMessage< ::protocol::LoginClientCreateCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginClientCreateCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::LoginServerCreateCharacter* Arena::CreateMaybeMessage< ::protocol::LoginServerCreateCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginServerCreateCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::LoginServerCharSelectResult* Arena::CreateMaybeMessage< ::protocol::LoginServerCharSelectResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginServerCharSelectResult >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::LoginServerChat* Arena::CreateMaybeMessage< ::protocol::LoginServerChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::LoginServerChat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
