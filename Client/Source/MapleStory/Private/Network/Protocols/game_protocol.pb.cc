// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#include "game_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr GameClientEnter::GameClientEnter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_id_(0)
  , auth_key_(0){}
struct GameClientEnterDefaultTypeInternal {
  constexpr GameClientEnterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientEnterDefaultTypeInternal() {}
  union {
    GameClientEnter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientEnterDefaultTypeInternal _GameClientEnter_default_instance_;
constexpr GameServerEnter::GameServerEnter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_info_(nullptr)
  , success_(false)
  , map_id_(0){}
struct GameServerEnterDefaultTypeInternal {
  constexpr GameServerEnterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerEnterDefaultTypeInternal() {}
  union {
    GameServerEnter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerEnterDefaultTypeInternal _GameServerEnter_default_instance_;
constexpr GameServerAddPlayer::GameServerAddPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_info_(nullptr){}
struct GameServerAddPlayerDefaultTypeInternal {
  constexpr GameServerAddPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerAddPlayerDefaultTypeInternal() {}
  union {
    GameServerAddPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerAddPlayerDefaultTypeInternal _GameServerAddPlayer_default_instance_;
constexpr GameServerChangeMap::GameServerChangeMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_id_(0){}
struct GameServerChangeMapDefaultTypeInternal {
  constexpr GameServerChangeMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerChangeMapDefaultTypeInternal() {}
  union {
    GameServerChangeMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerChangeMapDefaultTypeInternal _GameServerChangeMap_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_game_5fprotocol_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_game_5fprotocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_game_5fprotocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_game_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientEnter, character_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientEnter, auth_key_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerEnter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerEnter, success_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerEnter, player_info_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerEnter, map_id_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAddPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAddPlayer, player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerChangeMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerChangeMap, map_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::GameClientEnter)},
  { 7, 15, sizeof(::protocol::GameServerEnter)},
  { 18, -1, sizeof(::protocol::GameServerAddPlayer)},
  { 24, -1, sizeof(::protocol::GameServerChangeMap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameClientEnter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerEnter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerAddPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerChangeMap_default_instance_),
};

const char descriptor_table_protodef_game_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023game_protocol.proto\022\010protocol\032\017game_en"
  "um.proto\032\021game_struct.proto\"9\n\017GameClien"
  "tEnter\022\024\n\014character_id\030\001 \001(\005\022\020\n\010auth_key"
  "\030\002 \001(\005\"\202\001\n\017GameServerEnter\022\017\n\007success\030\001 "
  "\001(\010\022.\n\013player_info\030\002 \001(\0132\024.protocol.Play"
  "erInfoH\000\210\001\001\022\023\n\006map_id\030\003 \001(\005H\001\210\001\001B\016\n\014_pla"
  "yer_infoB\t\n\007_map_id\"E\n\023GameServerAddPlay"
  "er\022.\n\013player_info\030\001 \001(\0132\031.protocol.Other"
  "PlayerInfo\"%\n\023GameServerChangeMap\022\016\n\006map"
  "_id\030\001 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_game_5fprotocol_2eproto_deps[2] = {
  &::descriptor_table_game_5fenum_2eproto,
  &::descriptor_table_game_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_game_5fprotocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fprotocol_2eproto = {
  false, false, 377, descriptor_table_protodef_game_5fprotocol_2eproto, "game_protocol.proto", 
  &descriptor_table_game_5fprotocol_2eproto_once, descriptor_table_game_5fprotocol_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_game_5fprotocol_2eproto::offsets,
  file_level_metadata_game_5fprotocol_2eproto, file_level_enum_descriptors_game_5fprotocol_2eproto, file_level_service_descriptors_game_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_game_5fprotocol_2eproto_getter() {
  return &descriptor_table_game_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_game_5fprotocol_2eproto(&descriptor_table_game_5fprotocol_2eproto);
namespace protocol {

// ===================================================================

class GameClientEnter::_Internal {
 public:
};

GameClientEnter::GameClientEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameClientEnter)
}
GameClientEnter::GameClientEnter(const GameClientEnter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_key_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(auth_key_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameClientEnter)
}

void GameClientEnter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auth_key_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(auth_key_));
}

GameClientEnter::~GameClientEnter() {
  // @@protoc_insertion_point(destructor:protocol.GameClientEnter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientEnter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientEnter::ArenaDtor(void* object) {
  GameClientEnter* _this = reinterpret_cast< GameClientEnter* >(object);
  (void)_this;
}
void GameClientEnter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientEnter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameClientEnter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_key_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(auth_key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientEnter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 auth_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auth_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientEnter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameClientEnter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_character_id(), target);
  }

  // int32 auth_key = 2;
  if (this->auth_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_auth_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameClientEnter)
  return target;
}

size_t GameClientEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameClientEnter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_character_id());
  }

  // int32 auth_key = 2;
  if (this->auth_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auth_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientEnter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameClientEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientEnter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientEnter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameClientEnter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameClientEnter)
    MergeFrom(*source);
  }
}

void GameClientEnter::MergeFrom(const GameClientEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameClientEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.auth_key() != 0) {
    _internal_set_auth_key(from._internal_auth_key());
  }
}

void GameClientEnter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameClientEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientEnter::CopyFrom(const GameClientEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameClientEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientEnter::IsInitialized() const {
  return true;
}

void GameClientEnter::InternalSwap(GameClientEnter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientEnter, auth_key_)
      + sizeof(GameClientEnter::auth_key_)
      - PROTOBUF_FIELD_OFFSET(GameClientEnter, character_id_)>(
          reinterpret_cast<char*>(&character_id_),
          reinterpret_cast<char*>(&other->character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientEnter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[0]);
}

// ===================================================================

class GameServerEnter::_Internal {
 public:
  using HasBits = decltype(std::declval<GameServerEnter>()._has_bits_);
  static const ::protocol::PlayerInfo& player_info(const GameServerEnter* msg);
  static void set_has_player_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_map_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::PlayerInfo&
GameServerEnter::_Internal::player_info(const GameServerEnter* msg) {
  return *msg->player_info_;
}
void GameServerEnter::clear_player_info() {
  if (player_info_ != nullptr) player_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameServerEnter::GameServerEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerEnter)
}
GameServerEnter::GameServerEnter(const GameServerEnter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    player_info_ = new ::protocol::PlayerInfo(*from.player_info_);
  } else {
    player_info_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_id_) -
    reinterpret_cast<char*>(&success_)) + sizeof(map_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerEnter)
}

void GameServerEnter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&map_id_) -
    reinterpret_cast<char*>(&player_info_)) + sizeof(map_id_));
}

GameServerEnter::~GameServerEnter() {
  // @@protoc_insertion_point(destructor:protocol.GameServerEnter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerEnter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_info_;
}

void GameServerEnter::ArenaDtor(void* object) {
  GameServerEnter* _this = reinterpret_cast< GameServerEnter* >(object);
  (void)_this;
}
void GameServerEnter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerEnter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerEnter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_info_ != nullptr);
    player_info_->Clear();
  }
  success_ = false;
  map_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerEnter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.PlayerInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 map_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_map_id(&has_bits);
          map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerEnter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerEnter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional .protocol.PlayerInfo player_info = 2;
  if (_internal_has_player_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_info(this), target, stream);
  }

  // optional int32 map_id = 3;
  if (_internal_has_map_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_map_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerEnter)
  return target;
}

size_t GameServerEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerEnter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protocol.PlayerInfo player_info = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_info_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 map_id = 3;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerEnter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerEnter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerEnter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerEnter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerEnter)
    MergeFrom(*source);
  }
}

void GameServerEnter::MergeFrom(const GameServerEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_info()) {
    _internal_mutable_player_info()->::protocol::PlayerInfo::MergeFrom(from._internal_player_info());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_has_map_id()) {
    _internal_set_map_id(from._internal_map_id());
  }
}

void GameServerEnter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerEnter::CopyFrom(const GameServerEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerEnter::IsInitialized() const {
  return true;
}

void GameServerEnter::InternalSwap(GameServerEnter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerEnter, map_id_)
      + sizeof(GameServerEnter::map_id_)
      - PROTOBUF_FIELD_OFFSET(GameServerEnter, player_info_)>(
          reinterpret_cast<char*>(&player_info_),
          reinterpret_cast<char*>(&other->player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerEnter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[1]);
}

// ===================================================================

class GameServerAddPlayer::_Internal {
 public:
  static const ::protocol::OtherPlayerInfo& player_info(const GameServerAddPlayer* msg);
};

const ::protocol::OtherPlayerInfo&
GameServerAddPlayer::_Internal::player_info(const GameServerAddPlayer* msg) {
  return *msg->player_info_;
}
void GameServerAddPlayer::clear_player_info() {
  if (GetArenaForAllocation() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
}
GameServerAddPlayer::GameServerAddPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerAddPlayer)
}
GameServerAddPlayer::GameServerAddPlayer(const GameServerAddPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    player_info_ = new ::protocol::OtherPlayerInfo(*from.player_info_);
  } else {
    player_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerAddPlayer)
}

void GameServerAddPlayer::SharedCtor() {
player_info_ = nullptr;
}

GameServerAddPlayer::~GameServerAddPlayer() {
  // @@protoc_insertion_point(destructor:protocol.GameServerAddPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerAddPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_info_;
}

void GameServerAddPlayer::ArenaDtor(void* object) {
  GameServerAddPlayer* _this = reinterpret_cast< GameServerAddPlayer* >(object);
  (void)_this;
}
void GameServerAddPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerAddPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerAddPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerAddPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerAddPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.OtherPlayerInfo player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerAddPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerAddPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.OtherPlayerInfo player_info = 1;
  if (this->has_player_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerAddPlayer)
  return target;
}

size_t GameServerAddPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerAddPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.OtherPlayerInfo player_info = 1;
  if (this->has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerAddPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerAddPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerAddPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerAddPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerAddPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerAddPlayer)
    MergeFrom(*source);
  }
}

void GameServerAddPlayer::MergeFrom(const GameServerAddPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerAddPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_info()) {
    _internal_mutable_player_info()->::protocol::OtherPlayerInfo::MergeFrom(from._internal_player_info());
  }
}

void GameServerAddPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerAddPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerAddPlayer::CopyFrom(const GameServerAddPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerAddPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerAddPlayer::IsInitialized() const {
  return true;
}

void GameServerAddPlayer::InternalSwap(GameServerAddPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_info_, other->player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerAddPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[2]);
}

// ===================================================================

class GameServerChangeMap::_Internal {
 public:
};

GameServerChangeMap::GameServerChangeMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerChangeMap)
}
GameServerChangeMap::GameServerChangeMap(const GameServerChangeMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_id_ = from.map_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerChangeMap)
}

void GameServerChangeMap::SharedCtor() {
map_id_ = 0;
}

GameServerChangeMap::~GameServerChangeMap() {
  // @@protoc_insertion_point(destructor:protocol.GameServerChangeMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerChangeMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerChangeMap::ArenaDtor(void* object) {
  GameServerChangeMap* _this = reinterpret_cast< GameServerChangeMap* >(object);
  (void)_this;
}
void GameServerChangeMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerChangeMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerChangeMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerChangeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerChangeMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 map_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerChangeMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerChangeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_id = 1;
  if (this->map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_map_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerChangeMap)
  return target;
}

size_t GameServerChangeMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerChangeMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 map_id = 1;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerChangeMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerChangeMap)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerChangeMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerChangeMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerChangeMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerChangeMap)
    MergeFrom(*source);
  }
}

void GameServerChangeMap::MergeFrom(const GameServerChangeMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerChangeMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_id() != 0) {
    _internal_set_map_id(from._internal_map_id());
  }
}

void GameServerChangeMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerChangeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerChangeMap::CopyFrom(const GameServerChangeMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerChangeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerChangeMap::IsInitialized() const {
  return true;
}

void GameServerChangeMap::InternalSwap(GameServerChangeMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(map_id_, other->map_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerChangeMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::GameClientEnter* Arena::CreateMaybeMessage< ::protocol::GameClientEnter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameClientEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerEnter* Arena::CreateMaybeMessage< ::protocol::GameServerEnter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerAddPlayer* Arena::CreateMaybeMessage< ::protocol::GameServerAddPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerAddPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerChangeMap* Arena::CreateMaybeMessage< ::protocol::GameServerChangeMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerChangeMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
