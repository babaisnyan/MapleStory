// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "game_enum.pb.h"
#include "game_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fprotocol_2eproto;
namespace protocol {
class GameClientChangeKeySetting;
struct GameClientChangeKeySettingDefaultTypeInternal;
extern GameClientChangeKeySettingDefaultTypeInternal _GameClientChangeKeySetting_default_instance_;
class GameClientChat;
struct GameClientChatDefaultTypeInternal;
extern GameClientChatDefaultTypeInternal _GameClientChat_default_instance_;
class GameClientEnter;
struct GameClientEnterDefaultTypeInternal;
extern GameClientEnterDefaultTypeInternal _GameClientEnter_default_instance_;
class GameClientPlayerMove;
struct GameClientPlayerMoveDefaultTypeInternal;
extern GameClientPlayerMoveDefaultTypeInternal _GameClientPlayerMove_default_instance_;
class GameClientRevive;
struct GameClientReviveDefaultTypeInternal;
extern GameClientReviveDefaultTypeInternal _GameClientRevive_default_instance_;
class GameServerAddMonster;
struct GameServerAddMonsterDefaultTypeInternal;
extern GameServerAddMonsterDefaultTypeInternal _GameServerAddMonster_default_instance_;
class GameServerAddPlayer;
struct GameServerAddPlayerDefaultTypeInternal;
extern GameServerAddPlayerDefaultTypeInternal _GameServerAddPlayer_default_instance_;
class GameServerChangeMap;
struct GameServerChangeMapDefaultTypeInternal;
extern GameServerChangeMapDefaultTypeInternal _GameServerChangeMap_default_instance_;
class GameServerChat;
struct GameServerChatDefaultTypeInternal;
extern GameServerChatDefaultTypeInternal _GameServerChat_default_instance_;
class GameServerEnter;
struct GameServerEnterDefaultTypeInternal;
extern GameServerEnterDefaultTypeInternal _GameServerEnter_default_instance_;
class GameServerMobAttack;
struct GameServerMobAttackDefaultTypeInternal;
extern GameServerMobAttackDefaultTypeInternal _GameServerMobAttack_default_instance_;
class GameServerMobDamage;
struct GameServerMobDamageDefaultTypeInternal;
extern GameServerMobDamageDefaultTypeInternal _GameServerMobDamage_default_instance_;
class GameServerMobMove;
struct GameServerMobMoveDefaultTypeInternal;
extern GameServerMobMoveDefaultTypeInternal _GameServerMobMove_default_instance_;
class GameServerPlayerDamage;
struct GameServerPlayerDamageDefaultTypeInternal;
extern GameServerPlayerDamageDefaultTypeInternal _GameServerPlayerDamage_default_instance_;
class GameServerPlayerDead;
struct GameServerPlayerDeadDefaultTypeInternal;
extern GameServerPlayerDeadDefaultTypeInternal _GameServerPlayerDead_default_instance_;
class GameServerPlayerMove;
struct GameServerPlayerMoveDefaultTypeInternal;
extern GameServerPlayerMoveDefaultTypeInternal _GameServerPlayerMove_default_instance_;
class GameServerRemoveObject;
struct GameServerRemoveObjectDefaultTypeInternal;
extern GameServerRemoveObjectDefaultTypeInternal _GameServerRemoveObject_default_instance_;
class GameServerRevive;
struct GameServerReviveDefaultTypeInternal;
extern GameServerReviveDefaultTypeInternal _GameServerRevive_default_instance_;
class GameServerTeleportPlayer;
struct GameServerTeleportPlayerDefaultTypeInternal;
extern GameServerTeleportPlayerDefaultTypeInternal _GameServerTeleportPlayer_default_instance_;
class GameServerUpdatePlayerStat;
struct GameServerUpdatePlayerStatDefaultTypeInternal;
extern GameServerUpdatePlayerStatDefaultTypeInternal _GameServerUpdatePlayerStat_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::GameClientChangeKeySetting* Arena::CreateMaybeMessage<::protocol::GameClientChangeKeySetting>(Arena*);
template<> ::protocol::GameClientChat* Arena::CreateMaybeMessage<::protocol::GameClientChat>(Arena*);
template<> ::protocol::GameClientEnter* Arena::CreateMaybeMessage<::protocol::GameClientEnter>(Arena*);
template<> ::protocol::GameClientPlayerMove* Arena::CreateMaybeMessage<::protocol::GameClientPlayerMove>(Arena*);
template<> ::protocol::GameClientRevive* Arena::CreateMaybeMessage<::protocol::GameClientRevive>(Arena*);
template<> ::protocol::GameServerAddMonster* Arena::CreateMaybeMessage<::protocol::GameServerAddMonster>(Arena*);
template<> ::protocol::GameServerAddPlayer* Arena::CreateMaybeMessage<::protocol::GameServerAddPlayer>(Arena*);
template<> ::protocol::GameServerChangeMap* Arena::CreateMaybeMessage<::protocol::GameServerChangeMap>(Arena*);
template<> ::protocol::GameServerChat* Arena::CreateMaybeMessage<::protocol::GameServerChat>(Arena*);
template<> ::protocol::GameServerEnter* Arena::CreateMaybeMessage<::protocol::GameServerEnter>(Arena*);
template<> ::protocol::GameServerMobAttack* Arena::CreateMaybeMessage<::protocol::GameServerMobAttack>(Arena*);
template<> ::protocol::GameServerMobDamage* Arena::CreateMaybeMessage<::protocol::GameServerMobDamage>(Arena*);
template<> ::protocol::GameServerMobMove* Arena::CreateMaybeMessage<::protocol::GameServerMobMove>(Arena*);
template<> ::protocol::GameServerPlayerDamage* Arena::CreateMaybeMessage<::protocol::GameServerPlayerDamage>(Arena*);
template<> ::protocol::GameServerPlayerDead* Arena::CreateMaybeMessage<::protocol::GameServerPlayerDead>(Arena*);
template<> ::protocol::GameServerPlayerMove* Arena::CreateMaybeMessage<::protocol::GameServerPlayerMove>(Arena*);
template<> ::protocol::GameServerRemoveObject* Arena::CreateMaybeMessage<::protocol::GameServerRemoveObject>(Arena*);
template<> ::protocol::GameServerRevive* Arena::CreateMaybeMessage<::protocol::GameServerRevive>(Arena*);
template<> ::protocol::GameServerTeleportPlayer* Arena::CreateMaybeMessage<::protocol::GameServerTeleportPlayer>(Arena*);
template<> ::protocol::GameServerUpdatePlayerStat* Arena::CreateMaybeMessage<::protocol::GameServerUpdatePlayerStat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class GameClientEnter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameClientEnter) */ {
 public:
  inline GameClientEnter() : GameClientEnter(nullptr) {}
  ~GameClientEnter() override;
  explicit constexpr GameClientEnter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientEnter(const GameClientEnter& from);
  GameClientEnter(GameClientEnter&& from) noexcept
    : GameClientEnter() {
    *this = ::std::move(from);
  }

  inline GameClientEnter& operator=(const GameClientEnter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientEnter& operator=(GameClientEnter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientEnter& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientEnter* internal_default_instance() {
    return reinterpret_cast<const GameClientEnter*>(
               &_GameClientEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameClientEnter& a, GameClientEnter& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientEnter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientEnter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientEnter* New() const final {
    return new GameClientEnter();
  }

  GameClientEnter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientEnter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientEnter& from);
  void MergeFrom(const GameClientEnter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientEnter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameClientEnter";
  }
  protected:
  explicit GameClientEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
    kAuthKeyFieldNumber = 2,
  };
  // uint32 character_id = 1;
  void clear_character_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 character_id() const;
  void set_character_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character_id() const;
  void _internal_set_character_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 auth_key = 2;
  void clear_auth_key();
  ::PROTOBUF_NAMESPACE_ID::int32 auth_key() const;
  void set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auth_key() const;
  void _internal_set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameClientEnter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 auth_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerEnter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerEnter) */ {
 public:
  inline GameServerEnter() : GameServerEnter(nullptr) {}
  ~GameServerEnter() override;
  explicit constexpr GameServerEnter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerEnter(const GameServerEnter& from);
  GameServerEnter(GameServerEnter&& from) noexcept
    : GameServerEnter() {
    *this = ::std::move(from);
  }

  inline GameServerEnter& operator=(const GameServerEnter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerEnter& operator=(GameServerEnter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerEnter& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerEnter* internal_default_instance() {
    return reinterpret_cast<const GameServerEnter*>(
               &_GameServerEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameServerEnter& a, GameServerEnter& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerEnter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerEnter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerEnter* New() const final {
    return new GameServerEnter();
  }

  GameServerEnter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerEnter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerEnter& from);
  void MergeFrom(const GameServerEnter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerEnter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerEnter";
  }
  protected:
  explicit GameServerEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kMapIdFieldNumber = 3,
  };
  // optional .protocol.PlayerInfo player_info = 2;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::protocol::PlayerInfo& player_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::protocol::PlayerInfo* release_player_info();
  ::protocol::PlayerInfo* mutable_player_info();
  void set_allocated_player_info(::protocol::PlayerInfo* player_info);
  private:
  const ::protocol::PlayerInfo& _internal_player_info() const;
  ::protocol::PlayerInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::protocol::PlayerInfo* player_info);
  ::protocol::PlayerInfo* unsafe_arena_release_player_info();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional int32 map_id = 3;
  bool has_map_id() const;
  private:
  bool _internal_has_map_id() const;
  public:
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerEnter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protocol::PlayerInfo* player_info_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerAddPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerAddPlayer) */ {
 public:
  inline GameServerAddPlayer() : GameServerAddPlayer(nullptr) {}
  ~GameServerAddPlayer() override;
  explicit constexpr GameServerAddPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerAddPlayer(const GameServerAddPlayer& from);
  GameServerAddPlayer(GameServerAddPlayer&& from) noexcept
    : GameServerAddPlayer() {
    *this = ::std::move(from);
  }

  inline GameServerAddPlayer& operator=(const GameServerAddPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerAddPlayer& operator=(GameServerAddPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerAddPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerAddPlayer* internal_default_instance() {
    return reinterpret_cast<const GameServerAddPlayer*>(
               &_GameServerAddPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameServerAddPlayer& a, GameServerAddPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerAddPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerAddPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerAddPlayer* New() const final {
    return new GameServerAddPlayer();
  }

  GameServerAddPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerAddPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerAddPlayer& from);
  void MergeFrom(const GameServerAddPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerAddPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerAddPlayer";
  }
  protected:
  explicit GameServerAddPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfosFieldNumber = 1,
  };
  // repeated .protocol.OtherPlayerInfo player_infos = 1;
  int player_infos_size() const;
  private:
  int _internal_player_infos_size() const;
  public:
  void clear_player_infos();
  ::protocol::OtherPlayerInfo* mutable_player_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OtherPlayerInfo >*
      mutable_player_infos();
  private:
  const ::protocol::OtherPlayerInfo& _internal_player_infos(int index) const;
  ::protocol::OtherPlayerInfo* _internal_add_player_infos();
  public:
  const ::protocol::OtherPlayerInfo& player_infos(int index) const;
  ::protocol::OtherPlayerInfo* add_player_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OtherPlayerInfo >&
      player_infos() const;

  // @@protoc_insertion_point(class_scope:protocol.GameServerAddPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OtherPlayerInfo > player_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerAddMonster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerAddMonster) */ {
 public:
  inline GameServerAddMonster() : GameServerAddMonster(nullptr) {}
  ~GameServerAddMonster() override;
  explicit constexpr GameServerAddMonster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerAddMonster(const GameServerAddMonster& from);
  GameServerAddMonster(GameServerAddMonster&& from) noexcept
    : GameServerAddMonster() {
    *this = ::std::move(from);
  }

  inline GameServerAddMonster& operator=(const GameServerAddMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerAddMonster& operator=(GameServerAddMonster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerAddMonster& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerAddMonster* internal_default_instance() {
    return reinterpret_cast<const GameServerAddMonster*>(
               &_GameServerAddMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameServerAddMonster& a, GameServerAddMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerAddMonster* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerAddMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerAddMonster* New() const final {
    return new GameServerAddMonster();
  }

  GameServerAddMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerAddMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerAddMonster& from);
  void MergeFrom(const GameServerAddMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerAddMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerAddMonster";
  }
  protected:
  explicit GameServerAddMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobInfosFieldNumber = 1,
  };
  // repeated .protocol.MobInfo mob_infos = 1;
  int mob_infos_size() const;
  private:
  int _internal_mob_infos_size() const;
  public:
  void clear_mob_infos();
  ::protocol::MobInfo* mutable_mob_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::MobInfo >*
      mutable_mob_infos();
  private:
  const ::protocol::MobInfo& _internal_mob_infos(int index) const;
  ::protocol::MobInfo* _internal_add_mob_infos();
  public:
  const ::protocol::MobInfo& mob_infos(int index) const;
  ::protocol::MobInfo* add_mob_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::MobInfo >&
      mob_infos() const;

  // @@protoc_insertion_point(class_scope:protocol.GameServerAddMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::MobInfo > mob_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerRemoveObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerRemoveObject) */ {
 public:
  inline GameServerRemoveObject() : GameServerRemoveObject(nullptr) {}
  ~GameServerRemoveObject() override;
  explicit constexpr GameServerRemoveObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerRemoveObject(const GameServerRemoveObject& from);
  GameServerRemoveObject(GameServerRemoveObject&& from) noexcept
    : GameServerRemoveObject() {
    *this = ::std::move(from);
  }

  inline GameServerRemoveObject& operator=(const GameServerRemoveObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerRemoveObject& operator=(GameServerRemoveObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerRemoveObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerRemoveObject* internal_default_instance() {
    return reinterpret_cast<const GameServerRemoveObject*>(
               &_GameServerRemoveObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameServerRemoveObject& a, GameServerRemoveObject& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerRemoveObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerRemoveObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerRemoveObject* New() const final {
    return new GameServerRemoveObject();
  }

  GameServerRemoveObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerRemoveObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerRemoveObject& from);
  void MergeFrom(const GameServerRemoveObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerRemoveObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerRemoveObject";
  }
  protected:
  explicit GameServerRemoveObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerRemoveObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerChangeMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerChangeMap) */ {
 public:
  inline GameServerChangeMap() : GameServerChangeMap(nullptr) {}
  ~GameServerChangeMap() override;
  explicit constexpr GameServerChangeMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerChangeMap(const GameServerChangeMap& from);
  GameServerChangeMap(GameServerChangeMap&& from) noexcept
    : GameServerChangeMap() {
    *this = ::std::move(from);
  }

  inline GameServerChangeMap& operator=(const GameServerChangeMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerChangeMap& operator=(GameServerChangeMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerChangeMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerChangeMap* internal_default_instance() {
    return reinterpret_cast<const GameServerChangeMap*>(
               &_GameServerChangeMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameServerChangeMap& a, GameServerChangeMap& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerChangeMap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerChangeMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerChangeMap* New() const final {
    return new GameServerChangeMap();
  }

  GameServerChangeMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerChangeMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerChangeMap& from);
  void MergeFrom(const GameServerChangeMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerChangeMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerChangeMap";
  }
  protected:
  explicit GameServerChangeMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIdFieldNumber = 1,
  };
  // int32 map_id = 1;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerChangeMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameClientPlayerMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameClientPlayerMove) */ {
 public:
  inline GameClientPlayerMove() : GameClientPlayerMove(nullptr) {}
  ~GameClientPlayerMove() override;
  explicit constexpr GameClientPlayerMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientPlayerMove(const GameClientPlayerMove& from);
  GameClientPlayerMove(GameClientPlayerMove&& from) noexcept
    : GameClientPlayerMove() {
    *this = ::std::move(from);
  }

  inline GameClientPlayerMove& operator=(const GameClientPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientPlayerMove& operator=(GameClientPlayerMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientPlayerMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientPlayerMove* internal_default_instance() {
    return reinterpret_cast<const GameClientPlayerMove*>(
               &_GameClientPlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GameClientPlayerMove& a, GameClientPlayerMove& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientPlayerMove* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientPlayerMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientPlayerMove* New() const final {
    return new GameClientPlayerMove();
  }

  GameClientPlayerMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientPlayerMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientPlayerMove& from);
  void MergeFrom(const GameClientPlayerMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientPlayerMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameClientPlayerMove";
  }
  protected:
  explicit GameClientPlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kFlipFieldNumber = 3,
    kAnimationFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // bool flip = 3;
  void clear_flip();
  bool flip() const;
  void set_flip(bool value);
  private:
  bool _internal_flip() const;
  void _internal_set_flip(bool value);
  public:

  // .protocol.PlayerAnimation animation = 4;
  void clear_animation();
  ::protocol::PlayerAnimation animation() const;
  void set_animation(::protocol::PlayerAnimation value);
  private:
  ::protocol::PlayerAnimation _internal_animation() const;
  void _internal_set_animation(::protocol::PlayerAnimation value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameClientPlayerMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  bool flip_;
  int animation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerPlayerMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerPlayerMove) */ {
 public:
  inline GameServerPlayerMove() : GameServerPlayerMove(nullptr) {}
  ~GameServerPlayerMove() override;
  explicit constexpr GameServerPlayerMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerPlayerMove(const GameServerPlayerMove& from);
  GameServerPlayerMove(GameServerPlayerMove&& from) noexcept
    : GameServerPlayerMove() {
    *this = ::std::move(from);
  }

  inline GameServerPlayerMove& operator=(const GameServerPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerPlayerMove& operator=(GameServerPlayerMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerPlayerMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerPlayerMove* internal_default_instance() {
    return reinterpret_cast<const GameServerPlayerMove*>(
               &_GameServerPlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GameServerPlayerMove& a, GameServerPlayerMove& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerPlayerMove* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerPlayerMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerPlayerMove* New() const final {
    return new GameServerPlayerMove();
  }

  GameServerPlayerMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerPlayerMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerPlayerMove& from);
  void MergeFrom(const GameServerPlayerMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerPlayerMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerPlayerMove";
  }
  protected:
  explicit GameServerPlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kFlipFieldNumber = 4,
    kAnimationFieldNumber = 5,
  };
  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // bool flip = 4;
  void clear_flip();
  bool flip() const;
  void set_flip(bool value);
  private:
  bool _internal_flip() const;
  void _internal_set_flip(bool value);
  public:

  // .protocol.PlayerAnimation animation = 5;
  void clear_animation();
  ::protocol::PlayerAnimation animation() const;
  void set_animation(::protocol::PlayerAnimation value);
  private:
  ::protocol::PlayerAnimation _internal_animation() const;
  void _internal_set_animation(::protocol::PlayerAnimation value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerPlayerMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  float x_;
  float y_;
  bool flip_;
  int animation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameClientChangeKeySetting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameClientChangeKeySetting) */ {
 public:
  inline GameClientChangeKeySetting() : GameClientChangeKeySetting(nullptr) {}
  ~GameClientChangeKeySetting() override;
  explicit constexpr GameClientChangeKeySetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientChangeKeySetting(const GameClientChangeKeySetting& from);
  GameClientChangeKeySetting(GameClientChangeKeySetting&& from) noexcept
    : GameClientChangeKeySetting() {
    *this = ::std::move(from);
  }

  inline GameClientChangeKeySetting& operator=(const GameClientChangeKeySetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientChangeKeySetting& operator=(GameClientChangeKeySetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientChangeKeySetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientChangeKeySetting* internal_default_instance() {
    return reinterpret_cast<const GameClientChangeKeySetting*>(
               &_GameClientChangeKeySetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameClientChangeKeySetting& a, GameClientChangeKeySetting& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientChangeKeySetting* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientChangeKeySetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientChangeKeySetting* New() const final {
    return new GameClientChangeKeySetting();
  }

  GameClientChangeKeySetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientChangeKeySetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientChangeKeySetting& from);
  void MergeFrom(const GameClientChangeKeySetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientChangeKeySetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameClientChangeKeySetting";
  }
  protected:
  explicit GameClientChangeKeySetting(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeySettingFieldNumber = 1,
  };
  // .protocol.KeySetting key_setting = 1;
  bool has_key_setting() const;
  private:
  bool _internal_has_key_setting() const;
  public:
  void clear_key_setting();
  const ::protocol::KeySetting& key_setting() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::protocol::KeySetting* release_key_setting();
  ::protocol::KeySetting* mutable_key_setting();
  void set_allocated_key_setting(::protocol::KeySetting* key_setting);
  private:
  const ::protocol::KeySetting& _internal_key_setting() const;
  ::protocol::KeySetting* _internal_mutable_key_setting();
  public:
  void unsafe_arena_set_allocated_key_setting(
      ::protocol::KeySetting* key_setting);
  ::protocol::KeySetting* unsafe_arena_release_key_setting();

  // @@protoc_insertion_point(class_scope:protocol.GameClientChangeKeySetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::KeySetting* key_setting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerMobMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerMobMove) */ {
 public:
  inline GameServerMobMove() : GameServerMobMove(nullptr) {}
  ~GameServerMobMove() override;
  explicit constexpr GameServerMobMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerMobMove(const GameServerMobMove& from);
  GameServerMobMove(GameServerMobMove&& from) noexcept
    : GameServerMobMove() {
    *this = ::std::move(from);
  }

  inline GameServerMobMove& operator=(const GameServerMobMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerMobMove& operator=(GameServerMobMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerMobMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerMobMove* internal_default_instance() {
    return reinterpret_cast<const GameServerMobMove*>(
               &_GameServerMobMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GameServerMobMove& a, GameServerMobMove& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerMobMove* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerMobMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerMobMove* New() const final {
    return new GameServerMobMove();
  }

  GameServerMobMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerMobMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerMobMove& from);
  void MergeFrom(const GameServerMobMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerMobMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerMobMove";
  }
  protected:
  explicit GameServerMobMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kFlipFieldNumber = 2,
    kStateFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kTargetIdFieldNumber = 6,
    kTargetXFieldNumber = 7,
    kTargetYFieldNumber = 8,
  };
  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool flip = 2;
  void clear_flip();
  bool flip() const;
  void set_flip(bool value);
  private:
  bool _internal_flip() const;
  void _internal_set_flip(bool value);
  public:

  // .protocol.MobActionType state = 3;
  void clear_state();
  ::protocol::MobActionType state() const;
  void set_state(::protocol::MobActionType value);
  private:
  ::protocol::MobActionType _internal_state() const;
  void _internal_set_state(::protocol::MobActionType value);
  public:

  // float x = 4;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 5;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional uint64 target_id = 6;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float target_x = 7;
  bool has_target_x() const;
  private:
  bool _internal_has_target_x() const;
  public:
  void clear_target_x();
  float target_x() const;
  void set_target_x(float value);
  private:
  float _internal_target_x() const;
  void _internal_set_target_x(float value);
  public:

  // optional float target_y = 8;
  bool has_target_y() const;
  private:
  bool _internal_has_target_y() const;
  public:
  void clear_target_y();
  float target_y() const;
  void set_target_y(float value);
  private:
  float _internal_target_y() const;
  void _internal_set_target_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerMobMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  bool flip_;
  int state_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_id_;
  float target_x_;
  float target_y_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerMobAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerMobAttack) */ {
 public:
  inline GameServerMobAttack() : GameServerMobAttack(nullptr) {}
  ~GameServerMobAttack() override;
  explicit constexpr GameServerMobAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerMobAttack(const GameServerMobAttack& from);
  GameServerMobAttack(GameServerMobAttack&& from) noexcept
    : GameServerMobAttack() {
    *this = ::std::move(from);
  }

  inline GameServerMobAttack& operator=(const GameServerMobAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerMobAttack& operator=(GameServerMobAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerMobAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerMobAttack* internal_default_instance() {
    return reinterpret_cast<const GameServerMobAttack*>(
               &_GameServerMobAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GameServerMobAttack& a, GameServerMobAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerMobAttack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerMobAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerMobAttack* New() const final {
    return new GameServerMobAttack();
  }

  GameServerMobAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerMobAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerMobAttack& from);
  void MergeFrom(const GameServerMobAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerMobAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerMobAttack";
  }
  protected:
  explicit GameServerMobAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kMobIdFieldNumber = 2,
  };
  // int64 target_id = 1;
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::int64 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 mob_id = 2;
  void clear_mob_id();
  ::PROTOBUF_NAMESPACE_ID::int64 mob_id() const;
  void set_mob_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mob_id() const;
  void _internal_set_mob_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerMobAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 mob_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerPlayerDamage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerPlayerDamage) */ {
 public:
  inline GameServerPlayerDamage() : GameServerPlayerDamage(nullptr) {}
  ~GameServerPlayerDamage() override;
  explicit constexpr GameServerPlayerDamage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerPlayerDamage(const GameServerPlayerDamage& from);
  GameServerPlayerDamage(GameServerPlayerDamage&& from) noexcept
    : GameServerPlayerDamage() {
    *this = ::std::move(from);
  }

  inline GameServerPlayerDamage& operator=(const GameServerPlayerDamage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerPlayerDamage& operator=(GameServerPlayerDamage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerPlayerDamage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerPlayerDamage* internal_default_instance() {
    return reinterpret_cast<const GameServerPlayerDamage*>(
               &_GameServerPlayerDamage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GameServerPlayerDamage& a, GameServerPlayerDamage& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerPlayerDamage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerPlayerDamage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerPlayerDamage* New() const final {
    return new GameServerPlayerDamage();
  }

  GameServerPlayerDamage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerPlayerDamage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerPlayerDamage& from);
  void MergeFrom(const GameServerPlayerDamage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerPlayerDamage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerPlayerDamage";
  }
  protected:
  explicit GameServerPlayerDamage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kDamageFieldNumber = 2,
  };
  // int64 target_id = 1;
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::int64 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 damage = 2;
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::int32 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_damage() const;
  void _internal_set_damage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerPlayerDamage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 damage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerMobDamage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerMobDamage) */ {
 public:
  inline GameServerMobDamage() : GameServerMobDamage(nullptr) {}
  ~GameServerMobDamage() override;
  explicit constexpr GameServerMobDamage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerMobDamage(const GameServerMobDamage& from);
  GameServerMobDamage(GameServerMobDamage&& from) noexcept
    : GameServerMobDamage() {
    *this = ::std::move(from);
  }

  inline GameServerMobDamage& operator=(const GameServerMobDamage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerMobDamage& operator=(GameServerMobDamage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerMobDamage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerMobDamage* internal_default_instance() {
    return reinterpret_cast<const GameServerMobDamage*>(
               &_GameServerMobDamage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GameServerMobDamage& a, GameServerMobDamage& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerMobDamage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerMobDamage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerMobDamage* New() const final {
    return new GameServerMobDamage();
  }

  GameServerMobDamage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerMobDamage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerMobDamage& from);
  void MergeFrom(const GameServerMobDamage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerMobDamage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerMobDamage";
  }
  protected:
  explicit GameServerMobDamage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kDamageFieldNumber = 2,
    kIsCriticalFieldNumber = 3,
  };
  // int64 target_id = 1;
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::int64 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 damage = 2;
  void clear_damage();
  ::PROTOBUF_NAMESPACE_ID::int32 damage() const;
  void set_damage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_damage() const;
  void _internal_set_damage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_critical = 3;
  void clear_is_critical();
  bool is_critical() const;
  void set_is_critical(bool value);
  private:
  bool _internal_is_critical() const;
  void _internal_set_is_critical(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerMobDamage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 damage_;
  bool is_critical_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameClientChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameClientChat) */ {
 public:
  inline GameClientChat() : GameClientChat(nullptr) {}
  ~GameClientChat() override;
  explicit constexpr GameClientChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientChat(const GameClientChat& from);
  GameClientChat(GameClientChat&& from) noexcept
    : GameClientChat() {
    *this = ::std::move(from);
  }

  inline GameClientChat& operator=(const GameClientChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientChat& operator=(GameClientChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientChat* internal_default_instance() {
    return reinterpret_cast<const GameClientChat*>(
               &_GameClientChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GameClientChat& a, GameClientChat& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientChat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientChat* New() const final {
    return new GameClientChat();
  }

  GameClientChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientChat& from);
  void MergeFrom(const GameClientChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameClientChat";
  }
  protected:
  explicit GameClientChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameClientChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerChat) */ {
 public:
  inline GameServerChat() : GameServerChat(nullptr) {}
  ~GameServerChat() override;
  explicit constexpr GameServerChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerChat(const GameServerChat& from);
  GameServerChat(GameServerChat&& from) noexcept
    : GameServerChat() {
    *this = ::std::move(from);
  }

  inline GameServerChat& operator=(const GameServerChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerChat& operator=(GameServerChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerChat* internal_default_instance() {
    return reinterpret_cast<const GameServerChat*>(
               &_GameServerChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GameServerChat& a, GameServerChat& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerChat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerChat* New() const final {
    return new GameServerChat();
  }

  GameServerChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerChat& from);
  void MergeFrom(const GameServerChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerChat";
  }
  protected:
  explicit GameServerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kSenderFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional int64 sender = 3;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  ::PROTOBUF_NAMESPACE_ID::int64 sender() const;
  void set_sender(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sender() const;
  void _internal_set_sender(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .protocol.ChatType type = 2;
  void clear_type();
  ::protocol::ChatType type() const;
  void set_type(::protocol::ChatType value);
  private:
  ::protocol::ChatType _internal_type() const;
  void _internal_set_type(::protocol::ChatType value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 sender_;
  int type_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerPlayerDead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerPlayerDead) */ {
 public:
  inline GameServerPlayerDead() : GameServerPlayerDead(nullptr) {}
  ~GameServerPlayerDead() override;
  explicit constexpr GameServerPlayerDead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerPlayerDead(const GameServerPlayerDead& from);
  GameServerPlayerDead(GameServerPlayerDead&& from) noexcept
    : GameServerPlayerDead() {
    *this = ::std::move(from);
  }

  inline GameServerPlayerDead& operator=(const GameServerPlayerDead& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerPlayerDead& operator=(GameServerPlayerDead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerPlayerDead& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerPlayerDead* internal_default_instance() {
    return reinterpret_cast<const GameServerPlayerDead*>(
               &_GameServerPlayerDead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GameServerPlayerDead& a, GameServerPlayerDead& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerPlayerDead* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerPlayerDead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerPlayerDead* New() const final {
    return new GameServerPlayerDead();
  }

  GameServerPlayerDead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerPlayerDead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerPlayerDead& from);
  void MergeFrom(const GameServerPlayerDead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerPlayerDead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerPlayerDead";
  }
  protected:
  explicit GameServerPlayerDead(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerPlayerDead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameClientRevive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameClientRevive) */ {
 public:
  inline GameClientRevive() : GameClientRevive(nullptr) {}
  ~GameClientRevive() override;
  explicit constexpr GameClientRevive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientRevive(const GameClientRevive& from);
  GameClientRevive(GameClientRevive&& from) noexcept
    : GameClientRevive() {
    *this = ::std::move(from);
  }

  inline GameClientRevive& operator=(const GameClientRevive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientRevive& operator=(GameClientRevive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientRevive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientRevive* internal_default_instance() {
    return reinterpret_cast<const GameClientRevive*>(
               &_GameClientRevive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GameClientRevive& a, GameClientRevive& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientRevive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientRevive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientRevive* New() const final {
    return new GameClientRevive();
  }

  GameClientRevive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientRevive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientRevive& from);
  void MergeFrom(const GameClientRevive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientRevive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameClientRevive";
  }
  protected:
  explicit GameClientRevive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.GameClientRevive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerRevive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerRevive) */ {
 public:
  inline GameServerRevive() : GameServerRevive(nullptr) {}
  ~GameServerRevive() override;
  explicit constexpr GameServerRevive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerRevive(const GameServerRevive& from);
  GameServerRevive(GameServerRevive&& from) noexcept
    : GameServerRevive() {
    *this = ::std::move(from);
  }

  inline GameServerRevive& operator=(const GameServerRevive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerRevive& operator=(GameServerRevive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerRevive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerRevive* internal_default_instance() {
    return reinterpret_cast<const GameServerRevive*>(
               &_GameServerRevive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GameServerRevive& a, GameServerRevive& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerRevive* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerRevive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerRevive* New() const final {
    return new GameServerRevive();
  }

  GameServerRevive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerRevive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerRevive& from);
  void MergeFrom(const GameServerRevive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerRevive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerRevive";
  }
  protected:
  explicit GameServerRevive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerRevive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerTeleportPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerTeleportPlayer) */ {
 public:
  inline GameServerTeleportPlayer() : GameServerTeleportPlayer(nullptr) {}
  ~GameServerTeleportPlayer() override;
  explicit constexpr GameServerTeleportPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerTeleportPlayer(const GameServerTeleportPlayer& from);
  GameServerTeleportPlayer(GameServerTeleportPlayer&& from) noexcept
    : GameServerTeleportPlayer() {
    *this = ::std::move(from);
  }

  inline GameServerTeleportPlayer& operator=(const GameServerTeleportPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerTeleportPlayer& operator=(GameServerTeleportPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerTeleportPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerTeleportPlayer* internal_default_instance() {
    return reinterpret_cast<const GameServerTeleportPlayer*>(
               &_GameServerTeleportPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GameServerTeleportPlayer& a, GameServerTeleportPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerTeleportPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerTeleportPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerTeleportPlayer* New() const final {
    return new GameServerTeleportPlayer();
  }

  GameServerTeleportPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerTeleportPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerTeleportPlayer& from);
  void MergeFrom(const GameServerTeleportPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerTeleportPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerTeleportPlayer";
  }
  protected:
  explicit GameServerTeleportPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerTeleportPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerUpdatePlayerStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerUpdatePlayerStat) */ {
 public:
  inline GameServerUpdatePlayerStat() : GameServerUpdatePlayerStat(nullptr) {}
  ~GameServerUpdatePlayerStat() override;
  explicit constexpr GameServerUpdatePlayerStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerUpdatePlayerStat(const GameServerUpdatePlayerStat& from);
  GameServerUpdatePlayerStat(GameServerUpdatePlayerStat&& from) noexcept
    : GameServerUpdatePlayerStat() {
    *this = ::std::move(from);
  }

  inline GameServerUpdatePlayerStat& operator=(const GameServerUpdatePlayerStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerUpdatePlayerStat& operator=(GameServerUpdatePlayerStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerUpdatePlayerStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerUpdatePlayerStat* internal_default_instance() {
    return reinterpret_cast<const GameServerUpdatePlayerStat*>(
               &_GameServerUpdatePlayerStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GameServerUpdatePlayerStat& a, GameServerUpdatePlayerStat& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerUpdatePlayerStat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerUpdatePlayerStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerUpdatePlayerStat* New() const final {
    return new GameServerUpdatePlayerStat();
  }

  GameServerUpdatePlayerStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerUpdatePlayerStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerUpdatePlayerStat& from);
  void MergeFrom(const GameServerUpdatePlayerStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerUpdatePlayerStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerUpdatePlayerStat";
  }
  protected:
  explicit GameServerUpdatePlayerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kExpFieldNumber = 2,
    kHpFieldNumber = 3,
    kMpFieldNumber = 4,
    kMaxHpFieldNumber = 5,
    kMaxMpFieldNumber = 6,
    kStrFieldNumber = 7,
    kDexFieldNumber = 8,
    kLukFieldNumber = 9,
    kIntFieldNumber = 10,
    kApFieldNumber = 11,
    kSpFieldNumber = 12,
  };
  // optional int32 level = 1;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 exp = 2;
  bool has_exp() const;
  private:
  bool _internal_has_exp() const;
  public:
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 hp = 3;
  bool has_hp() const;
  private:
  bool _internal_has_hp() const;
  public:
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mp = 4;
  bool has_mp() const;
  private:
  bool _internal_has_mp() const;
  public:
  void clear_mp();
  ::PROTOBUF_NAMESPACE_ID::int32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mp() const;
  void _internal_set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_hp = 5;
  bool has_max_hp() const;
  private:
  bool _internal_has_max_hp() const;
  public:
  void clear_max_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp() const;
  void set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_hp() const;
  void _internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_mp = 6;
  bool has_max_mp() const;
  private:
  bool _internal_has_max_mp() const;
  public:
  void clear_max_mp();
  ::PROTOBUF_NAMESPACE_ID::int32 max_mp() const;
  void set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_mp() const;
  void _internal_set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 str = 7;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  ::PROTOBUF_NAMESPACE_ID::int32 str() const;
  void set_str(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_str() const;
  void _internal_set_str(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dex = 8;
  bool has_dex() const;
  private:
  bool _internal_has_dex() const;
  public:
  void clear_dex();
  ::PROTOBUF_NAMESPACE_ID::int32 dex() const;
  void set_dex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dex() const;
  void _internal_set_dex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 luk = 9;
  bool has_luk() const;
  private:
  bool _internal_has_luk() const;
  public:
  void clear_luk();
  ::PROTOBUF_NAMESPACE_ID::int32 luk() const;
  void set_luk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_luk() const;
  void _internal_set_luk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 int = 10;
  bool has_int_() const;
  private:
  bool _internal_has_int_() const;
  public:
  void clear_int_();
  ::PROTOBUF_NAMESPACE_ID::int32 int_() const;
  void set_int_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_() const;
  void _internal_set_int_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ap = 11;
  bool has_ap() const;
  private:
  bool _internal_has_ap() const;
  public:
  void clear_ap();
  ::PROTOBUF_NAMESPACE_ID::int32 ap() const;
  void set_ap(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ap() const;
  void _internal_set_ap(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 sp = 12;
  bool has_sp() const;
  private:
  bool _internal_has_sp() const;
  public:
  void clear_sp();
  ::PROTOBUF_NAMESPACE_ID::int32 sp() const;
  void set_sp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sp() const;
  void _internal_set_sp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerUpdatePlayerStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 str_;
  ::PROTOBUF_NAMESPACE_ID::int32 dex_;
  ::PROTOBUF_NAMESPACE_ID::int32 luk_;
  ::PROTOBUF_NAMESPACE_ID::int32 int__;
  ::PROTOBUF_NAMESPACE_ID::int32 ap_;
  ::PROTOBUF_NAMESPACE_ID::int32 sp_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameClientEnter

// uint32 character_id = 1;
inline void GameClientEnter::clear_character_id() {
  character_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameClientEnter::_internal_character_id() const {
  return character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameClientEnter::character_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientEnter.character_id)
  return _internal_character_id();
}
inline void GameClientEnter::_internal_set_character_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_id_ = value;
}
inline void GameClientEnter::set_character_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientEnter.character_id)
}

// int32 auth_key = 2;
inline void GameClientEnter::clear_auth_key() {
  auth_key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientEnter::_internal_auth_key() const {
  return auth_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientEnter::auth_key() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientEnter.auth_key)
  return _internal_auth_key();
}
inline void GameClientEnter::_internal_set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auth_key_ = value;
}
inline void GameClientEnter::set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auth_key(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientEnter.auth_key)
}

// -------------------------------------------------------------------

// GameServerEnter

// bool success = 1;
inline void GameServerEnter::clear_success() {
  success_ = false;
}
inline bool GameServerEnter::_internal_success() const {
  return success_;
}
inline bool GameServerEnter::success() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerEnter.success)
  return _internal_success();
}
inline void GameServerEnter::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GameServerEnter::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerEnter.success)
}

// optional .protocol.PlayerInfo player_info = 2;
inline bool GameServerEnter::_internal_has_player_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || player_info_ != nullptr);
  return value;
}
inline bool GameServerEnter::has_player_info() const {
  return _internal_has_player_info();
}
inline const ::protocol::PlayerInfo& GameServerEnter::_internal_player_info() const {
  const ::protocol::PlayerInfo* p = player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::PlayerInfo&>(
      ::protocol::_PlayerInfo_default_instance_);
}
inline const ::protocol::PlayerInfo& GameServerEnter::player_info() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerEnter.player_info)
  return _internal_player_info();
}
inline void GameServerEnter::unsafe_arena_set_allocated_player_info(
    ::protocol::PlayerInfo* player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info_);
  }
  player_info_ = player_info;
  if (player_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.GameServerEnter.player_info)
}
inline ::protocol::PlayerInfo* GameServerEnter::release_player_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::PlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::PlayerInfo* GameServerEnter::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:protocol.GameServerEnter.player_info)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::PlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  return temp;
}
inline ::protocol::PlayerInfo* GameServerEnter::_internal_mutable_player_info() {
  _has_bits_[0] |= 0x00000001u;
  if (player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::PlayerInfo>(GetArenaForAllocation());
    player_info_ = p;
  }
  return player_info_;
}
inline ::protocol::PlayerInfo* GameServerEnter::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable:protocol.GameServerEnter.player_info)
  return _internal_mutable_player_info();
}
inline void GameServerEnter::set_allocated_player_info(::protocol::PlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info_);
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info));
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:protocol.GameServerEnter.player_info)
}

// optional int32 map_id = 3;
inline bool GameServerEnter::_internal_has_map_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameServerEnter::has_map_id() const {
  return _internal_has_map_id();
}
inline void GameServerEnter::clear_map_id() {
  map_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerEnter::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerEnter::map_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerEnter.map_id)
  return _internal_map_id();
}
inline void GameServerEnter::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  map_id_ = value;
}
inline void GameServerEnter::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerEnter.map_id)
}

// -------------------------------------------------------------------

// GameServerAddPlayer

// repeated .protocol.OtherPlayerInfo player_infos = 1;
inline int GameServerAddPlayer::_internal_player_infos_size() const {
  return player_infos_.size();
}
inline int GameServerAddPlayer::player_infos_size() const {
  return _internal_player_infos_size();
}
inline ::protocol::OtherPlayerInfo* GameServerAddPlayer::mutable_player_infos(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.GameServerAddPlayer.player_infos)
  return player_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OtherPlayerInfo >*
GameServerAddPlayer::mutable_player_infos() {
  // @@protoc_insertion_point(field_mutable_list:protocol.GameServerAddPlayer.player_infos)
  return &player_infos_;
}
inline const ::protocol::OtherPlayerInfo& GameServerAddPlayer::_internal_player_infos(int index) const {
  return player_infos_.Get(index);
}
inline const ::protocol::OtherPlayerInfo& GameServerAddPlayer::player_infos(int index) const {
  // @@protoc_insertion_point(field_get:protocol.GameServerAddPlayer.player_infos)
  return _internal_player_infos(index);
}
inline ::protocol::OtherPlayerInfo* GameServerAddPlayer::_internal_add_player_infos() {
  return player_infos_.Add();
}
inline ::protocol::OtherPlayerInfo* GameServerAddPlayer::add_player_infos() {
  // @@protoc_insertion_point(field_add:protocol.GameServerAddPlayer.player_infos)
  return _internal_add_player_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OtherPlayerInfo >&
GameServerAddPlayer::player_infos() const {
  // @@protoc_insertion_point(field_list:protocol.GameServerAddPlayer.player_infos)
  return player_infos_;
}

// -------------------------------------------------------------------

// GameServerAddMonster

// repeated .protocol.MobInfo mob_infos = 1;
inline int GameServerAddMonster::_internal_mob_infos_size() const {
  return mob_infos_.size();
}
inline int GameServerAddMonster::mob_infos_size() const {
  return _internal_mob_infos_size();
}
inline ::protocol::MobInfo* GameServerAddMonster::mutable_mob_infos(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.GameServerAddMonster.mob_infos)
  return mob_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::MobInfo >*
GameServerAddMonster::mutable_mob_infos() {
  // @@protoc_insertion_point(field_mutable_list:protocol.GameServerAddMonster.mob_infos)
  return &mob_infos_;
}
inline const ::protocol::MobInfo& GameServerAddMonster::_internal_mob_infos(int index) const {
  return mob_infos_.Get(index);
}
inline const ::protocol::MobInfo& GameServerAddMonster::mob_infos(int index) const {
  // @@protoc_insertion_point(field_get:protocol.GameServerAddMonster.mob_infos)
  return _internal_mob_infos(index);
}
inline ::protocol::MobInfo* GameServerAddMonster::_internal_add_mob_infos() {
  return mob_infos_.Add();
}
inline ::protocol::MobInfo* GameServerAddMonster::add_mob_infos() {
  // @@protoc_insertion_point(field_add:protocol.GameServerAddMonster.mob_infos)
  return _internal_add_mob_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::MobInfo >&
GameServerAddMonster::mob_infos() const {
  // @@protoc_insertion_point(field_list:protocol.GameServerAddMonster.mob_infos)
  return mob_infos_;
}

// -------------------------------------------------------------------

// GameServerRemoveObject

// int64 object_id = 1;
inline void GameServerRemoveObject::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerRemoveObject::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerRemoveObject::object_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerRemoveObject.object_id)
  return _internal_object_id();
}
inline void GameServerRemoveObject::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void GameServerRemoveObject::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerRemoveObject.object_id)
}

// -------------------------------------------------------------------

// GameServerChangeMap

// int32 map_id = 1;
inline void GameServerChangeMap::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerChangeMap::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerChangeMap::map_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerChangeMap.map_id)
  return _internal_map_id();
}
inline void GameServerChangeMap::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void GameServerChangeMap::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerChangeMap.map_id)
}

// -------------------------------------------------------------------

// GameClientPlayerMove

// float x = 1;
inline void GameClientPlayerMove::clear_x() {
  x_ = 0;
}
inline float GameClientPlayerMove::_internal_x() const {
  return x_;
}
inline float GameClientPlayerMove::x() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientPlayerMove.x)
  return _internal_x();
}
inline void GameClientPlayerMove::_internal_set_x(float value) {
  
  x_ = value;
}
inline void GameClientPlayerMove::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientPlayerMove.x)
}

// float y = 2;
inline void GameClientPlayerMove::clear_y() {
  y_ = 0;
}
inline float GameClientPlayerMove::_internal_y() const {
  return y_;
}
inline float GameClientPlayerMove::y() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientPlayerMove.y)
  return _internal_y();
}
inline void GameClientPlayerMove::_internal_set_y(float value) {
  
  y_ = value;
}
inline void GameClientPlayerMove::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientPlayerMove.y)
}

// bool flip = 3;
inline void GameClientPlayerMove::clear_flip() {
  flip_ = false;
}
inline bool GameClientPlayerMove::_internal_flip() const {
  return flip_;
}
inline bool GameClientPlayerMove::flip() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientPlayerMove.flip)
  return _internal_flip();
}
inline void GameClientPlayerMove::_internal_set_flip(bool value) {
  
  flip_ = value;
}
inline void GameClientPlayerMove::set_flip(bool value) {
  _internal_set_flip(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientPlayerMove.flip)
}

// .protocol.PlayerAnimation animation = 4;
inline void GameClientPlayerMove::clear_animation() {
  animation_ = 0;
}
inline ::protocol::PlayerAnimation GameClientPlayerMove::_internal_animation() const {
  return static_cast< ::protocol::PlayerAnimation >(animation_);
}
inline ::protocol::PlayerAnimation GameClientPlayerMove::animation() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientPlayerMove.animation)
  return _internal_animation();
}
inline void GameClientPlayerMove::_internal_set_animation(::protocol::PlayerAnimation value) {
  
  animation_ = value;
}
inline void GameClientPlayerMove::set_animation(::protocol::PlayerAnimation value) {
  _internal_set_animation(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientPlayerMove.animation)
}

// -------------------------------------------------------------------

// GameServerPlayerMove

// int64 object_id = 1;
inline void GameServerPlayerMove::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerPlayerMove::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerPlayerMove::object_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerPlayerMove.object_id)
  return _internal_object_id();
}
inline void GameServerPlayerMove::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void GameServerPlayerMove::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerPlayerMove.object_id)
}

// float x = 2;
inline void GameServerPlayerMove::clear_x() {
  x_ = 0;
}
inline float GameServerPlayerMove::_internal_x() const {
  return x_;
}
inline float GameServerPlayerMove::x() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerPlayerMove.x)
  return _internal_x();
}
inline void GameServerPlayerMove::_internal_set_x(float value) {
  
  x_ = value;
}
inline void GameServerPlayerMove::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerPlayerMove.x)
}

// float y = 3;
inline void GameServerPlayerMove::clear_y() {
  y_ = 0;
}
inline float GameServerPlayerMove::_internal_y() const {
  return y_;
}
inline float GameServerPlayerMove::y() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerPlayerMove.y)
  return _internal_y();
}
inline void GameServerPlayerMove::_internal_set_y(float value) {
  
  y_ = value;
}
inline void GameServerPlayerMove::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerPlayerMove.y)
}

// bool flip = 4;
inline void GameServerPlayerMove::clear_flip() {
  flip_ = false;
}
inline bool GameServerPlayerMove::_internal_flip() const {
  return flip_;
}
inline bool GameServerPlayerMove::flip() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerPlayerMove.flip)
  return _internal_flip();
}
inline void GameServerPlayerMove::_internal_set_flip(bool value) {
  
  flip_ = value;
}
inline void GameServerPlayerMove::set_flip(bool value) {
  _internal_set_flip(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerPlayerMove.flip)
}

// .protocol.PlayerAnimation animation = 5;
inline void GameServerPlayerMove::clear_animation() {
  animation_ = 0;
}
inline ::protocol::PlayerAnimation GameServerPlayerMove::_internal_animation() const {
  return static_cast< ::protocol::PlayerAnimation >(animation_);
}
inline ::protocol::PlayerAnimation GameServerPlayerMove::animation() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerPlayerMove.animation)
  return _internal_animation();
}
inline void GameServerPlayerMove::_internal_set_animation(::protocol::PlayerAnimation value) {
  
  animation_ = value;
}
inline void GameServerPlayerMove::set_animation(::protocol::PlayerAnimation value) {
  _internal_set_animation(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerPlayerMove.animation)
}

// -------------------------------------------------------------------

// GameClientChangeKeySetting

// .protocol.KeySetting key_setting = 1;
inline bool GameClientChangeKeySetting::_internal_has_key_setting() const {
  return this != internal_default_instance() && key_setting_ != nullptr;
}
inline bool GameClientChangeKeySetting::has_key_setting() const {
  return _internal_has_key_setting();
}
inline const ::protocol::KeySetting& GameClientChangeKeySetting::_internal_key_setting() const {
  const ::protocol::KeySetting* p = key_setting_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::KeySetting&>(
      ::protocol::_KeySetting_default_instance_);
}
inline const ::protocol::KeySetting& GameClientChangeKeySetting::key_setting() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientChangeKeySetting.key_setting)
  return _internal_key_setting();
}
inline void GameClientChangeKeySetting::unsafe_arena_set_allocated_key_setting(
    ::protocol::KeySetting* key_setting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_setting_);
  }
  key_setting_ = key_setting;
  if (key_setting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.GameClientChangeKeySetting.key_setting)
}
inline ::protocol::KeySetting* GameClientChangeKeySetting::release_key_setting() {
  
  ::protocol::KeySetting* temp = key_setting_;
  key_setting_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::KeySetting* GameClientChangeKeySetting::unsafe_arena_release_key_setting() {
  // @@protoc_insertion_point(field_release:protocol.GameClientChangeKeySetting.key_setting)
  
  ::protocol::KeySetting* temp = key_setting_;
  key_setting_ = nullptr;
  return temp;
}
inline ::protocol::KeySetting* GameClientChangeKeySetting::_internal_mutable_key_setting() {
  
  if (key_setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::KeySetting>(GetArenaForAllocation());
    key_setting_ = p;
  }
  return key_setting_;
}
inline ::protocol::KeySetting* GameClientChangeKeySetting::mutable_key_setting() {
  // @@protoc_insertion_point(field_mutable:protocol.GameClientChangeKeySetting.key_setting)
  return _internal_mutable_key_setting();
}
inline void GameClientChangeKeySetting::set_allocated_key_setting(::protocol::KeySetting* key_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_setting_);
  }
  if (key_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_setting));
    if (message_arena != submessage_arena) {
      key_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_setting, submessage_arena);
    }
    
  } else {
    
  }
  key_setting_ = key_setting;
  // @@protoc_insertion_point(field_set_allocated:protocol.GameClientChangeKeySetting.key_setting)
}

// -------------------------------------------------------------------

// GameServerMobMove

// int64 object_id = 1;
inline void GameServerMobMove::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMobMove::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMobMove::object_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobMove.object_id)
  return _internal_object_id();
}
inline void GameServerMobMove::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void GameServerMobMove::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobMove.object_id)
}

// bool flip = 2;
inline void GameServerMobMove::clear_flip() {
  flip_ = false;
}
inline bool GameServerMobMove::_internal_flip() const {
  return flip_;
}
inline bool GameServerMobMove::flip() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobMove.flip)
  return _internal_flip();
}
inline void GameServerMobMove::_internal_set_flip(bool value) {
  
  flip_ = value;
}
inline void GameServerMobMove::set_flip(bool value) {
  _internal_set_flip(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobMove.flip)
}

// .protocol.MobActionType state = 3;
inline void GameServerMobMove::clear_state() {
  state_ = 0;
}
inline ::protocol::MobActionType GameServerMobMove::_internal_state() const {
  return static_cast< ::protocol::MobActionType >(state_);
}
inline ::protocol::MobActionType GameServerMobMove::state() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobMove.state)
  return _internal_state();
}
inline void GameServerMobMove::_internal_set_state(::protocol::MobActionType value) {
  
  state_ = value;
}
inline void GameServerMobMove::set_state(::protocol::MobActionType value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobMove.state)
}

// float x = 4;
inline void GameServerMobMove::clear_x() {
  x_ = 0;
}
inline float GameServerMobMove::_internal_x() const {
  return x_;
}
inline float GameServerMobMove::x() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobMove.x)
  return _internal_x();
}
inline void GameServerMobMove::_internal_set_x(float value) {
  
  x_ = value;
}
inline void GameServerMobMove::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobMove.x)
}

// float y = 5;
inline void GameServerMobMove::clear_y() {
  y_ = 0;
}
inline float GameServerMobMove::_internal_y() const {
  return y_;
}
inline float GameServerMobMove::y() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobMove.y)
  return _internal_y();
}
inline void GameServerMobMove::_internal_set_y(float value) {
  
  y_ = value;
}
inline void GameServerMobMove::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobMove.y)
}

// optional uint64 target_id = 6;
inline bool GameServerMobMove::_internal_has_target_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameServerMobMove::has_target_id() const {
  return _internal_has_target_id();
}
inline void GameServerMobMove::clear_target_id() {
  target_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameServerMobMove::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GameServerMobMove::target_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobMove.target_id)
  return _internal_target_id();
}
inline void GameServerMobMove::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  target_id_ = value;
}
inline void GameServerMobMove::set_target_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobMove.target_id)
}

// optional float target_x = 7;
inline bool GameServerMobMove::_internal_has_target_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameServerMobMove::has_target_x() const {
  return _internal_has_target_x();
}
inline void GameServerMobMove::clear_target_x() {
  target_x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float GameServerMobMove::_internal_target_x() const {
  return target_x_;
}
inline float GameServerMobMove::target_x() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobMove.target_x)
  return _internal_target_x();
}
inline void GameServerMobMove::_internal_set_target_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  target_x_ = value;
}
inline void GameServerMobMove::set_target_x(float value) {
  _internal_set_target_x(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobMove.target_x)
}

// optional float target_y = 8;
inline bool GameServerMobMove::_internal_has_target_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameServerMobMove::has_target_y() const {
  return _internal_has_target_y();
}
inline void GameServerMobMove::clear_target_y() {
  target_y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float GameServerMobMove::_internal_target_y() const {
  return target_y_;
}
inline float GameServerMobMove::target_y() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobMove.target_y)
  return _internal_target_y();
}
inline void GameServerMobMove::_internal_set_target_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  target_y_ = value;
}
inline void GameServerMobMove::set_target_y(float value) {
  _internal_set_target_y(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobMove.target_y)
}

// -------------------------------------------------------------------

// GameServerMobAttack

// int64 target_id = 1;
inline void GameServerMobAttack::clear_target_id() {
  target_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMobAttack::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMobAttack::target_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobAttack.target_id)
  return _internal_target_id();
}
inline void GameServerMobAttack::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_id_ = value;
}
inline void GameServerMobAttack::set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobAttack.target_id)
}

// int64 mob_id = 2;
inline void GameServerMobAttack::clear_mob_id() {
  mob_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMobAttack::_internal_mob_id() const {
  return mob_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMobAttack::mob_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobAttack.mob_id)
  return _internal_mob_id();
}
inline void GameServerMobAttack::_internal_set_mob_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mob_id_ = value;
}
inline void GameServerMobAttack::set_mob_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mob_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobAttack.mob_id)
}

// -------------------------------------------------------------------

// GameServerPlayerDamage

// int64 target_id = 1;
inline void GameServerPlayerDamage::clear_target_id() {
  target_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerPlayerDamage::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerPlayerDamage::target_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerPlayerDamage.target_id)
  return _internal_target_id();
}
inline void GameServerPlayerDamage::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_id_ = value;
}
inline void GameServerPlayerDamage::set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerPlayerDamage.target_id)
}

// int32 damage = 2;
inline void GameServerPlayerDamage::clear_damage() {
  damage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerPlayerDamage::_internal_damage() const {
  return damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerPlayerDamage::damage() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerPlayerDamage.damage)
  return _internal_damage();
}
inline void GameServerPlayerDamage::_internal_set_damage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  damage_ = value;
}
inline void GameServerPlayerDamage::set_damage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerPlayerDamage.damage)
}

// -------------------------------------------------------------------

// GameServerMobDamage

// int64 target_id = 1;
inline void GameServerMobDamage::clear_target_id() {
  target_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMobDamage::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMobDamage::target_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobDamage.target_id)
  return _internal_target_id();
}
inline void GameServerMobDamage::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_id_ = value;
}
inline void GameServerMobDamage::set_target_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobDamage.target_id)
}

// int32 damage = 2;
inline void GameServerMobDamage::clear_damage() {
  damage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerMobDamage::_internal_damage() const {
  return damage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerMobDamage::damage() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobDamage.damage)
  return _internal_damage();
}
inline void GameServerMobDamage::_internal_set_damage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  damage_ = value;
}
inline void GameServerMobDamage::set_damage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobDamage.damage)
}

// bool is_critical = 3;
inline void GameServerMobDamage::clear_is_critical() {
  is_critical_ = false;
}
inline bool GameServerMobDamage::_internal_is_critical() const {
  return is_critical_;
}
inline bool GameServerMobDamage::is_critical() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerMobDamage.is_critical)
  return _internal_is_critical();
}
inline void GameServerMobDamage::_internal_set_is_critical(bool value) {
  
  is_critical_ = value;
}
inline void GameServerMobDamage::set_is_critical(bool value) {
  _internal_set_is_critical(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerMobDamage.is_critical)
}

// -------------------------------------------------------------------

// GameClientChat

// string message = 1;
inline void GameClientChat::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GameClientChat::message() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientChat.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameClientChat::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.GameClientChat.message)
}
inline std::string* GameClientChat::mutable_message() {
  // @@protoc_insertion_point(field_mutable:protocol.GameClientChat.message)
  return _internal_mutable_message();
}
inline const std::string& GameClientChat::_internal_message() const {
  return message_.Get();
}
inline void GameClientChat::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameClientChat::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameClientChat::release_message() {
  // @@protoc_insertion_point(field_release:protocol.GameClientChat.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameClientChat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.GameClientChat.message)
}

// -------------------------------------------------------------------

// GameServerChat

// string message = 1;
inline void GameServerChat::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GameServerChat::message() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerChat.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameServerChat::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.GameServerChat.message)
}
inline std::string* GameServerChat::mutable_message() {
  // @@protoc_insertion_point(field_mutable:protocol.GameServerChat.message)
  return _internal_mutable_message();
}
inline const std::string& GameServerChat::_internal_message() const {
  return message_.Get();
}
inline void GameServerChat::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameServerChat::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameServerChat::release_message() {
  // @@protoc_insertion_point(field_release:protocol.GameServerChat.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameServerChat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.GameServerChat.message)
}

// .protocol.ChatType type = 2;
inline void GameServerChat::clear_type() {
  type_ = 0;
}
inline ::protocol::ChatType GameServerChat::_internal_type() const {
  return static_cast< ::protocol::ChatType >(type_);
}
inline ::protocol::ChatType GameServerChat::type() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerChat.type)
  return _internal_type();
}
inline void GameServerChat::_internal_set_type(::protocol::ChatType value) {
  
  type_ = value;
}
inline void GameServerChat::set_type(::protocol::ChatType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerChat.type)
}

// optional int64 sender = 3;
inline bool GameServerChat::_internal_has_sender() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameServerChat::has_sender() const {
  return _internal_has_sender();
}
inline void GameServerChat::clear_sender() {
  sender_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerChat::_internal_sender() const {
  return sender_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerChat::sender() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerChat.sender)
  return _internal_sender();
}
inline void GameServerChat::_internal_set_sender(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  sender_ = value;
}
inline void GameServerChat::set_sender(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sender(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerChat.sender)
}

// -------------------------------------------------------------------

// GameServerPlayerDead

// int64 object_id = 1;
inline void GameServerPlayerDead::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerPlayerDead::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerPlayerDead::object_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerPlayerDead.object_id)
  return _internal_object_id();
}
inline void GameServerPlayerDead::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void GameServerPlayerDead::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerPlayerDead.object_id)
}

// -------------------------------------------------------------------

// GameClientRevive

// -------------------------------------------------------------------

// GameServerRevive

// int64 object_id = 1;
inline void GameServerRevive::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerRevive::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerRevive::object_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerRevive.object_id)
  return _internal_object_id();
}
inline void GameServerRevive::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void GameServerRevive::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerRevive.object_id)
}

// -------------------------------------------------------------------

// GameServerTeleportPlayer

// int64 object_id = 1;
inline void GameServerTeleportPlayer::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerTeleportPlayer::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerTeleportPlayer::object_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerTeleportPlayer.object_id)
  return _internal_object_id();
}
inline void GameServerTeleportPlayer::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void GameServerTeleportPlayer::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerTeleportPlayer.object_id)
}

// float x = 2;
inline void GameServerTeleportPlayer::clear_x() {
  x_ = 0;
}
inline float GameServerTeleportPlayer::_internal_x() const {
  return x_;
}
inline float GameServerTeleportPlayer::x() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerTeleportPlayer.x)
  return _internal_x();
}
inline void GameServerTeleportPlayer::_internal_set_x(float value) {
  
  x_ = value;
}
inline void GameServerTeleportPlayer::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerTeleportPlayer.x)
}

// float y = 3;
inline void GameServerTeleportPlayer::clear_y() {
  y_ = 0;
}
inline float GameServerTeleportPlayer::_internal_y() const {
  return y_;
}
inline float GameServerTeleportPlayer::y() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerTeleportPlayer.y)
  return _internal_y();
}
inline void GameServerTeleportPlayer::_internal_set_y(float value) {
  
  y_ = value;
}
inline void GameServerTeleportPlayer::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerTeleportPlayer.y)
}

// -------------------------------------------------------------------

// GameServerUpdatePlayerStat

// optional int32 level = 1;
inline bool GameServerUpdatePlayerStat::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_level() const {
  return _internal_has_level();
}
inline void GameServerUpdatePlayerStat::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::level() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.level)
  return _internal_level();
}
inline void GameServerUpdatePlayerStat::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  level_ = value;
}
inline void GameServerUpdatePlayerStat::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.level)
}

// optional int32 exp = 2;
inline bool GameServerUpdatePlayerStat::_internal_has_exp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_exp() const {
  return _internal_has_exp();
}
inline void GameServerUpdatePlayerStat::clear_exp() {
  exp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::exp() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.exp)
  return _internal_exp();
}
inline void GameServerUpdatePlayerStat::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  exp_ = value;
}
inline void GameServerUpdatePlayerStat::set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.exp)
}

// optional int32 hp = 3;
inline bool GameServerUpdatePlayerStat::_internal_has_hp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_hp() const {
  return _internal_has_hp();
}
inline void GameServerUpdatePlayerStat::clear_hp() {
  hp_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::hp() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.hp)
  return _internal_hp();
}
inline void GameServerUpdatePlayerStat::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  hp_ = value;
}
inline void GameServerUpdatePlayerStat::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.hp)
}

// optional int32 mp = 4;
inline bool GameServerUpdatePlayerStat::_internal_has_mp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_mp() const {
  return _internal_has_mp();
}
inline void GameServerUpdatePlayerStat::clear_mp() {
  mp_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_mp() const {
  return mp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::mp() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.mp)
  return _internal_mp();
}
inline void GameServerUpdatePlayerStat::_internal_set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mp_ = value;
}
inline void GameServerUpdatePlayerStat::set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.mp)
}

// optional int32 max_hp = 5;
inline bool GameServerUpdatePlayerStat::_internal_has_max_hp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_max_hp() const {
  return _internal_has_max_hp();
}
inline void GameServerUpdatePlayerStat::clear_max_hp() {
  max_hp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_max_hp() const {
  return max_hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::max_hp() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.max_hp)
  return _internal_max_hp();
}
inline void GameServerUpdatePlayerStat::_internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_hp_ = value;
}
inline void GameServerUpdatePlayerStat::set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.max_hp)
}

// optional int32 max_mp = 6;
inline bool GameServerUpdatePlayerStat::_internal_has_max_mp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_max_mp() const {
  return _internal_has_max_mp();
}
inline void GameServerUpdatePlayerStat::clear_max_mp() {
  max_mp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_max_mp() const {
  return max_mp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::max_mp() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.max_mp)
  return _internal_max_mp();
}
inline void GameServerUpdatePlayerStat::_internal_set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_mp_ = value;
}
inline void GameServerUpdatePlayerStat::set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_mp(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.max_mp)
}

// optional int32 str = 7;
inline bool GameServerUpdatePlayerStat::_internal_has_str() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_str() const {
  return _internal_has_str();
}
inline void GameServerUpdatePlayerStat::clear_str() {
  str_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_str() const {
  return str_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::str() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.str)
  return _internal_str();
}
inline void GameServerUpdatePlayerStat::_internal_set_str(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  str_ = value;
}
inline void GameServerUpdatePlayerStat::set_str(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.str)
}

// optional int32 dex = 8;
inline bool GameServerUpdatePlayerStat::_internal_has_dex() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_dex() const {
  return _internal_has_dex();
}
inline void GameServerUpdatePlayerStat::clear_dex() {
  dex_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_dex() const {
  return dex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::dex() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.dex)
  return _internal_dex();
}
inline void GameServerUpdatePlayerStat::_internal_set_dex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  dex_ = value;
}
inline void GameServerUpdatePlayerStat::set_dex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dex(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.dex)
}

// optional int32 luk = 9;
inline bool GameServerUpdatePlayerStat::_internal_has_luk() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_luk() const {
  return _internal_has_luk();
}
inline void GameServerUpdatePlayerStat::clear_luk() {
  luk_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_luk() const {
  return luk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::luk() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.luk)
  return _internal_luk();
}
inline void GameServerUpdatePlayerStat::_internal_set_luk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  luk_ = value;
}
inline void GameServerUpdatePlayerStat::set_luk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_luk(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.luk)
}

// optional int32 int = 10;
inline bool GameServerUpdatePlayerStat::_internal_has_int_() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_int_() const {
  return _internal_has_int_();
}
inline void GameServerUpdatePlayerStat::clear_int_() {
  int__ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_int_() const {
  return int__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::int_() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.int)
  return _internal_int_();
}
inline void GameServerUpdatePlayerStat::_internal_set_int_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  int__ = value;
}
inline void GameServerUpdatePlayerStat::set_int_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.int)
}

// optional int32 ap = 11;
inline bool GameServerUpdatePlayerStat::_internal_has_ap() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_ap() const {
  return _internal_has_ap();
}
inline void GameServerUpdatePlayerStat::clear_ap() {
  ap_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_ap() const {
  return ap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::ap() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.ap)
  return _internal_ap();
}
inline void GameServerUpdatePlayerStat::_internal_set_ap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  ap_ = value;
}
inline void GameServerUpdatePlayerStat::set_ap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ap(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.ap)
}

// optional int32 sp = 12;
inline bool GameServerUpdatePlayerStat::_internal_has_sp() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GameServerUpdatePlayerStat::has_sp() const {
  return _internal_has_sp();
}
inline void GameServerUpdatePlayerStat::clear_sp() {
  sp_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::_internal_sp() const {
  return sp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerUpdatePlayerStat::sp() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerUpdatePlayerStat.sp)
  return _internal_sp();
}
inline void GameServerUpdatePlayerStat::_internal_set_sp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  sp_ = value;
}
inline void GameServerUpdatePlayerStat::set_sp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sp(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerUpdatePlayerStat.sp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
