// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "game_enum.pb.h"
#include "game_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fprotocol_2eproto;
namespace protocol {
class GameClientEnter;
struct GameClientEnterDefaultTypeInternal;
extern GameClientEnterDefaultTypeInternal _GameClientEnter_default_instance_;
class GameClientPlayerMove;
struct GameClientPlayerMoveDefaultTypeInternal;
extern GameClientPlayerMoveDefaultTypeInternal _GameClientPlayerMove_default_instance_;
class GameServerAddPlayer;
struct GameServerAddPlayerDefaultTypeInternal;
extern GameServerAddPlayerDefaultTypeInternal _GameServerAddPlayer_default_instance_;
class GameServerChangeMap;
struct GameServerChangeMapDefaultTypeInternal;
extern GameServerChangeMapDefaultTypeInternal _GameServerChangeMap_default_instance_;
class GameServerEnter;
struct GameServerEnterDefaultTypeInternal;
extern GameServerEnterDefaultTypeInternal _GameServerEnter_default_instance_;
class GameServerPlayerMove;
struct GameServerPlayerMoveDefaultTypeInternal;
extern GameServerPlayerMoveDefaultTypeInternal _GameServerPlayerMove_default_instance_;
class GameServerRemoveObject;
struct GameServerRemoveObjectDefaultTypeInternal;
extern GameServerRemoveObjectDefaultTypeInternal _GameServerRemoveObject_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::GameClientEnter* Arena::CreateMaybeMessage<::protocol::GameClientEnter>(Arena*);
template<> ::protocol::GameClientPlayerMove* Arena::CreateMaybeMessage<::protocol::GameClientPlayerMove>(Arena*);
template<> ::protocol::GameServerAddPlayer* Arena::CreateMaybeMessage<::protocol::GameServerAddPlayer>(Arena*);
template<> ::protocol::GameServerChangeMap* Arena::CreateMaybeMessage<::protocol::GameServerChangeMap>(Arena*);
template<> ::protocol::GameServerEnter* Arena::CreateMaybeMessage<::protocol::GameServerEnter>(Arena*);
template<> ::protocol::GameServerPlayerMove* Arena::CreateMaybeMessage<::protocol::GameServerPlayerMove>(Arena*);
template<> ::protocol::GameServerRemoveObject* Arena::CreateMaybeMessage<::protocol::GameServerRemoveObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class GameClientEnter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameClientEnter) */ {
 public:
  inline GameClientEnter() : GameClientEnter(nullptr) {}
  ~GameClientEnter() override;
  explicit constexpr GameClientEnter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientEnter(const GameClientEnter& from);
  GameClientEnter(GameClientEnter&& from) noexcept
    : GameClientEnter() {
    *this = ::std::move(from);
  }

  inline GameClientEnter& operator=(const GameClientEnter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientEnter& operator=(GameClientEnter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientEnter& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientEnter* internal_default_instance() {
    return reinterpret_cast<const GameClientEnter*>(
               &_GameClientEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameClientEnter& a, GameClientEnter& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientEnter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientEnter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientEnter* New() const final {
    return new GameClientEnter();
  }

  GameClientEnter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientEnter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientEnter& from);
  void MergeFrom(const GameClientEnter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientEnter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameClientEnter";
  }
  protected:
  explicit GameClientEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
    kAuthKeyFieldNumber = 2,
  };
  // int32 character_id = 1;
  void clear_character_id();
  ::PROTOBUF_NAMESPACE_ID::int32 character_id() const;
  void set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_character_id() const;
  void _internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 auth_key = 2;
  void clear_auth_key();
  ::PROTOBUF_NAMESPACE_ID::int32 auth_key() const;
  void set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auth_key() const;
  void _internal_set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameClientEnter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 character_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 auth_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerEnter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerEnter) */ {
 public:
  inline GameServerEnter() : GameServerEnter(nullptr) {}
  ~GameServerEnter() override;
  explicit constexpr GameServerEnter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerEnter(const GameServerEnter& from);
  GameServerEnter(GameServerEnter&& from) noexcept
    : GameServerEnter() {
    *this = ::std::move(from);
  }

  inline GameServerEnter& operator=(const GameServerEnter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerEnter& operator=(GameServerEnter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerEnter& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerEnter* internal_default_instance() {
    return reinterpret_cast<const GameServerEnter*>(
               &_GameServerEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameServerEnter& a, GameServerEnter& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerEnter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerEnter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerEnter* New() const final {
    return new GameServerEnter();
  }

  GameServerEnter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerEnter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerEnter& from);
  void MergeFrom(const GameServerEnter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerEnter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerEnter";
  }
  protected:
  explicit GameServerEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kMapIdFieldNumber = 3,
  };
  // optional .protocol.PlayerInfo player_info = 2;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::protocol::PlayerInfo& player_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::protocol::PlayerInfo* release_player_info();
  ::protocol::PlayerInfo* mutable_player_info();
  void set_allocated_player_info(::protocol::PlayerInfo* player_info);
  private:
  const ::protocol::PlayerInfo& _internal_player_info() const;
  ::protocol::PlayerInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::protocol::PlayerInfo* player_info);
  ::protocol::PlayerInfo* unsafe_arena_release_player_info();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional int32 map_id = 3;
  bool has_map_id() const;
  private:
  bool _internal_has_map_id() const;
  public:
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerEnter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protocol::PlayerInfo* player_info_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerAddPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerAddPlayer) */ {
 public:
  inline GameServerAddPlayer() : GameServerAddPlayer(nullptr) {}
  ~GameServerAddPlayer() override;
  explicit constexpr GameServerAddPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerAddPlayer(const GameServerAddPlayer& from);
  GameServerAddPlayer(GameServerAddPlayer&& from) noexcept
    : GameServerAddPlayer() {
    *this = ::std::move(from);
  }

  inline GameServerAddPlayer& operator=(const GameServerAddPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerAddPlayer& operator=(GameServerAddPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerAddPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerAddPlayer* internal_default_instance() {
    return reinterpret_cast<const GameServerAddPlayer*>(
               &_GameServerAddPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameServerAddPlayer& a, GameServerAddPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerAddPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerAddPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerAddPlayer* New() const final {
    return new GameServerAddPlayer();
  }

  GameServerAddPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerAddPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerAddPlayer& from);
  void MergeFrom(const GameServerAddPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerAddPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerAddPlayer";
  }
  protected:
  explicit GameServerAddPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfosFieldNumber = 1,
  };
  // repeated .protocol.OtherPlayerInfo player_infos = 1;
  int player_infos_size() const;
  private:
  int _internal_player_infos_size() const;
  public:
  void clear_player_infos();
  ::protocol::OtherPlayerInfo* mutable_player_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OtherPlayerInfo >*
      mutable_player_infos();
  private:
  const ::protocol::OtherPlayerInfo& _internal_player_infos(int index) const;
  ::protocol::OtherPlayerInfo* _internal_add_player_infos();
  public:
  const ::protocol::OtherPlayerInfo& player_infos(int index) const;
  ::protocol::OtherPlayerInfo* add_player_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OtherPlayerInfo >&
      player_infos() const;

  // @@protoc_insertion_point(class_scope:protocol.GameServerAddPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OtherPlayerInfo > player_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerRemoveObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerRemoveObject) */ {
 public:
  inline GameServerRemoveObject() : GameServerRemoveObject(nullptr) {}
  ~GameServerRemoveObject() override;
  explicit constexpr GameServerRemoveObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerRemoveObject(const GameServerRemoveObject& from);
  GameServerRemoveObject(GameServerRemoveObject&& from) noexcept
    : GameServerRemoveObject() {
    *this = ::std::move(from);
  }

  inline GameServerRemoveObject& operator=(const GameServerRemoveObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerRemoveObject& operator=(GameServerRemoveObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerRemoveObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerRemoveObject* internal_default_instance() {
    return reinterpret_cast<const GameServerRemoveObject*>(
               &_GameServerRemoveObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameServerRemoveObject& a, GameServerRemoveObject& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerRemoveObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerRemoveObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerRemoveObject* New() const final {
    return new GameServerRemoveObject();
  }

  GameServerRemoveObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerRemoveObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerRemoveObject& from);
  void MergeFrom(const GameServerRemoveObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerRemoveObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerRemoveObject";
  }
  protected:
  explicit GameServerRemoveObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerRemoveObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerChangeMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerChangeMap) */ {
 public:
  inline GameServerChangeMap() : GameServerChangeMap(nullptr) {}
  ~GameServerChangeMap() override;
  explicit constexpr GameServerChangeMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerChangeMap(const GameServerChangeMap& from);
  GameServerChangeMap(GameServerChangeMap&& from) noexcept
    : GameServerChangeMap() {
    *this = ::std::move(from);
  }

  inline GameServerChangeMap& operator=(const GameServerChangeMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerChangeMap& operator=(GameServerChangeMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerChangeMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerChangeMap* internal_default_instance() {
    return reinterpret_cast<const GameServerChangeMap*>(
               &_GameServerChangeMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameServerChangeMap& a, GameServerChangeMap& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerChangeMap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerChangeMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerChangeMap* New() const final {
    return new GameServerChangeMap();
  }

  GameServerChangeMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerChangeMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerChangeMap& from);
  void MergeFrom(const GameServerChangeMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerChangeMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerChangeMap";
  }
  protected:
  explicit GameServerChangeMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIdFieldNumber = 1,
  };
  // int32 map_id = 1;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerChangeMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameClientPlayerMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameClientPlayerMove) */ {
 public:
  inline GameClientPlayerMove() : GameClientPlayerMove(nullptr) {}
  ~GameClientPlayerMove() override;
  explicit constexpr GameClientPlayerMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientPlayerMove(const GameClientPlayerMove& from);
  GameClientPlayerMove(GameClientPlayerMove&& from) noexcept
    : GameClientPlayerMove() {
    *this = ::std::move(from);
  }

  inline GameClientPlayerMove& operator=(const GameClientPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientPlayerMove& operator=(GameClientPlayerMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientPlayerMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientPlayerMove* internal_default_instance() {
    return reinterpret_cast<const GameClientPlayerMove*>(
               &_GameClientPlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameClientPlayerMove& a, GameClientPlayerMove& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientPlayerMove* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientPlayerMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientPlayerMove* New() const final {
    return new GameClientPlayerMove();
  }

  GameClientPlayerMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientPlayerMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientPlayerMove& from);
  void MergeFrom(const GameClientPlayerMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientPlayerMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameClientPlayerMove";
  }
  protected:
  explicit GameClientPlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameClientPlayerMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerPlayerMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerPlayerMove) */ {
 public:
  inline GameServerPlayerMove() : GameServerPlayerMove(nullptr) {}
  ~GameServerPlayerMove() override;
  explicit constexpr GameServerPlayerMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerPlayerMove(const GameServerPlayerMove& from);
  GameServerPlayerMove(GameServerPlayerMove&& from) noexcept
    : GameServerPlayerMove() {
    *this = ::std::move(from);
  }

  inline GameServerPlayerMove& operator=(const GameServerPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerPlayerMove& operator=(GameServerPlayerMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerPlayerMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerPlayerMove* internal_default_instance() {
    return reinterpret_cast<const GameServerPlayerMove*>(
               &_GameServerPlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GameServerPlayerMove& a, GameServerPlayerMove& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerPlayerMove* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerPlayerMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerPlayerMove* New() const final {
    return new GameServerPlayerMove();
  }

  GameServerPlayerMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerPlayerMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerPlayerMove& from);
  void MergeFrom(const GameServerPlayerMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerPlayerMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerPlayerMove";
  }
  protected:
  explicit GameServerPlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 x = 2;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 3;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerPlayerMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameClientEnter

// int32 character_id = 1;
inline void GameClientEnter::clear_character_id() {
  character_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientEnter::_internal_character_id() const {
  return character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientEnter::character_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientEnter.character_id)
  return _internal_character_id();
}
inline void GameClientEnter::_internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  character_id_ = value;
}
inline void GameClientEnter::set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientEnter.character_id)
}

// int32 auth_key = 2;
inline void GameClientEnter::clear_auth_key() {
  auth_key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientEnter::_internal_auth_key() const {
  return auth_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientEnter::auth_key() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientEnter.auth_key)
  return _internal_auth_key();
}
inline void GameClientEnter::_internal_set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auth_key_ = value;
}
inline void GameClientEnter::set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auth_key(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientEnter.auth_key)
}

// -------------------------------------------------------------------

// GameServerEnter

// bool success = 1;
inline void GameServerEnter::clear_success() {
  success_ = false;
}
inline bool GameServerEnter::_internal_success() const {
  return success_;
}
inline bool GameServerEnter::success() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerEnter.success)
  return _internal_success();
}
inline void GameServerEnter::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GameServerEnter::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerEnter.success)
}

// optional .protocol.PlayerInfo player_info = 2;
inline bool GameServerEnter::_internal_has_player_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || player_info_ != nullptr);
  return value;
}
inline bool GameServerEnter::has_player_info() const {
  return _internal_has_player_info();
}
inline const ::protocol::PlayerInfo& GameServerEnter::_internal_player_info() const {
  const ::protocol::PlayerInfo* p = player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::PlayerInfo&>(
      ::protocol::_PlayerInfo_default_instance_);
}
inline const ::protocol::PlayerInfo& GameServerEnter::player_info() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerEnter.player_info)
  return _internal_player_info();
}
inline void GameServerEnter::unsafe_arena_set_allocated_player_info(
    ::protocol::PlayerInfo* player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info_);
  }
  player_info_ = player_info;
  if (player_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.GameServerEnter.player_info)
}
inline ::protocol::PlayerInfo* GameServerEnter::release_player_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::PlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::PlayerInfo* GameServerEnter::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:protocol.GameServerEnter.player_info)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::PlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  return temp;
}
inline ::protocol::PlayerInfo* GameServerEnter::_internal_mutable_player_info() {
  _has_bits_[0] |= 0x00000001u;
  if (player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::PlayerInfo>(GetArenaForAllocation());
    player_info_ = p;
  }
  return player_info_;
}
inline ::protocol::PlayerInfo* GameServerEnter::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable:protocol.GameServerEnter.player_info)
  return _internal_mutable_player_info();
}
inline void GameServerEnter::set_allocated_player_info(::protocol::PlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info_);
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info));
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:protocol.GameServerEnter.player_info)
}

// optional int32 map_id = 3;
inline bool GameServerEnter::_internal_has_map_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameServerEnter::has_map_id() const {
  return _internal_has_map_id();
}
inline void GameServerEnter::clear_map_id() {
  map_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerEnter::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerEnter::map_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerEnter.map_id)
  return _internal_map_id();
}
inline void GameServerEnter::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  map_id_ = value;
}
inline void GameServerEnter::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerEnter.map_id)
}

// -------------------------------------------------------------------

// GameServerAddPlayer

// repeated .protocol.OtherPlayerInfo player_infos = 1;
inline int GameServerAddPlayer::_internal_player_infos_size() const {
  return player_infos_.size();
}
inline int GameServerAddPlayer::player_infos_size() const {
  return _internal_player_infos_size();
}
inline ::protocol::OtherPlayerInfo* GameServerAddPlayer::mutable_player_infos(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.GameServerAddPlayer.player_infos)
  return player_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OtherPlayerInfo >*
GameServerAddPlayer::mutable_player_infos() {
  // @@protoc_insertion_point(field_mutable_list:protocol.GameServerAddPlayer.player_infos)
  return &player_infos_;
}
inline const ::protocol::OtherPlayerInfo& GameServerAddPlayer::_internal_player_infos(int index) const {
  return player_infos_.Get(index);
}
inline const ::protocol::OtherPlayerInfo& GameServerAddPlayer::player_infos(int index) const {
  // @@protoc_insertion_point(field_get:protocol.GameServerAddPlayer.player_infos)
  return _internal_player_infos(index);
}
inline ::protocol::OtherPlayerInfo* GameServerAddPlayer::_internal_add_player_infos() {
  return player_infos_.Add();
}
inline ::protocol::OtherPlayerInfo* GameServerAddPlayer::add_player_infos() {
  // @@protoc_insertion_point(field_add:protocol.GameServerAddPlayer.player_infos)
  return _internal_add_player_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::OtherPlayerInfo >&
GameServerAddPlayer::player_infos() const {
  // @@protoc_insertion_point(field_list:protocol.GameServerAddPlayer.player_infos)
  return player_infos_;
}

// -------------------------------------------------------------------

// GameServerRemoveObject

// int64 object_id = 1;
inline void GameServerRemoveObject::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerRemoveObject::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerRemoveObject::object_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerRemoveObject.object_id)
  return _internal_object_id();
}
inline void GameServerRemoveObject::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void GameServerRemoveObject::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerRemoveObject.object_id)
}

// -------------------------------------------------------------------

// GameServerChangeMap

// int32 map_id = 1;
inline void GameServerChangeMap::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerChangeMap::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerChangeMap::map_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerChangeMap.map_id)
  return _internal_map_id();
}
inline void GameServerChangeMap::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void GameServerChangeMap::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerChangeMap.map_id)
}

// -------------------------------------------------------------------

// GameClientPlayerMove

// int32 x = 1;
inline void GameClientPlayerMove::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientPlayerMove::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientPlayerMove::x() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientPlayerMove.x)
  return _internal_x();
}
inline void GameClientPlayerMove::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void GameClientPlayerMove::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientPlayerMove.x)
}

// int32 y = 2;
inline void GameClientPlayerMove::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientPlayerMove::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientPlayerMove::y() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientPlayerMove.y)
  return _internal_y();
}
inline void GameClientPlayerMove::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void GameClientPlayerMove::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientPlayerMove.y)
}

// -------------------------------------------------------------------

// GameServerPlayerMove

// int64 object_id = 1;
inline void GameServerPlayerMove::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerPlayerMove::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerPlayerMove::object_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerPlayerMove.object_id)
  return _internal_object_id();
}
inline void GameServerPlayerMove::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void GameServerPlayerMove::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerPlayerMove.object_id)
}

// int32 x = 2;
inline void GameServerPlayerMove::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerPlayerMove::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerPlayerMove::x() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerPlayerMove.x)
  return _internal_x();
}
inline void GameServerPlayerMove::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void GameServerPlayerMove::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerPlayerMove.x)
}

// int32 y = 3;
inline void GameServerPlayerMove::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerPlayerMove::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerPlayerMove::y() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerPlayerMove.y)
  return _internal_y();
}
inline void GameServerPlayerMove::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void GameServerPlayerMove::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerPlayerMove.y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
