// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "game_enum.pb.h"
#include "game_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fprotocol_2eproto;
namespace protocol {
class GameClientEnter;
struct GameClientEnterDefaultTypeInternal;
extern GameClientEnterDefaultTypeInternal _GameClientEnter_default_instance_;
class GameServerEnter;
struct GameServerEnterDefaultTypeInternal;
extern GameServerEnterDefaultTypeInternal _GameServerEnter_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::GameClientEnter* Arena::CreateMaybeMessage<::protocol::GameClientEnter>(Arena*);
template<> ::protocol::GameServerEnter* Arena::CreateMaybeMessage<::protocol::GameServerEnter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class GameClientEnter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameClientEnter) */ {
 public:
  inline GameClientEnter() : GameClientEnter(nullptr) {}
  ~GameClientEnter() override;
  explicit constexpr GameClientEnter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientEnter(const GameClientEnter& from);
  GameClientEnter(GameClientEnter&& from) noexcept
    : GameClientEnter() {
    *this = ::std::move(from);
  }

  inline GameClientEnter& operator=(const GameClientEnter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientEnter& operator=(GameClientEnter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientEnter& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientEnter* internal_default_instance() {
    return reinterpret_cast<const GameClientEnter*>(
               &_GameClientEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameClientEnter& a, GameClientEnter& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientEnter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientEnter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientEnter* New() const final {
    return new GameClientEnter();
  }

  GameClientEnter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientEnter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientEnter& from);
  void MergeFrom(const GameClientEnter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientEnter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameClientEnter";
  }
  protected:
  explicit GameClientEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
    kAuthKeyFieldNumber = 2,
  };
  // int32 character_id = 1;
  void clear_character_id();
  ::PROTOBUF_NAMESPACE_ID::int32 character_id() const;
  void set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_character_id() const;
  void _internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 auth_key = 2;
  void clear_auth_key();
  ::PROTOBUF_NAMESPACE_ID::int32 auth_key() const;
  void set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auth_key() const;
  void _internal_set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameClientEnter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 character_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 auth_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerEnter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.GameServerEnter) */ {
 public:
  inline GameServerEnter() : GameServerEnter(nullptr) {}
  ~GameServerEnter() override;
  explicit constexpr GameServerEnter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerEnter(const GameServerEnter& from);
  GameServerEnter(GameServerEnter&& from) noexcept
    : GameServerEnter() {
    *this = ::std::move(from);
  }

  inline GameServerEnter& operator=(const GameServerEnter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerEnter& operator=(GameServerEnter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerEnter& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerEnter* internal_default_instance() {
    return reinterpret_cast<const GameServerEnter*>(
               &_GameServerEnter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameServerEnter& a, GameServerEnter& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerEnter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerEnter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerEnter* New() const final {
    return new GameServerEnter();
  }

  GameServerEnter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerEnter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerEnter& from);
  void MergeFrom(const GameServerEnter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerEnter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.GameServerEnter";
  }
  protected:
  explicit GameServerEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.GameServerEnter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameClientEnter

// int32 character_id = 1;
inline void GameClientEnter::clear_character_id() {
  character_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientEnter::_internal_character_id() const {
  return character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientEnter::character_id() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientEnter.character_id)
  return _internal_character_id();
}
inline void GameClientEnter::_internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  character_id_ = value;
}
inline void GameClientEnter::set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientEnter.character_id)
}

// int32 auth_key = 2;
inline void GameClientEnter::clear_auth_key() {
  auth_key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientEnter::_internal_auth_key() const {
  return auth_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientEnter::auth_key() const {
  // @@protoc_insertion_point(field_get:protocol.GameClientEnter.auth_key)
  return _internal_auth_key();
}
inline void GameClientEnter::_internal_set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auth_key_ = value;
}
inline void GameClientEnter::set_auth_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auth_key(value);
  // @@protoc_insertion_point(field_set:protocol.GameClientEnter.auth_key)
}

// -------------------------------------------------------------------

// GameServerEnter

// bool success = 1;
inline void GameServerEnter::clear_success() {
  success_ = false;
}
inline bool GameServerEnter::_internal_success() const {
  return success_;
}
inline bool GameServerEnter::success() const {
  // @@protoc_insertion_point(field_get:protocol.GameServerEnter.success)
  return _internal_success();
}
inline void GameServerEnter::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GameServerEnter::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:protocol.GameServerEnter.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
