// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_center_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_center_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "center_enum.pb.h"
#include "center_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_center_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_center_5fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_center_5fprotocol_2eproto;
namespace protocol {
class CenterClientRegisterRequest;
struct CenterClientRegisterRequestDefaultTypeInternal;
extern CenterClientRegisterRequestDefaultTypeInternal _CenterClientRegisterRequest_default_instance_;
class CenterServerRegisterResponse;
struct CenterServerRegisterResponseDefaultTypeInternal;
extern CenterServerRegisterResponseDefaultTypeInternal _CenterServerRegisterResponse_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::CenterClientRegisterRequest* Arena::CreateMaybeMessage<::protocol::CenterClientRegisterRequest>(Arena*);
template<> ::protocol::CenterServerRegisterResponse* Arena::CreateMaybeMessage<::protocol::CenterServerRegisterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class CenterClientRegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.CenterClientRegisterRequest) */ {
 public:
  inline CenterClientRegisterRequest() : CenterClientRegisterRequest(nullptr) {}
  ~CenterClientRegisterRequest() override;
  explicit constexpr CenterClientRegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CenterClientRegisterRequest(const CenterClientRegisterRequest& from);
  CenterClientRegisterRequest(CenterClientRegisterRequest&& from) noexcept
    : CenterClientRegisterRequest() {
    *this = ::std::move(from);
  }

  inline CenterClientRegisterRequest& operator=(const CenterClientRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CenterClientRegisterRequest& operator=(CenterClientRegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CenterClientRegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CenterClientRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const CenterClientRegisterRequest*>(
               &_CenterClientRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CenterClientRegisterRequest& a, CenterClientRegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CenterClientRegisterRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CenterClientRegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CenterClientRegisterRequest* New() const final {
    return new CenterClientRegisterRequest();
  }

  CenterClientRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CenterClientRegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CenterClientRegisterRequest& from);
  void MergeFrom(const CenterClientRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CenterClientRegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.CenterClientRegisterRequest";
  }
  protected:
  explicit CenterClientRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIpFieldNumber = 3,
    kVersionFieldNumber = 1,
    kPortFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .protocol.ServerType type = 5;
  void clear_type();
  ::protocol::ServerType type() const;
  void set_type(::protocol::ServerType value);
  private:
  ::protocol::ServerType _internal_type() const;
  void _internal_set_type(::protocol::ServerType value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.CenterClientRegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_center_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class CenterServerRegisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.CenterServerRegisterResponse) */ {
 public:
  inline CenterServerRegisterResponse() : CenterServerRegisterResponse(nullptr) {}
  ~CenterServerRegisterResponse() override;
  explicit constexpr CenterServerRegisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CenterServerRegisterResponse(const CenterServerRegisterResponse& from);
  CenterServerRegisterResponse(CenterServerRegisterResponse&& from) noexcept
    : CenterServerRegisterResponse() {
    *this = ::std::move(from);
  }

  inline CenterServerRegisterResponse& operator=(const CenterServerRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CenterServerRegisterResponse& operator=(CenterServerRegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CenterServerRegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CenterServerRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const CenterServerRegisterResponse*>(
               &_CenterServerRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CenterServerRegisterResponse& a, CenterServerRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CenterServerRegisterResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CenterServerRegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CenterServerRegisterResponse* New() const final {
    return new CenterServerRegisterResponse();
  }

  CenterServerRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CenterServerRegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CenterServerRegisterResponse& from);
  void MergeFrom(const CenterServerRegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CenterServerRegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.CenterServerRegisterResponse";
  }
  protected:
  explicit CenterServerRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .protocol.ServerRegisterResult result = 1;
  void clear_result();
  ::protocol::ServerRegisterResult result() const;
  void set_result(::protocol::ServerRegisterResult value);
  private:
  ::protocol::ServerRegisterResult _internal_result() const;
  void _internal_set_result(::protocol::ServerRegisterResult value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.CenterServerRegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_center_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CenterClientRegisterRequest

// int32 version = 1;
inline void CenterClientRegisterRequest::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CenterClientRegisterRequest::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CenterClientRegisterRequest::version() const {
  // @@protoc_insertion_point(field_get:protocol.CenterClientRegisterRequest.version)
  return _internal_version();
}
inline void CenterClientRegisterRequest::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
}
inline void CenterClientRegisterRequest::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:protocol.CenterClientRegisterRequest.version)
}

// string name = 2;
inline void CenterClientRegisterRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CenterClientRegisterRequest::name() const {
  // @@protoc_insertion_point(field_get:protocol.CenterClientRegisterRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CenterClientRegisterRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.CenterClientRegisterRequest.name)
}
inline std::string* CenterClientRegisterRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.CenterClientRegisterRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CenterClientRegisterRequest::_internal_name() const {
  return name_.Get();
}
inline void CenterClientRegisterRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CenterClientRegisterRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CenterClientRegisterRequest::release_name() {
  // @@protoc_insertion_point(field_release:protocol.CenterClientRegisterRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CenterClientRegisterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.CenterClientRegisterRequest.name)
}

// string ip = 3;
inline void CenterClientRegisterRequest::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& CenterClientRegisterRequest::ip() const {
  // @@protoc_insertion_point(field_get:protocol.CenterClientRegisterRequest.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CenterClientRegisterRequest::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.CenterClientRegisterRequest.ip)
}
inline std::string* CenterClientRegisterRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:protocol.CenterClientRegisterRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& CenterClientRegisterRequest::_internal_ip() const {
  return ip_.Get();
}
inline void CenterClientRegisterRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CenterClientRegisterRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CenterClientRegisterRequest::release_ip() {
  // @@protoc_insertion_point(field_release:protocol.CenterClientRegisterRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CenterClientRegisterRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.CenterClientRegisterRequest.ip)
}

// int32 port = 4;
inline void CenterClientRegisterRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CenterClientRegisterRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CenterClientRegisterRequest::port() const {
  // @@protoc_insertion_point(field_get:protocol.CenterClientRegisterRequest.port)
  return _internal_port();
}
inline void CenterClientRegisterRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void CenterClientRegisterRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:protocol.CenterClientRegisterRequest.port)
}

// .protocol.ServerType type = 5;
inline void CenterClientRegisterRequest::clear_type() {
  type_ = 0;
}
inline ::protocol::ServerType CenterClientRegisterRequest::_internal_type() const {
  return static_cast< ::protocol::ServerType >(type_);
}
inline ::protocol::ServerType CenterClientRegisterRequest::type() const {
  // @@protoc_insertion_point(field_get:protocol.CenterClientRegisterRequest.type)
  return _internal_type();
}
inline void CenterClientRegisterRequest::_internal_set_type(::protocol::ServerType value) {
  
  type_ = value;
}
inline void CenterClientRegisterRequest::set_type(::protocol::ServerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.CenterClientRegisterRequest.type)
}

// -------------------------------------------------------------------

// CenterServerRegisterResponse

// .protocol.ServerRegisterResult result = 1;
inline void CenterServerRegisterResponse::clear_result() {
  result_ = 0;
}
inline ::protocol::ServerRegisterResult CenterServerRegisterResponse::_internal_result() const {
  return static_cast< ::protocol::ServerRegisterResult >(result_);
}
inline ::protocol::ServerRegisterResult CenterServerRegisterResponse::result() const {
  // @@protoc_insertion_point(field_get:protocol.CenterServerRegisterResponse.result)
  return _internal_result();
}
inline void CenterServerRegisterResponse::_internal_set_result(::protocol::ServerRegisterResult value) {
  
  result_ = value;
}
inline void CenterServerRegisterResponse::set_result(::protocol::ServerRegisterResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:protocol.CenterServerRegisterResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_center_5fprotocol_2eproto
