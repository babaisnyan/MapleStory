// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#include "game_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protocol {
constexpr GameClientEnter::GameClientEnter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_id_(0u)
  , auth_key_(0){}
struct GameClientEnterDefaultTypeInternal {
  constexpr GameClientEnterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientEnterDefaultTypeInternal() {}
  union {
    GameClientEnter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientEnterDefaultTypeInternal _GameClientEnter_default_instance_;
constexpr GameServerEnter::GameServerEnter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_info_(nullptr)
  , success_(false)
  , map_id_(0){}
struct GameServerEnterDefaultTypeInternal {
  constexpr GameServerEnterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerEnterDefaultTypeInternal() {}
  union {
    GameServerEnter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerEnterDefaultTypeInternal _GameServerEnter_default_instance_;
constexpr GameServerAddPlayer::GameServerAddPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_infos_(){}
struct GameServerAddPlayerDefaultTypeInternal {
  constexpr GameServerAddPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerAddPlayerDefaultTypeInternal() {}
  union {
    GameServerAddPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerAddPlayerDefaultTypeInternal _GameServerAddPlayer_default_instance_;
constexpr GameServerAddMonster::GameServerAddMonster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mob_infos_(){}
struct GameServerAddMonsterDefaultTypeInternal {
  constexpr GameServerAddMonsterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerAddMonsterDefaultTypeInternal() {}
  union {
    GameServerAddMonster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerAddMonsterDefaultTypeInternal _GameServerAddMonster_default_instance_;
constexpr GameServerRemoveObject::GameServerRemoveObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(int64_t{0}){}
struct GameServerRemoveObjectDefaultTypeInternal {
  constexpr GameServerRemoveObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerRemoveObjectDefaultTypeInternal() {}
  union {
    GameServerRemoveObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerRemoveObjectDefaultTypeInternal _GameServerRemoveObject_default_instance_;
constexpr GameServerChangeMap::GameServerChangeMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_id_(0){}
struct GameServerChangeMapDefaultTypeInternal {
  constexpr GameServerChangeMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerChangeMapDefaultTypeInternal() {}
  union {
    GameServerChangeMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerChangeMapDefaultTypeInternal _GameServerChangeMap_default_instance_;
constexpr GameClientPlayerMove::GameClientPlayerMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , flip_(false)
  , animation_(0)
{}
struct GameClientPlayerMoveDefaultTypeInternal {
  constexpr GameClientPlayerMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientPlayerMoveDefaultTypeInternal() {}
  union {
    GameClientPlayerMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientPlayerMoveDefaultTypeInternal _GameClientPlayerMove_default_instance_;
constexpr GameServerPlayerMove::GameServerPlayerMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(int64_t{0})
  , x_(0)
  , y_(0)
  , flip_(false)
  , animation_(0)
{}
struct GameServerPlayerMoveDefaultTypeInternal {
  constexpr GameServerPlayerMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerPlayerMoveDefaultTypeInternal() {}
  union {
    GameServerPlayerMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerPlayerMoveDefaultTypeInternal _GameServerPlayerMove_default_instance_;
constexpr GameClientChangeKeySetting::GameClientChangeKeySetting(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_setting_(nullptr){}
struct GameClientChangeKeySettingDefaultTypeInternal {
  constexpr GameClientChangeKeySettingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientChangeKeySettingDefaultTypeInternal() {}
  union {
    GameClientChangeKeySetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientChangeKeySettingDefaultTypeInternal _GameClientChangeKeySetting_default_instance_;
constexpr GameServerMobMove::GameServerMobMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(int64_t{0})
  , flip_(false)
  , state_(0)

  , x_(0)
  , y_(0)
  , target_id_(uint64_t{0u})
  , target_x_(0)
  , target_y_(0){}
struct GameServerMobMoveDefaultTypeInternal {
  constexpr GameServerMobMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerMobMoveDefaultTypeInternal() {}
  union {
    GameServerMobMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerMobMoveDefaultTypeInternal _GameServerMobMove_default_instance_;
constexpr GameServerMobAttack::GameServerMobAttack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_id_(int64_t{0})
  , mob_id_(int64_t{0}){}
struct GameServerMobAttackDefaultTypeInternal {
  constexpr GameServerMobAttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerMobAttackDefaultTypeInternal() {}
  union {
    GameServerMobAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerMobAttackDefaultTypeInternal _GameServerMobAttack_default_instance_;
constexpr GameServerPlayerDamage::GameServerPlayerDamage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_id_(int64_t{0})
  , damage_(0){}
struct GameServerPlayerDamageDefaultTypeInternal {
  constexpr GameServerPlayerDamageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerPlayerDamageDefaultTypeInternal() {}
  union {
    GameServerPlayerDamage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerPlayerDamageDefaultTypeInternal _GameServerPlayerDamage_default_instance_;
constexpr GameServerMobDamage::GameServerMobDamage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_id_(int64_t{0})
  , damage_(0)
  , is_critical_(false){}
struct GameServerMobDamageDefaultTypeInternal {
  constexpr GameServerMobDamageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerMobDamageDefaultTypeInternal() {}
  union {
    GameServerMobDamage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerMobDamageDefaultTypeInternal _GameServerMobDamage_default_instance_;
constexpr GameClientChat::GameClientChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GameClientChatDefaultTypeInternal {
  constexpr GameClientChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientChatDefaultTypeInternal() {}
  union {
    GameClientChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientChatDefaultTypeInternal _GameClientChat_default_instance_;
constexpr GameServerChat::GameServerChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(int64_t{0})
  , type_(0)
{}
struct GameServerChatDefaultTypeInternal {
  constexpr GameServerChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerChatDefaultTypeInternal() {}
  union {
    GameServerChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerChatDefaultTypeInternal _GameServerChat_default_instance_;
constexpr GameServerPlayerDead::GameServerPlayerDead(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(int64_t{0}){}
struct GameServerPlayerDeadDefaultTypeInternal {
  constexpr GameServerPlayerDeadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerPlayerDeadDefaultTypeInternal() {}
  union {
    GameServerPlayerDead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerPlayerDeadDefaultTypeInternal _GameServerPlayerDead_default_instance_;
constexpr GameClientRevive::GameClientRevive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GameClientReviveDefaultTypeInternal {
  constexpr GameClientReviveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientReviveDefaultTypeInternal() {}
  union {
    GameClientRevive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientReviveDefaultTypeInternal _GameClientRevive_default_instance_;
constexpr GameServerRevive::GameServerRevive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(int64_t{0}){}
struct GameServerReviveDefaultTypeInternal {
  constexpr GameServerReviveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerReviveDefaultTypeInternal() {}
  union {
    GameServerRevive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerReviveDefaultTypeInternal _GameServerRevive_default_instance_;
constexpr GameServerTeleportPlayer::GameServerTeleportPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(int64_t{0})
  , x_(0)
  , y_(0){}
struct GameServerTeleportPlayerDefaultTypeInternal {
  constexpr GameServerTeleportPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerTeleportPlayerDefaultTypeInternal() {}
  union {
    GameServerTeleportPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerTeleportPlayerDefaultTypeInternal _GameServerTeleportPlayer_default_instance_;
constexpr GameServerUpdatePlayerStat::GameServerUpdatePlayerStat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exp_(uint64_t{0u})
  , level_(0)
  , hp_(0)
  , mp_(0)
  , max_hp_(0)
  , max_mp_(0)
  , str_(0)
  , dex_(0)
  , luk_(0)
  , int__(0)
  , ap_(0)
  , sp_(0){}
struct GameServerUpdatePlayerStatDefaultTypeInternal {
  constexpr GameServerUpdatePlayerStatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerUpdatePlayerStatDefaultTypeInternal() {}
  union {
    GameServerUpdatePlayerStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerUpdatePlayerStatDefaultTypeInternal _GameServerUpdatePlayerStat_default_instance_;
constexpr GameClientAttack::GameClientAttack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_id_(int64_t{0}){}
struct GameClientAttackDefaultTypeInternal {
  constexpr GameClientAttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientAttackDefaultTypeInternal() {}
  union {
    GameClientAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientAttackDefaultTypeInternal _GameClientAttack_default_instance_;
constexpr GameServerAttack::GameServerAttack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(int64_t{0}){}
struct GameServerAttackDefaultTypeInternal {
  constexpr GameServerAttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerAttackDefaultTypeInternal() {}
  union {
    GameServerAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerAttackDefaultTypeInternal _GameServerAttack_default_instance_;
constexpr GameServerPlayerLevelUp::GameServerPlayerLevelUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_id_(int64_t{0})
  , level_(0){}
struct GameServerPlayerLevelUpDefaultTypeInternal {
  constexpr GameServerPlayerLevelUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerPlayerLevelUpDefaultTypeInternal() {}
  union {
    GameServerPlayerLevelUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerPlayerLevelUpDefaultTypeInternal _GameServerPlayerLevelUp_default_instance_;
constexpr GameServerAddExpMessage::GameServerAddExpMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exp_(uint64_t{0u}){}
struct GameServerAddExpMessageDefaultTypeInternal {
  constexpr GameServerAddExpMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerAddExpMessageDefaultTypeInternal() {}
  union {
    GameServerAddExpMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerAddExpMessageDefaultTypeInternal _GameServerAddExpMessage_default_instance_;
constexpr GameClientMoveInventory::GameClientMoveInventory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , src_pos_(0)
  , dest_pos_(0){}
struct GameClientMoveInventoryDefaultTypeInternal {
  constexpr GameClientMoveInventoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientMoveInventoryDefaultTypeInternal() {}
  union {
    GameClientMoveInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientMoveInventoryDefaultTypeInternal _GameClientMoveInventory_default_instance_;
constexpr GameClientUseItem::GameClientUseItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_(0){}
struct GameClientUseItemDefaultTypeInternal {
  constexpr GameClientUseItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientUseItemDefaultTypeInternal() {}
  union {
    GameClientUseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientUseItemDefaultTypeInternal _GameClientUseItem_default_instance_;
constexpr GameClientEquipItem::GameClientEquipItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : src_pos_(0)
  , dest_pos_(0){}
struct GameClientEquipItemDefaultTypeInternal {
  constexpr GameClientEquipItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientEquipItemDefaultTypeInternal() {}
  union {
    GameClientEquipItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientEquipItemDefaultTypeInternal _GameClientEquipItem_default_instance_;
constexpr GameClientUnequipItem::GameClientUnequipItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : src_pos_(0)
  , dest_pos_(0){}
struct GameClientUnequipItemDefaultTypeInternal {
  constexpr GameClientUnequipItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientUnequipItemDefaultTypeInternal() {}
  union {
    GameClientUnequipItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientUnequipItemDefaultTypeInternal _GameClientUnequipItem_default_instance_;
constexpr GameServerAddMeso::GameServerAddMeso(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meso_(0){}
struct GameServerAddMesoDefaultTypeInternal {
  constexpr GameServerAddMesoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerAddMesoDefaultTypeInternal() {}
  union {
    GameServerAddMeso _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerAddMesoDefaultTypeInternal _GameServerAddMeso_default_instance_;
}  // namespace protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_game_5fprotocol_2eproto[29];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_game_5fprotocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_game_5fprotocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_game_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientEnter, character_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientEnter, auth_key_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerEnter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerEnter, success_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerEnter, player_info_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerEnter, map_id_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAddPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAddPlayer, player_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAddMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAddMonster, mob_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerRemoveObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerRemoveObject, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerChangeMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerChangeMap, map_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientPlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientPlayerMove, x_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientPlayerMove, y_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientPlayerMove, flip_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientPlayerMove, animation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerMove, object_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerMove, x_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerMove, y_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerMove, flip_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerMove, animation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientChangeKeySetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientChangeKeySetting, key_setting_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobMove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobMove, object_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobMove, flip_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobMove, state_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobMove, x_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobMove, y_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobMove, target_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobMove, target_x_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobMove, target_y_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobAttack, target_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobAttack, mob_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerDamage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerDamage, target_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerDamage, damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobDamage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobDamage, target_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobDamage, damage_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerMobDamage, is_critical_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientChat, message_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerChat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerChat, message_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerChat, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerChat, sender_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerDead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerDead, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientRevive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerRevive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerRevive, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerTeleportPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerTeleportPlayer, object_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerTeleportPlayer, x_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerTeleportPlayer, y_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, level_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, exp_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, hp_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, mp_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, max_hp_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, max_mp_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, str_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, dex_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, luk_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, int__),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, ap_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerUpdatePlayerStat, sp_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientAttack, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAttack, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerLevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerLevelUp, object_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerPlayerLevelUp, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAddExpMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAddExpMessage, exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientMoveInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientMoveInventory, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientMoveInventory, src_pos_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientMoveInventory, dest_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientUseItem, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientEquipItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientEquipItem, src_pos_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientEquipItem, dest_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientUnequipItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientUnequipItem, src_pos_),
  PROTOBUF_FIELD_OFFSET(::protocol::GameClientUnequipItem, dest_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAddMeso, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::GameServerAddMeso, meso_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::GameClientEnter)},
  { 7, 15, sizeof(::protocol::GameServerEnter)},
  { 18, -1, sizeof(::protocol::GameServerAddPlayer)},
  { 24, -1, sizeof(::protocol::GameServerAddMonster)},
  { 30, -1, sizeof(::protocol::GameServerRemoveObject)},
  { 36, -1, sizeof(::protocol::GameServerChangeMap)},
  { 42, -1, sizeof(::protocol::GameClientPlayerMove)},
  { 51, -1, sizeof(::protocol::GameServerPlayerMove)},
  { 61, -1, sizeof(::protocol::GameClientChangeKeySetting)},
  { 67, 80, sizeof(::protocol::GameServerMobMove)},
  { 88, -1, sizeof(::protocol::GameServerMobAttack)},
  { 95, -1, sizeof(::protocol::GameServerPlayerDamage)},
  { 102, -1, sizeof(::protocol::GameServerMobDamage)},
  { 110, -1, sizeof(::protocol::GameClientChat)},
  { 116, 124, sizeof(::protocol::GameServerChat)},
  { 127, -1, sizeof(::protocol::GameServerPlayerDead)},
  { 133, -1, sizeof(::protocol::GameClientRevive)},
  { 138, -1, sizeof(::protocol::GameServerRevive)},
  { 144, -1, sizeof(::protocol::GameServerTeleportPlayer)},
  { 152, 169, sizeof(::protocol::GameServerUpdatePlayerStat)},
  { 181, -1, sizeof(::protocol::GameClientAttack)},
  { 187, -1, sizeof(::protocol::GameServerAttack)},
  { 193, -1, sizeof(::protocol::GameServerPlayerLevelUp)},
  { 200, -1, sizeof(::protocol::GameServerAddExpMessage)},
  { 206, -1, sizeof(::protocol::GameClientMoveInventory)},
  { 214, -1, sizeof(::protocol::GameClientUseItem)},
  { 220, -1, sizeof(::protocol::GameClientEquipItem)},
  { 227, -1, sizeof(::protocol::GameClientUnequipItem)},
  { 234, -1, sizeof(::protocol::GameServerAddMeso)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameClientEnter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerEnter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerAddPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerAddMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerRemoveObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerChangeMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameClientPlayerMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerPlayerMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameClientChangeKeySetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerMobMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerMobAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerPlayerDamage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerMobDamage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameClientChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerPlayerDead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameClientRevive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerRevive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerTeleportPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerUpdatePlayerStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameClientAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerPlayerLevelUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerAddExpMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameClientMoveInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameClientUseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameClientEquipItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameClientUnequipItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_GameServerAddMeso_default_instance_),
};

const char descriptor_table_protodef_game_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023game_protocol.proto\022\010protocol\032\017game_en"
  "um.proto\032\021game_struct.proto\"9\n\017GameClien"
  "tEnter\022\024\n\014character_id\030\001 \001(\r\022\020\n\010auth_key"
  "\030\002 \001(\005\"\202\001\n\017GameServerEnter\022\017\n\007success\030\001 "
  "\001(\010\022.\n\013player_info\030\002 \001(\0132\024.protocol.Play"
  "erInfoH\000\210\001\001\022\023\n\006map_id\030\003 \001(\005H\001\210\001\001B\016\n\014_pla"
  "yer_infoB\t\n\007_map_id\"F\n\023GameServerAddPlay"
  "er\022/\n\014player_infos\030\001 \003(\0132\031.protocol.Othe"
  "rPlayerInfo\"<\n\024GameServerAddMonster\022$\n\tm"
  "ob_infos\030\001 \003(\0132\021.protocol.MobInfo\"+\n\026Gam"
  "eServerRemoveObject\022\021\n\tobject_id\030\001 \001(\003\"%"
  "\n\023GameServerChangeMap\022\016\n\006map_id\030\001 \001(\005\"h\n"
  "\024GameClientPlayerMove\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
  "\001(\002\022\014\n\004flip\030\003 \001(\010\022,\n\tanimation\030\004 \001(\0162\031.p"
  "rotocol.PlayerAnimation\"{\n\024GameServerPla"
  "yerMove\022\021\n\tobject_id\030\001 \001(\003\022\t\n\001x\030\002 \001(\002\022\t\n"
  "\001y\030\003 \001(\002\022\014\n\004flip\030\004 \001(\010\022,\n\tanimation\030\005 \001("
  "\0162\031.protocol.PlayerAnimation\"G\n\032GameClie"
  "ntChangeKeySetting\022)\n\013key_setting\030\001 \001(\0132"
  "\024.protocol.KeySetting\"\340\001\n\021GameServerMobM"
  "ove\022\021\n\tobject_id\030\001 \001(\003\022\014\n\004flip\030\002 \001(\010\022&\n\005"
  "state\030\003 \001(\0162\027.protocol.MobActionType\022\t\n\001"
  "x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\026\n\ttarget_id\030\006 \001(\004H\000\210"
  "\001\001\022\025\n\010target_x\030\007 \001(\002H\001\210\001\001\022\025\n\010target_y\030\010 "
  "\001(\002H\002\210\001\001B\014\n\n_target_idB\013\n\t_target_xB\013\n\t_"
  "target_y\"8\n\023GameServerMobAttack\022\021\n\ttarge"
  "t_id\030\001 \001(\003\022\016\n\006mob_id\030\002 \001(\003\";\n\026GameServer"
  "PlayerDamage\022\021\n\ttarget_id\030\001 \001(\003\022\016\n\006damag"
  "e\030\002 \001(\005\"M\n\023GameServerMobDamage\022\021\n\ttarget"
  "_id\030\001 \001(\003\022\016\n\006damage\030\002 \001(\005\022\023\n\013is_critical"
  "\030\003 \001(\010\"!\n\016GameClientChat\022\017\n\007message\030\001 \001("
  "\t\"c\n\016GameServerChat\022\017\n\007message\030\001 \001(\t\022 \n\004"
  "type\030\002 \001(\0162\022.protocol.ChatType\022\023\n\006sender"
  "\030\003 \001(\003H\000\210\001\001B\t\n\007_sender\")\n\024GameServerPlay"
  "erDead\022\021\n\tobject_id\030\001 \001(\003\"\022\n\020GameClientR"
  "evive\"%\n\020GameServerRevive\022\021\n\tobject_id\030\001"
  " \001(\003\"C\n\030GameServerTeleportPlayer\022\021\n\tobje"
  "ct_id\030\001 \001(\003\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\"\334\002\n\032Ga"
  "meServerUpdatePlayerStat\022\022\n\005level\030\001 \001(\005H"
  "\000\210\001\001\022\020\n\003exp\030\002 \001(\004H\001\210\001\001\022\017\n\002hp\030\003 \001(\005H\002\210\001\001\022"
  "\017\n\002mp\030\004 \001(\005H\003\210\001\001\022\023\n\006max_hp\030\005 \001(\005H\004\210\001\001\022\023\n"
  "\006max_mp\030\006 \001(\005H\005\210\001\001\022\020\n\003str\030\007 \001(\005H\006\210\001\001\022\020\n\003"
  "dex\030\010 \001(\005H\007\210\001\001\022\020\n\003luk\030\t \001(\005H\010\210\001\001\022\020\n\003int\030"
  "\n \001(\005H\t\210\001\001\022\017\n\002ap\030\013 \001(\005H\n\210\001\001\022\017\n\002sp\030\014 \001(\005H"
  "\013\210\001\001B\010\n\006_levelB\006\n\004_expB\005\n\003_hpB\005\n\003_mpB\t\n\007"
  "_max_hpB\t\n\007_max_mpB\006\n\004_strB\006\n\004_dexB\006\n\004_l"
  "ukB\006\n\004_intB\005\n\003_apB\005\n\003_sp\"%\n\020GameClientAt"
  "tack\022\021\n\ttarget_id\030\001 \001(\003\"%\n\020GameServerAtt"
  "ack\022\021\n\tobject_id\030\001 \001(\003\";\n\027GameServerPlay"
  "erLevelUp\022\021\n\tobject_id\030\001 \001(\003\022\r\n\005level\030\002 "
  "\001(\005\"&\n\027GameServerAddExpMessage\022\013\n\003exp\030\001 "
  "\001(\004\"J\n\027GameClientMoveInventory\022\014\n\004type\030\001"
  " \001(\005\022\017\n\007src_pos\030\002 \001(\005\022\020\n\010dest_pos\030\003 \001(\005\""
  " \n\021GameClientUseItem\022\013\n\003pos\030\001 \001(\005\"8\n\023Gam"
  "eClientEquipItem\022\017\n\007src_pos\030\001 \001(\005\022\020\n\010des"
  "t_pos\030\002 \001(\005\":\n\025GameClientUnequipItem\022\017\n\007"
  "src_pos\030\001 \001(\005\022\020\n\010dest_pos\030\002 \001(\005\"!\n\021GameS"
  "erverAddMeso\022\014\n\004meso\030\001 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_game_5fprotocol_2eproto_deps[2] = {
  &::descriptor_table_game_5fenum_2eproto,
  &::descriptor_table_game_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_game_5fprotocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fprotocol_2eproto = {
  false, false, 2314, descriptor_table_protodef_game_5fprotocol_2eproto, "game_protocol.proto", 
  &descriptor_table_game_5fprotocol_2eproto_once, descriptor_table_game_5fprotocol_2eproto_deps, 2, 29,
  schemas, file_default_instances, TableStruct_game_5fprotocol_2eproto::offsets,
  file_level_metadata_game_5fprotocol_2eproto, file_level_enum_descriptors_game_5fprotocol_2eproto, file_level_service_descriptors_game_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_game_5fprotocol_2eproto_getter() {
  return &descriptor_table_game_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_game_5fprotocol_2eproto(&descriptor_table_game_5fprotocol_2eproto);
namespace protocol {

// ===================================================================

class GameClientEnter::_Internal {
 public:
};

GameClientEnter::GameClientEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameClientEnter)
}
GameClientEnter::GameClientEnter(const GameClientEnter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_key_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(auth_key_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameClientEnter)
}

void GameClientEnter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auth_key_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(auth_key_));
}

GameClientEnter::~GameClientEnter() {
  // @@protoc_insertion_point(destructor:protocol.GameClientEnter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientEnter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientEnter::ArenaDtor(void* object) {
  GameClientEnter* _this = reinterpret_cast< GameClientEnter* >(object);
  (void)_this;
}
void GameClientEnter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientEnter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameClientEnter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_key_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(auth_key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientEnter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 auth_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auth_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientEnter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameClientEnter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_character_id(), target);
  }

  // int32 auth_key = 2;
  if (this->auth_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_auth_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameClientEnter)
  return target;
}

size_t GameClientEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameClientEnter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character_id());
  }

  // int32 auth_key = 2;
  if (this->auth_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auth_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientEnter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameClientEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientEnter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientEnter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameClientEnter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameClientEnter)
    MergeFrom(*source);
  }
}

void GameClientEnter::MergeFrom(const GameClientEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameClientEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.auth_key() != 0) {
    _internal_set_auth_key(from._internal_auth_key());
  }
}

void GameClientEnter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameClientEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientEnter::CopyFrom(const GameClientEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameClientEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientEnter::IsInitialized() const {
  return true;
}

void GameClientEnter::InternalSwap(GameClientEnter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientEnter, auth_key_)
      + sizeof(GameClientEnter::auth_key_)
      - PROTOBUF_FIELD_OFFSET(GameClientEnter, character_id_)>(
          reinterpret_cast<char*>(&character_id_),
          reinterpret_cast<char*>(&other->character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientEnter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[0]);
}

// ===================================================================

class GameServerEnter::_Internal {
 public:
  using HasBits = decltype(std::declval<GameServerEnter>()._has_bits_);
  static const ::protocol::PlayerInfo& player_info(const GameServerEnter* msg);
  static void set_has_player_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_map_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::PlayerInfo&
GameServerEnter::_Internal::player_info(const GameServerEnter* msg) {
  return *msg->player_info_;
}
void GameServerEnter::clear_player_info() {
  if (player_info_ != nullptr) player_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GameServerEnter::GameServerEnter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerEnter)
}
GameServerEnter::GameServerEnter(const GameServerEnter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_info()) {
    player_info_ = new ::protocol::PlayerInfo(*from.player_info_);
  } else {
    player_info_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_id_) -
    reinterpret_cast<char*>(&success_)) + sizeof(map_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerEnter)
}

void GameServerEnter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&map_id_) -
    reinterpret_cast<char*>(&player_info_)) + sizeof(map_id_));
}

GameServerEnter::~GameServerEnter() {
  // @@protoc_insertion_point(destructor:protocol.GameServerEnter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerEnter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_info_;
}

void GameServerEnter::ArenaDtor(void* object) {
  GameServerEnter* _this = reinterpret_cast< GameServerEnter* >(object);
  (void)_this;
}
void GameServerEnter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerEnter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerEnter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_info_ != nullptr);
    player_info_->Clear();
  }
  success_ = false;
  map_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerEnter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.PlayerInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 map_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_map_id(&has_bits);
          map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerEnter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerEnter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional .protocol.PlayerInfo player_info = 2;
  if (_internal_has_player_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_info(this), target, stream);
  }

  // optional int32 map_id = 3;
  if (_internal_has_map_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_map_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerEnter)
  return target;
}

size_t GameServerEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerEnter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protocol.PlayerInfo player_info = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_info_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 map_id = 3;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerEnter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerEnter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerEnter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerEnter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerEnter)
    MergeFrom(*source);
  }
}

void GameServerEnter::MergeFrom(const GameServerEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_info()) {
    _internal_mutable_player_info()->::protocol::PlayerInfo::MergeFrom(from._internal_player_info());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_has_map_id()) {
    _internal_set_map_id(from._internal_map_id());
  }
}

void GameServerEnter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerEnter::CopyFrom(const GameServerEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerEnter::IsInitialized() const {
  return true;
}

void GameServerEnter::InternalSwap(GameServerEnter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerEnter, map_id_)
      + sizeof(GameServerEnter::map_id_)
      - PROTOBUF_FIELD_OFFSET(GameServerEnter, player_info_)>(
          reinterpret_cast<char*>(&player_info_),
          reinterpret_cast<char*>(&other->player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerEnter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[1]);
}

// ===================================================================

class GameServerAddPlayer::_Internal {
 public:
};

void GameServerAddPlayer::clear_player_infos() {
  player_infos_.Clear();
}
GameServerAddPlayer::GameServerAddPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerAddPlayer)
}
GameServerAddPlayer::GameServerAddPlayer(const GameServerAddPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_infos_(from.player_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerAddPlayer)
}

void GameServerAddPlayer::SharedCtor() {
}

GameServerAddPlayer::~GameServerAddPlayer() {
  // @@protoc_insertion_point(destructor:protocol.GameServerAddPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerAddPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerAddPlayer::ArenaDtor(void* object) {
  GameServerAddPlayer* _this = reinterpret_cast< GameServerAddPlayer* >(object);
  (void)_this;
}
void GameServerAddPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerAddPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerAddPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerAddPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerAddPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.OtherPlayerInfo player_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerAddPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerAddPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.OtherPlayerInfo player_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerAddPlayer)
  return target;
}

size_t GameServerAddPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerAddPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.OtherPlayerInfo player_infos = 1;
  total_size += 1UL * this->_internal_player_infos_size();
  for (const auto& msg : this->player_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerAddPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerAddPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerAddPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerAddPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerAddPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerAddPlayer)
    MergeFrom(*source);
  }
}

void GameServerAddPlayer::MergeFrom(const GameServerAddPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerAddPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_infos_.MergeFrom(from.player_infos_);
}

void GameServerAddPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerAddPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerAddPlayer::CopyFrom(const GameServerAddPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerAddPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerAddPlayer::IsInitialized() const {
  return true;
}

void GameServerAddPlayer::InternalSwap(GameServerAddPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  player_infos_.InternalSwap(&other->player_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerAddPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[2]);
}

// ===================================================================

class GameServerAddMonster::_Internal {
 public:
};

void GameServerAddMonster::clear_mob_infos() {
  mob_infos_.Clear();
}
GameServerAddMonster::GameServerAddMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mob_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerAddMonster)
}
GameServerAddMonster::GameServerAddMonster(const GameServerAddMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mob_infos_(from.mob_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerAddMonster)
}

void GameServerAddMonster::SharedCtor() {
}

GameServerAddMonster::~GameServerAddMonster() {
  // @@protoc_insertion_point(destructor:protocol.GameServerAddMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerAddMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerAddMonster::ArenaDtor(void* object) {
  GameServerAddMonster* _this = reinterpret_cast< GameServerAddMonster* >(object);
  (void)_this;
}
void GameServerAddMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerAddMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerAddMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerAddMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mob_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerAddMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protocol.MobInfo mob_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mob_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerAddMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerAddMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.MobInfo mob_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mob_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mob_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerAddMonster)
  return target;
}

size_t GameServerAddMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerAddMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.MobInfo mob_infos = 1;
  total_size += 1UL * this->_internal_mob_infos_size();
  for (const auto& msg : this->mob_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerAddMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerAddMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerAddMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerAddMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerAddMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerAddMonster)
    MergeFrom(*source);
  }
}

void GameServerAddMonster::MergeFrom(const GameServerAddMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerAddMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mob_infos_.MergeFrom(from.mob_infos_);
}

void GameServerAddMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerAddMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerAddMonster::CopyFrom(const GameServerAddMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerAddMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerAddMonster::IsInitialized() const {
  return true;
}

void GameServerAddMonster::InternalSwap(GameServerAddMonster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mob_infos_.InternalSwap(&other->mob_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerAddMonster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[3]);
}

// ===================================================================

class GameServerRemoveObject::_Internal {
 public:
};

GameServerRemoveObject::GameServerRemoveObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerRemoveObject)
}
GameServerRemoveObject::GameServerRemoveObject(const GameServerRemoveObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerRemoveObject)
}

void GameServerRemoveObject::SharedCtor() {
object_id_ = int64_t{0};
}

GameServerRemoveObject::~GameServerRemoveObject() {
  // @@protoc_insertion_point(destructor:protocol.GameServerRemoveObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerRemoveObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerRemoveObject::ArenaDtor(void* object) {
  GameServerRemoveObject* _this = reinterpret_cast< GameServerRemoveObject* >(object);
  (void)_this;
}
void GameServerRemoveObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerRemoveObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerRemoveObject::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerRemoveObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerRemoveObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerRemoveObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerRemoveObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerRemoveObject)
  return target;
}

size_t GameServerRemoveObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerRemoveObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerRemoveObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerRemoveObject)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerRemoveObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerRemoveObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerRemoveObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerRemoveObject)
    MergeFrom(*source);
  }
}

void GameServerRemoveObject::MergeFrom(const GameServerRemoveObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerRemoveObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void GameServerRemoveObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerRemoveObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerRemoveObject::CopyFrom(const GameServerRemoveObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerRemoveObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerRemoveObject::IsInitialized() const {
  return true;
}

void GameServerRemoveObject::InternalSwap(GameServerRemoveObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerRemoveObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[4]);
}

// ===================================================================

class GameServerChangeMap::_Internal {
 public:
};

GameServerChangeMap::GameServerChangeMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerChangeMap)
}
GameServerChangeMap::GameServerChangeMap(const GameServerChangeMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_id_ = from.map_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerChangeMap)
}

void GameServerChangeMap::SharedCtor() {
map_id_ = 0;
}

GameServerChangeMap::~GameServerChangeMap() {
  // @@protoc_insertion_point(destructor:protocol.GameServerChangeMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerChangeMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerChangeMap::ArenaDtor(void* object) {
  GameServerChangeMap* _this = reinterpret_cast< GameServerChangeMap* >(object);
  (void)_this;
}
void GameServerChangeMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerChangeMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerChangeMap::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerChangeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerChangeMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 map_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerChangeMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerChangeMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_id = 1;
  if (this->map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_map_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerChangeMap)
  return target;
}

size_t GameServerChangeMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerChangeMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 map_id = 1;
  if (this->map_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerChangeMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerChangeMap)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerChangeMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerChangeMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerChangeMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerChangeMap)
    MergeFrom(*source);
  }
}

void GameServerChangeMap::MergeFrom(const GameServerChangeMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerChangeMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_id() != 0) {
    _internal_set_map_id(from._internal_map_id());
  }
}

void GameServerChangeMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerChangeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerChangeMap::CopyFrom(const GameServerChangeMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerChangeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerChangeMap::IsInitialized() const {
  return true;
}

void GameServerChangeMap::InternalSwap(GameServerChangeMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(map_id_, other->map_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerChangeMap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[5]);
}

// ===================================================================

class GameClientPlayerMove::_Internal {
 public:
};

GameClientPlayerMove::GameClientPlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameClientPlayerMove)
}
GameClientPlayerMove::GameClientPlayerMove(const GameClientPlayerMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&animation_) -
    reinterpret_cast<char*>(&x_)) + sizeof(animation_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameClientPlayerMove)
}

void GameClientPlayerMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&animation_) -
    reinterpret_cast<char*>(&x_)) + sizeof(animation_));
}

GameClientPlayerMove::~GameClientPlayerMove() {
  // @@protoc_insertion_point(destructor:protocol.GameClientPlayerMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientPlayerMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientPlayerMove::ArenaDtor(void* object) {
  GameClientPlayerMove* _this = reinterpret_cast< GameClientPlayerMove* >(object);
  (void)_this;
}
void GameClientPlayerMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientPlayerMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientPlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameClientPlayerMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animation_) -
      reinterpret_cast<char*>(&x_)) + sizeof(animation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientPlayerMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool flip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.PlayerAnimation animation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_animation(static_cast<::protocol::PlayerAnimation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientPlayerMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameClientPlayerMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // bool flip = 3;
  if (this->flip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_flip(), target);
  }

  // .protocol.PlayerAnimation animation = 4;
  if (this->animation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_animation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameClientPlayerMove)
  return target;
}

size_t GameClientPlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameClientPlayerMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // bool flip = 3;
  if (this->flip() != 0) {
    total_size += 1 + 1;
  }

  // .protocol.PlayerAnimation animation = 4;
  if (this->animation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_animation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientPlayerMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameClientPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientPlayerMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientPlayerMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameClientPlayerMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameClientPlayerMove)
    MergeFrom(*source);
  }
}

void GameClientPlayerMove::MergeFrom(const GameClientPlayerMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameClientPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.flip() != 0) {
    _internal_set_flip(from._internal_flip());
  }
  if (from.animation() != 0) {
    _internal_set_animation(from._internal_animation());
  }
}

void GameClientPlayerMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameClientPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientPlayerMove::CopyFrom(const GameClientPlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameClientPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientPlayerMove::IsInitialized() const {
  return true;
}

void GameClientPlayerMove::InternalSwap(GameClientPlayerMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientPlayerMove, animation_)
      + sizeof(GameClientPlayerMove::animation_)
      - PROTOBUF_FIELD_OFFSET(GameClientPlayerMove, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientPlayerMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[6]);
}

// ===================================================================

class GameServerPlayerMove::_Internal {
 public:
};

GameServerPlayerMove::GameServerPlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerPlayerMove)
}
GameServerPlayerMove::GameServerPlayerMove(const GameServerPlayerMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&animation_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(animation_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerPlayerMove)
}

void GameServerPlayerMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&animation_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(animation_));
}

GameServerPlayerMove::~GameServerPlayerMove() {
  // @@protoc_insertion_point(destructor:protocol.GameServerPlayerMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerPlayerMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerPlayerMove::ArenaDtor(void* object) {
  GameServerPlayerMove* _this = reinterpret_cast< GameServerPlayerMove* >(object);
  (void)_this;
}
void GameServerPlayerMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerPlayerMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerPlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerPlayerMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animation_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(animation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerPlayerMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool flip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.PlayerAnimation animation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_animation(static_cast<::protocol::PlayerAnimation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerPlayerMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerPlayerMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // bool flip = 4;
  if (this->flip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_flip(), target);
  }

  // .protocol.PlayerAnimation animation = 5;
  if (this->animation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_animation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerPlayerMove)
  return target;
}

size_t GameServerPlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerPlayerMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // bool flip = 4;
  if (this->flip() != 0) {
    total_size += 1 + 1;
  }

  // .protocol.PlayerAnimation animation = 5;
  if (this->animation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_animation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerPlayerMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerPlayerMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerPlayerMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerPlayerMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerPlayerMove)
    MergeFrom(*source);
  }
}

void GameServerPlayerMove::MergeFrom(const GameServerPlayerMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.flip() != 0) {
    _internal_set_flip(from._internal_flip());
  }
  if (from.animation() != 0) {
    _internal_set_animation(from._internal_animation());
  }
}

void GameServerPlayerMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerPlayerMove::CopyFrom(const GameServerPlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerPlayerMove::IsInitialized() const {
  return true;
}

void GameServerPlayerMove::InternalSwap(GameServerPlayerMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerPlayerMove, animation_)
      + sizeof(GameServerPlayerMove::animation_)
      - PROTOBUF_FIELD_OFFSET(GameServerPlayerMove, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerPlayerMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[7]);
}

// ===================================================================

class GameClientChangeKeySetting::_Internal {
 public:
  static const ::protocol::KeySetting& key_setting(const GameClientChangeKeySetting* msg);
};

const ::protocol::KeySetting&
GameClientChangeKeySetting::_Internal::key_setting(const GameClientChangeKeySetting* msg) {
  return *msg->key_setting_;
}
void GameClientChangeKeySetting::clear_key_setting() {
  if (GetArenaForAllocation() == nullptr && key_setting_ != nullptr) {
    delete key_setting_;
  }
  key_setting_ = nullptr;
}
GameClientChangeKeySetting::GameClientChangeKeySetting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameClientChangeKeySetting)
}
GameClientChangeKeySetting::GameClientChangeKeySetting(const GameClientChangeKeySetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key_setting()) {
    key_setting_ = new ::protocol::KeySetting(*from.key_setting_);
  } else {
    key_setting_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.GameClientChangeKeySetting)
}

void GameClientChangeKeySetting::SharedCtor() {
key_setting_ = nullptr;
}

GameClientChangeKeySetting::~GameClientChangeKeySetting() {
  // @@protoc_insertion_point(destructor:protocol.GameClientChangeKeySetting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientChangeKeySetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete key_setting_;
}

void GameClientChangeKeySetting::ArenaDtor(void* object) {
  GameClientChangeKeySetting* _this = reinterpret_cast< GameClientChangeKeySetting* >(object);
  (void)_this;
}
void GameClientChangeKeySetting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientChangeKeySetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientChangeKeySetting::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameClientChangeKeySetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && key_setting_ != nullptr) {
    delete key_setting_;
  }
  key_setting_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientChangeKeySetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protocol.KeySetting key_setting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientChangeKeySetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameClientChangeKeySetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.KeySetting key_setting = 1;
  if (this->has_key_setting()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key_setting(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameClientChangeKeySetting)
  return target;
}

size_t GameClientChangeKeySetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameClientChangeKeySetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.KeySetting key_setting = 1;
  if (this->has_key_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_setting_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientChangeKeySetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameClientChangeKeySetting)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientChangeKeySetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientChangeKeySetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameClientChangeKeySetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameClientChangeKeySetting)
    MergeFrom(*source);
  }
}

void GameClientChangeKeySetting::MergeFrom(const GameClientChangeKeySetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameClientChangeKeySetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key_setting()) {
    _internal_mutable_key_setting()->::protocol::KeySetting::MergeFrom(from._internal_key_setting());
  }
}

void GameClientChangeKeySetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameClientChangeKeySetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientChangeKeySetting::CopyFrom(const GameClientChangeKeySetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameClientChangeKeySetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientChangeKeySetting::IsInitialized() const {
  return true;
}

void GameClientChangeKeySetting::InternalSwap(GameClientChangeKeySetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(key_setting_, other->key_setting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientChangeKeySetting::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[8]);
}

// ===================================================================

class GameServerMobMove::_Internal {
 public:
  using HasBits = decltype(std::declval<GameServerMobMove>()._has_bits_);
  static void set_has_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GameServerMobMove::GameServerMobMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerMobMove)
}
GameServerMobMove::GameServerMobMove(const GameServerMobMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_y_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_y_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerMobMove)
}

void GameServerMobMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_y_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_y_));
}

GameServerMobMove::~GameServerMobMove() {
  // @@protoc_insertion_point(destructor:protocol.GameServerMobMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerMobMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerMobMove::ArenaDtor(void* object) {
  GameServerMobMove* _this = reinterpret_cast< GameServerMobMove* >(object);
  (void)_this;
}
void GameServerMobMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerMobMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerMobMove::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerMobMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(y_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&target_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_y_) -
        reinterpret_cast<char*>(&target_id_)) + sizeof(target_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerMobMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool flip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.MobActionType state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::protocol::MobActionType>(val));
        } else goto handle_unusual;
        continue;
      // float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint64 target_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_target_id(&has_bits);
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float target_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_target_x(&has_bits);
          target_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float target_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_target_y(&has_bits);
          target_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerMobMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerMobMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // bool flip = 2;
  if (this->flip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_flip(), target);
  }

  // .protocol.MobActionType state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // optional uint64 target_id = 6;
  if (_internal_has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_target_id(), target);
  }

  // optional float target_x = 7;
  if (_internal_has_target_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_target_x(), target);
  }

  // optional float target_y = 8;
  if (_internal_has_target_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_target_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerMobMove)
  return target;
}

size_t GameServerMobMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerMobMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  // bool flip = 2;
  if (this->flip() != 0) {
    total_size += 1 + 1;
  }

  // .protocol.MobActionType state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 target_id = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_target_id());
    }

    // optional float target_x = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float target_y = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerMobMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerMobMove)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerMobMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerMobMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerMobMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerMobMove)
    MergeFrom(*source);
  }
}

void GameServerMobMove::MergeFrom(const GameServerMobMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerMobMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.flip() != 0) {
    _internal_set_flip(from._internal_flip());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      target_id_ = from.target_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_x_ = from.target_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_y_ = from.target_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameServerMobMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerMobMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerMobMove::CopyFrom(const GameServerMobMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerMobMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerMobMove::IsInitialized() const {
  return true;
}

void GameServerMobMove::InternalSwap(GameServerMobMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerMobMove, target_y_)
      + sizeof(GameServerMobMove::target_y_)
      - PROTOBUF_FIELD_OFFSET(GameServerMobMove, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerMobMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[9]);
}

// ===================================================================

class GameServerMobAttack::_Internal {
 public:
};

GameServerMobAttack::GameServerMobAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerMobAttack)
}
GameServerMobAttack::GameServerMobAttack(const GameServerMobAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mob_id_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(mob_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerMobAttack)
}

void GameServerMobAttack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mob_id_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(mob_id_));
}

GameServerMobAttack::~GameServerMobAttack() {
  // @@protoc_insertion_point(destructor:protocol.GameServerMobAttack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerMobAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerMobAttack::ArenaDtor(void* object) {
  GameServerMobAttack* _this = reinterpret_cast< GameServerMobAttack* >(object);
  (void)_this;
}
void GameServerMobAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerMobAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerMobAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerMobAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mob_id_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(mob_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerMobAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mob_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mob_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerMobAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerMobAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_target_id(), target);
  }

  // int64 mob_id = 2;
  if (this->mob_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_mob_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerMobAttack)
  return target;
}

size_t GameServerMobAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerMobAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_id());
  }

  // int64 mob_id = 2;
  if (this->mob_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mob_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerMobAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerMobAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerMobAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerMobAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerMobAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerMobAttack)
    MergeFrom(*source);
  }
}

void GameServerMobAttack::MergeFrom(const GameServerMobAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerMobAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from.mob_id() != 0) {
    _internal_set_mob_id(from._internal_mob_id());
  }
}

void GameServerMobAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerMobAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerMobAttack::CopyFrom(const GameServerMobAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerMobAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerMobAttack::IsInitialized() const {
  return true;
}

void GameServerMobAttack::InternalSwap(GameServerMobAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerMobAttack, mob_id_)
      + sizeof(GameServerMobAttack::mob_id_)
      - PROTOBUF_FIELD_OFFSET(GameServerMobAttack, target_id_)>(
          reinterpret_cast<char*>(&target_id_),
          reinterpret_cast<char*>(&other->target_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerMobAttack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[10]);
}

// ===================================================================

class GameServerPlayerDamage::_Internal {
 public:
};

GameServerPlayerDamage::GameServerPlayerDamage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerPlayerDamage)
}
GameServerPlayerDamage::GameServerPlayerDamage(const GameServerPlayerDamage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(damage_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerPlayerDamage)
}

void GameServerPlayerDamage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(damage_));
}

GameServerPlayerDamage::~GameServerPlayerDamage() {
  // @@protoc_insertion_point(destructor:protocol.GameServerPlayerDamage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerPlayerDamage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerPlayerDamage::ArenaDtor(void* object) {
  GameServerPlayerDamage* _this = reinterpret_cast< GameServerPlayerDamage* >(object);
  (void)_this;
}
void GameServerPlayerDamage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerPlayerDamage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerPlayerDamage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerPlayerDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damage_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerPlayerDamage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerPlayerDamage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerPlayerDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_target_id(), target);
  }

  // int32 damage = 2;
  if (this->damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerPlayerDamage)
  return target;
}

size_t GameServerPlayerDamage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerPlayerDamage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_id());
  }

  // int32 damage = 2;
  if (this->damage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_damage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerPlayerDamage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerPlayerDamage)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerPlayerDamage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerPlayerDamage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerPlayerDamage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerPlayerDamage)
    MergeFrom(*source);
  }
}

void GameServerPlayerDamage::MergeFrom(const GameServerPlayerDamage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerPlayerDamage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from.damage() != 0) {
    _internal_set_damage(from._internal_damage());
  }
}

void GameServerPlayerDamage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerPlayerDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerPlayerDamage::CopyFrom(const GameServerPlayerDamage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerPlayerDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerPlayerDamage::IsInitialized() const {
  return true;
}

void GameServerPlayerDamage::InternalSwap(GameServerPlayerDamage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerPlayerDamage, damage_)
      + sizeof(GameServerPlayerDamage::damage_)
      - PROTOBUF_FIELD_OFFSET(GameServerPlayerDamage, target_id_)>(
          reinterpret_cast<char*>(&target_id_),
          reinterpret_cast<char*>(&other->target_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerPlayerDamage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[11]);
}

// ===================================================================

class GameServerMobDamage::_Internal {
 public:
};

GameServerMobDamage::GameServerMobDamage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerMobDamage)
}
GameServerMobDamage::GameServerMobDamage(const GameServerMobDamage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_critical_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(is_critical_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerMobDamage)
}

void GameServerMobDamage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_critical_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(is_critical_));
}

GameServerMobDamage::~GameServerMobDamage() {
  // @@protoc_insertion_point(destructor:protocol.GameServerMobDamage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerMobDamage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerMobDamage::ArenaDtor(void* object) {
  GameServerMobDamage* _this = reinterpret_cast< GameServerMobDamage* >(object);
  (void)_this;
}
void GameServerMobDamage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerMobDamage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerMobDamage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerMobDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_critical_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(is_critical_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerMobDamage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_critical = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerMobDamage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerMobDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_target_id(), target);
  }

  // int32 damage = 2;
  if (this->damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_damage(), target);
  }

  // bool is_critical = 3;
  if (this->is_critical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_critical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerMobDamage)
  return target;
}

size_t GameServerMobDamage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerMobDamage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_id());
  }

  // int32 damage = 2;
  if (this->damage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_damage());
  }

  // bool is_critical = 3;
  if (this->is_critical() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerMobDamage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerMobDamage)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerMobDamage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerMobDamage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerMobDamage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerMobDamage)
    MergeFrom(*source);
  }
}

void GameServerMobDamage::MergeFrom(const GameServerMobDamage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerMobDamage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from.damage() != 0) {
    _internal_set_damage(from._internal_damage());
  }
  if (from.is_critical() != 0) {
    _internal_set_is_critical(from._internal_is_critical());
  }
}

void GameServerMobDamage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerMobDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerMobDamage::CopyFrom(const GameServerMobDamage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerMobDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerMobDamage::IsInitialized() const {
  return true;
}

void GameServerMobDamage::InternalSwap(GameServerMobDamage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerMobDamage, is_critical_)
      + sizeof(GameServerMobDamage::is_critical_)
      - PROTOBUF_FIELD_OFFSET(GameServerMobDamage, target_id_)>(
          reinterpret_cast<char*>(&target_id_),
          reinterpret_cast<char*>(&other->target_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerMobDamage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[12]);
}

// ===================================================================

class GameClientChat::_Internal {
 public:
};

GameClientChat::GameClientChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameClientChat)
}
GameClientChat::GameClientChat(const GameClientChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protocol.GameClientChat)
}

void GameClientChat::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameClientChat::~GameClientChat() {
  // @@protoc_insertion_point(destructor:protocol.GameClientChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameClientChat::ArenaDtor(void* object) {
  GameClientChat* _this = reinterpret_cast< GameClientChat* >(object);
  (void)_this;
}
void GameClientChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientChat::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameClientChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.GameClientChat.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameClientChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.GameClientChat.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameClientChat)
  return target;
}

size_t GameClientChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameClientChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameClientChat)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameClientChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameClientChat)
    MergeFrom(*source);
  }
}

void GameClientChat::MergeFrom(const GameClientChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameClientChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.message().empty()) {
    _internal_set_message(from._internal_message());
  }
}

void GameClientChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameClientChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientChat::CopyFrom(const GameClientChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameClientChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientChat::IsInitialized() const {
  return true;
}

void GameClientChat::InternalSwap(GameClientChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[13]);
}

// ===================================================================

class GameServerChat::_Internal {
 public:
  using HasBits = decltype(std::declval<GameServerChat>()._has_bits_);
  static void set_has_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GameServerChat::GameServerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerChat)
}
GameServerChat::GameServerChat(const GameServerChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&sender_, &from.sender_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerChat)
}

void GameServerChat::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(type_));
}

GameServerChat::~GameServerChat() {
  // @@protoc_insertion_point(destructor:protocol.GameServerChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServerChat::ArenaDtor(void* object) {
  GameServerChat* _this = reinterpret_cast< GameServerChat* >(object);
  (void)_this;
}
void GameServerChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  sender_ = int64_t{0};
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.GameServerChat.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.ChatType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::protocol::ChatType>(val));
        } else goto handle_unusual;
        continue;
      // optional int64 sender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sender(&has_bits);
          sender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.GameServerChat.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .protocol.ChatType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional int64 sender = 3;
  if (_internal_has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerChat)
  return target;
}

size_t GameServerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // optional int64 sender = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sender());
  }

  // .protocol.ChatType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerChat)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerChat)
    MergeFrom(*source);
  }
}

void GameServerChat::MergeFrom(const GameServerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_sender()) {
    _internal_set_sender(from._internal_sender());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GameServerChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerChat::CopyFrom(const GameServerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerChat::IsInitialized() const {
  return true;
}

void GameServerChat::InternalSwap(GameServerChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerChat, type_)
      + sizeof(GameServerChat::type_)
      - PROTOBUF_FIELD_OFFSET(GameServerChat, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[14]);
}

// ===================================================================

class GameServerPlayerDead::_Internal {
 public:
};

GameServerPlayerDead::GameServerPlayerDead(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerPlayerDead)
}
GameServerPlayerDead::GameServerPlayerDead(const GameServerPlayerDead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerPlayerDead)
}

void GameServerPlayerDead::SharedCtor() {
object_id_ = int64_t{0};
}

GameServerPlayerDead::~GameServerPlayerDead() {
  // @@protoc_insertion_point(destructor:protocol.GameServerPlayerDead)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerPlayerDead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerPlayerDead::ArenaDtor(void* object) {
  GameServerPlayerDead* _this = reinterpret_cast< GameServerPlayerDead* >(object);
  (void)_this;
}
void GameServerPlayerDead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerPlayerDead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerPlayerDead::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerPlayerDead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerPlayerDead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerPlayerDead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerPlayerDead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerPlayerDead)
  return target;
}

size_t GameServerPlayerDead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerPlayerDead)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerPlayerDead::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerPlayerDead)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerPlayerDead* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerPlayerDead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerPlayerDead)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerPlayerDead)
    MergeFrom(*source);
  }
}

void GameServerPlayerDead::MergeFrom(const GameServerPlayerDead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerPlayerDead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void GameServerPlayerDead::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerPlayerDead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerPlayerDead::CopyFrom(const GameServerPlayerDead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerPlayerDead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerPlayerDead::IsInitialized() const {
  return true;
}

void GameServerPlayerDead::InternalSwap(GameServerPlayerDead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerPlayerDead::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[15]);
}

// ===================================================================

class GameClientRevive::_Internal {
 public:
};

GameClientRevive::GameClientRevive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameClientRevive)
}
GameClientRevive::GameClientRevive(const GameClientRevive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.GameClientRevive)
}

void GameClientRevive::SharedCtor() {
}

GameClientRevive::~GameClientRevive() {
  // @@protoc_insertion_point(destructor:protocol.GameClientRevive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientRevive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientRevive::ArenaDtor(void* object) {
  GameClientRevive* _this = reinterpret_cast< GameClientRevive* >(object);
  (void)_this;
}
void GameClientRevive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientRevive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientRevive::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameClientRevive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientRevive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientRevive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameClientRevive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameClientRevive)
  return target;
}

size_t GameClientRevive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameClientRevive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientRevive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameClientRevive)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientRevive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientRevive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameClientRevive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameClientRevive)
    MergeFrom(*source);
  }
}

void GameClientRevive::MergeFrom(const GameClientRevive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameClientRevive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameClientRevive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameClientRevive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientRevive::CopyFrom(const GameClientRevive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameClientRevive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientRevive::IsInitialized() const {
  return true;
}

void GameClientRevive::InternalSwap(GameClientRevive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientRevive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[16]);
}

// ===================================================================

class GameServerRevive::_Internal {
 public:
};

GameServerRevive::GameServerRevive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerRevive)
}
GameServerRevive::GameServerRevive(const GameServerRevive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerRevive)
}

void GameServerRevive::SharedCtor() {
object_id_ = int64_t{0};
}

GameServerRevive::~GameServerRevive() {
  // @@protoc_insertion_point(destructor:protocol.GameServerRevive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerRevive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerRevive::ArenaDtor(void* object) {
  GameServerRevive* _this = reinterpret_cast< GameServerRevive* >(object);
  (void)_this;
}
void GameServerRevive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerRevive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerRevive::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerRevive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerRevive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerRevive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerRevive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerRevive)
  return target;
}

size_t GameServerRevive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerRevive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerRevive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerRevive)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerRevive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerRevive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerRevive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerRevive)
    MergeFrom(*source);
  }
}

void GameServerRevive::MergeFrom(const GameServerRevive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerRevive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void GameServerRevive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerRevive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerRevive::CopyFrom(const GameServerRevive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerRevive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerRevive::IsInitialized() const {
  return true;
}

void GameServerRevive::InternalSwap(GameServerRevive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerRevive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[17]);
}

// ===================================================================

class GameServerTeleportPlayer::_Internal {
 public:
};

GameServerTeleportPlayer::GameServerTeleportPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerTeleportPlayer)
}
GameServerTeleportPlayer::GameServerTeleportPlayer(const GameServerTeleportPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerTeleportPlayer)
}

void GameServerTeleportPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(y_));
}

GameServerTeleportPlayer::~GameServerTeleportPlayer() {
  // @@protoc_insertion_point(destructor:protocol.GameServerTeleportPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerTeleportPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerTeleportPlayer::ArenaDtor(void* object) {
  GameServerTeleportPlayer* _this = reinterpret_cast< GameServerTeleportPlayer* >(object);
  (void)_this;
}
void GameServerTeleportPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerTeleportPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerTeleportPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerTeleportPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerTeleportPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerTeleportPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerTeleportPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerTeleportPlayer)
  return target;
}

size_t GameServerTeleportPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerTeleportPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerTeleportPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerTeleportPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerTeleportPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerTeleportPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerTeleportPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerTeleportPlayer)
    MergeFrom(*source);
  }
}

void GameServerTeleportPlayer::MergeFrom(const GameServerTeleportPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerTeleportPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void GameServerTeleportPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerTeleportPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerTeleportPlayer::CopyFrom(const GameServerTeleportPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerTeleportPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerTeleportPlayer::IsInitialized() const {
  return true;
}

void GameServerTeleportPlayer::InternalSwap(GameServerTeleportPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerTeleportPlayer, y_)
      + sizeof(GameServerTeleportPlayer::y_)
      - PROTOBUF_FIELD_OFFSET(GameServerTeleportPlayer, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerTeleportPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[18]);
}

// ===================================================================

class GameServerUpdatePlayerStat::_Internal {
 public:
  using HasBits = decltype(std::declval<GameServerUpdatePlayerStat>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_mp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dex(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_luk(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_int_(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ap(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sp(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

GameServerUpdatePlayerStat::GameServerUpdatePlayerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerUpdatePlayerStat)
}
GameServerUpdatePlayerStat::GameServerUpdatePlayerStat(const GameServerUpdatePlayerStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&exp_, &from.exp_,
    static_cast<size_t>(reinterpret_cast<char*>(&sp_) -
    reinterpret_cast<char*>(&exp_)) + sizeof(sp_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerUpdatePlayerStat)
}

void GameServerUpdatePlayerStat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sp_) -
    reinterpret_cast<char*>(&exp_)) + sizeof(sp_));
}

GameServerUpdatePlayerStat::~GameServerUpdatePlayerStat() {
  // @@protoc_insertion_point(destructor:protocol.GameServerUpdatePlayerStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerUpdatePlayerStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerUpdatePlayerStat::ArenaDtor(void* object) {
  GameServerUpdatePlayerStat* _this = reinterpret_cast< GameServerUpdatePlayerStat* >(object);
  (void)_this;
}
void GameServerUpdatePlayerStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerUpdatePlayerStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerUpdatePlayerStat::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerUpdatePlayerStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&exp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dex_) -
        reinterpret_cast<char*>(&exp_)) + sizeof(dex_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&luk_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sp_) -
        reinterpret_cast<char*>(&luk_)) + sizeof(sp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerUpdatePlayerStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mp(&has_bits);
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_hp(&has_bits);
          max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_mp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_mp(&has_bits);
          max_mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 str = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_str(&has_bits);
          str_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_dex(&has_bits);
          dex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 luk = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_luk(&has_bits);
          luk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 int = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_int_(&has_bits);
          int__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ap = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ap(&has_bits);
          ap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_sp(&has_bits);
          sp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerUpdatePlayerStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerUpdatePlayerStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 level = 1;
  if (_internal_has_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // optional uint64 exp = 2;
  if (_internal_has_exp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_exp(), target);
  }

  // optional int32 hp = 3;
  if (_internal_has_hp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
  }

  // optional int32 mp = 4;
  if (_internal_has_mp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mp(), target);
  }

  // optional int32 max_hp = 5;
  if (_internal_has_max_hp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_hp(), target);
  }

  // optional int32 max_mp = 6;
  if (_internal_has_max_mp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_mp(), target);
  }

  // optional int32 str = 7;
  if (_internal_has_str()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_str(), target);
  }

  // optional int32 dex = 8;
  if (_internal_has_dex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_dex(), target);
  }

  // optional int32 luk = 9;
  if (_internal_has_luk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_luk(), target);
  }

  // optional int32 int = 10;
  if (_internal_has_int_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_int_(), target);
  }

  // optional int32 ap = 11;
  if (_internal_has_ap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_ap(), target);
  }

  // optional int32 sp = 12;
  if (_internal_has_sp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_sp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerUpdatePlayerStat)
  return target;
}

size_t GameServerUpdatePlayerStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerUpdatePlayerStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 exp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_exp());
    }

    // optional int32 level = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_level());
    }

    // optional int32 hp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hp());
    }

    // optional int32 mp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mp());
    }

    // optional int32 max_hp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_hp());
    }

    // optional int32 max_mp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_mp());
    }

    // optional int32 str = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_str());
    }

    // optional int32 dex = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dex());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 luk = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_luk());
    }

    // optional int32 int = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int_());
    }

    // optional int32 ap = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ap());
    }

    // optional int32 sp = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerUpdatePlayerStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerUpdatePlayerStat)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerUpdatePlayerStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerUpdatePlayerStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerUpdatePlayerStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerUpdatePlayerStat)
    MergeFrom(*source);
  }
}

void GameServerUpdatePlayerStat::MergeFrom(const GameServerUpdatePlayerStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerUpdatePlayerStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000008u) {
      mp_ = from.mp_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_hp_ = from.max_hp_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_mp_ = from.max_mp_;
    }
    if (cached_has_bits & 0x00000040u) {
      str_ = from.str_;
    }
    if (cached_has_bits & 0x00000080u) {
      dex_ = from.dex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      luk_ = from.luk_;
    }
    if (cached_has_bits & 0x00000200u) {
      int__ = from.int__;
    }
    if (cached_has_bits & 0x00000400u) {
      ap_ = from.ap_;
    }
    if (cached_has_bits & 0x00000800u) {
      sp_ = from.sp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameServerUpdatePlayerStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerUpdatePlayerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerUpdatePlayerStat::CopyFrom(const GameServerUpdatePlayerStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerUpdatePlayerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerUpdatePlayerStat::IsInitialized() const {
  return true;
}

void GameServerUpdatePlayerStat::InternalSwap(GameServerUpdatePlayerStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerUpdatePlayerStat, sp_)
      + sizeof(GameServerUpdatePlayerStat::sp_)
      - PROTOBUF_FIELD_OFFSET(GameServerUpdatePlayerStat, exp_)>(
          reinterpret_cast<char*>(&exp_),
          reinterpret_cast<char*>(&other->exp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerUpdatePlayerStat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[19]);
}

// ===================================================================

class GameClientAttack::_Internal {
 public:
};

GameClientAttack::GameClientAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameClientAttack)
}
GameClientAttack::GameClientAttack(const GameClientAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_id_ = from.target_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.GameClientAttack)
}

void GameClientAttack::SharedCtor() {
target_id_ = int64_t{0};
}

GameClientAttack::~GameClientAttack() {
  // @@protoc_insertion_point(destructor:protocol.GameClientAttack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientAttack::ArenaDtor(void* object) {
  GameClientAttack* _this = reinterpret_cast< GameClientAttack* >(object);
  (void)_this;
}
void GameClientAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameClientAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameClientAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameClientAttack)
  return target;
}

size_t GameClientAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameClientAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 target_id = 1;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameClientAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameClientAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameClientAttack)
    MergeFrom(*source);
  }
}

void GameClientAttack::MergeFrom(const GameClientAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameClientAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
}

void GameClientAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameClientAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientAttack::CopyFrom(const GameClientAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameClientAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientAttack::IsInitialized() const {
  return true;
}

void GameClientAttack::InternalSwap(GameClientAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(target_id_, other->target_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientAttack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[20]);
}

// ===================================================================

class GameServerAttack::_Internal {
 public:
};

GameServerAttack::GameServerAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerAttack)
}
GameServerAttack::GameServerAttack(const GameServerAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerAttack)
}

void GameServerAttack::SharedCtor() {
object_id_ = int64_t{0};
}

GameServerAttack::~GameServerAttack() {
  // @@protoc_insertion_point(destructor:protocol.GameServerAttack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerAttack::ArenaDtor(void* object) {
  GameServerAttack* _this = reinterpret_cast< GameServerAttack* >(object);
  (void)_this;
}
void GameServerAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerAttack)
  return target;
}

size_t GameServerAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerAttack)
    MergeFrom(*source);
  }
}

void GameServerAttack::MergeFrom(const GameServerAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
}

void GameServerAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerAttack::CopyFrom(const GameServerAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerAttack::IsInitialized() const {
  return true;
}

void GameServerAttack::InternalSwap(GameServerAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerAttack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[21]);
}

// ===================================================================

class GameServerPlayerLevelUp::_Internal {
 public:
};

GameServerPlayerLevelUp::GameServerPlayerLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerPlayerLevelUp)
}
GameServerPlayerLevelUp::GameServerPlayerLevelUp(const GameServerPlayerLevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerPlayerLevelUp)
}

void GameServerPlayerLevelUp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(level_));
}

GameServerPlayerLevelUp::~GameServerPlayerLevelUp() {
  // @@protoc_insertion_point(destructor:protocol.GameServerPlayerLevelUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerPlayerLevelUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerPlayerLevelUp::ArenaDtor(void* object) {
  GameServerPlayerLevelUp* _this = reinterpret_cast< GameServerPlayerLevelUp* >(object);
  (void)_this;
}
void GameServerPlayerLevelUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerPlayerLevelUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerPlayerLevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerPlayerLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerPlayerLevelUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerPlayerLevelUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerPlayerLevelUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerPlayerLevelUp)
  return target;
}

size_t GameServerPlayerLevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerPlayerLevelUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerPlayerLevelUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerPlayerLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerPlayerLevelUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerPlayerLevelUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerPlayerLevelUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerPlayerLevelUp)
    MergeFrom(*source);
  }
}

void GameServerPlayerLevelUp::MergeFrom(const GameServerPlayerLevelUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerPlayerLevelUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void GameServerPlayerLevelUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerPlayerLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerPlayerLevelUp::CopyFrom(const GameServerPlayerLevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerPlayerLevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerPlayerLevelUp::IsInitialized() const {
  return true;
}

void GameServerPlayerLevelUp::InternalSwap(GameServerPlayerLevelUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerPlayerLevelUp, level_)
      + sizeof(GameServerPlayerLevelUp::level_)
      - PROTOBUF_FIELD_OFFSET(GameServerPlayerLevelUp, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerPlayerLevelUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[22]);
}

// ===================================================================

class GameServerAddExpMessage::_Internal {
 public:
};

GameServerAddExpMessage::GameServerAddExpMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerAddExpMessage)
}
GameServerAddExpMessage::GameServerAddExpMessage(const GameServerAddExpMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exp_ = from.exp_;
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerAddExpMessage)
}

void GameServerAddExpMessage::SharedCtor() {
exp_ = uint64_t{0u};
}

GameServerAddExpMessage::~GameServerAddExpMessage() {
  // @@protoc_insertion_point(destructor:protocol.GameServerAddExpMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerAddExpMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerAddExpMessage::ArenaDtor(void* object) {
  GameServerAddExpMessage* _this = reinterpret_cast< GameServerAddExpMessage* >(object);
  (void)_this;
}
void GameServerAddExpMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerAddExpMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerAddExpMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerAddExpMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerAddExpMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 exp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerAddExpMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerAddExpMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 exp = 1;
  if (this->exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerAddExpMessage)
  return target;
}

size_t GameServerAddExpMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerAddExpMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 exp = 1;
  if (this->exp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_exp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerAddExpMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerAddExpMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerAddExpMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerAddExpMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerAddExpMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerAddExpMessage)
    MergeFrom(*source);
  }
}

void GameServerAddExpMessage::MergeFrom(const GameServerAddExpMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerAddExpMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
}

void GameServerAddExpMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerAddExpMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerAddExpMessage::CopyFrom(const GameServerAddExpMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerAddExpMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerAddExpMessage::IsInitialized() const {
  return true;
}

void GameServerAddExpMessage::InternalSwap(GameServerAddExpMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(exp_, other->exp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerAddExpMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[23]);
}

// ===================================================================

class GameClientMoveInventory::_Internal {
 public:
};

GameClientMoveInventory::GameClientMoveInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameClientMoveInventory)
}
GameClientMoveInventory::GameClientMoveInventory(const GameClientMoveInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&dest_pos_) -
    reinterpret_cast<char*>(&type_)) + sizeof(dest_pos_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameClientMoveInventory)
}

void GameClientMoveInventory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dest_pos_) -
    reinterpret_cast<char*>(&type_)) + sizeof(dest_pos_));
}

GameClientMoveInventory::~GameClientMoveInventory() {
  // @@protoc_insertion_point(destructor:protocol.GameClientMoveInventory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientMoveInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientMoveInventory::ArenaDtor(void* object) {
  GameClientMoveInventory* _this = reinterpret_cast< GameClientMoveInventory* >(object);
  (void)_this;
}
void GameClientMoveInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientMoveInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientMoveInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameClientMoveInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dest_pos_) -
      reinterpret_cast<char*>(&type_)) + sizeof(dest_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientMoveInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 src_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          src_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dest_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dest_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientMoveInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameClientMoveInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 src_pos = 2;
  if (this->src_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_src_pos(), target);
  }

  // int32 dest_pos = 3;
  if (this->dest_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dest_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameClientMoveInventory)
  return target;
}

size_t GameClientMoveInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameClientMoveInventory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 src_pos = 2;
  if (this->src_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_pos());
  }

  // int32 dest_pos = 3;
  if (this->dest_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dest_pos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientMoveInventory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameClientMoveInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientMoveInventory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientMoveInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameClientMoveInventory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameClientMoveInventory)
    MergeFrom(*source);
  }
}

void GameClientMoveInventory::MergeFrom(const GameClientMoveInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameClientMoveInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.src_pos() != 0) {
    _internal_set_src_pos(from._internal_src_pos());
  }
  if (from.dest_pos() != 0) {
    _internal_set_dest_pos(from._internal_dest_pos());
  }
}

void GameClientMoveInventory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameClientMoveInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientMoveInventory::CopyFrom(const GameClientMoveInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameClientMoveInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientMoveInventory::IsInitialized() const {
  return true;
}

void GameClientMoveInventory::InternalSwap(GameClientMoveInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientMoveInventory, dest_pos_)
      + sizeof(GameClientMoveInventory::dest_pos_)
      - PROTOBUF_FIELD_OFFSET(GameClientMoveInventory, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientMoveInventory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[24]);
}

// ===================================================================

class GameClientUseItem::_Internal {
 public:
};

GameClientUseItem::GameClientUseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameClientUseItem)
}
GameClientUseItem::GameClientUseItem(const GameClientUseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pos_ = from.pos_;
  // @@protoc_insertion_point(copy_constructor:protocol.GameClientUseItem)
}

void GameClientUseItem::SharedCtor() {
pos_ = 0;
}

GameClientUseItem::~GameClientUseItem() {
  // @@protoc_insertion_point(destructor:protocol.GameClientUseItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientUseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientUseItem::ArenaDtor(void* object) {
  GameClientUseItem* _this = reinterpret_cast< GameClientUseItem* >(object);
  (void)_this;
}
void GameClientUseItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientUseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameClientUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientUseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientUseItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameClientUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pos = 1;
  if (this->pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameClientUseItem)
  return target;
}

size_t GameClientUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameClientUseItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pos = 1;
  if (this->pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientUseItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameClientUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientUseItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientUseItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameClientUseItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameClientUseItem)
    MergeFrom(*source);
  }
}

void GameClientUseItem::MergeFrom(const GameClientUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameClientUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pos() != 0) {
    _internal_set_pos(from._internal_pos());
  }
}

void GameClientUseItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameClientUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientUseItem::CopyFrom(const GameClientUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameClientUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientUseItem::IsInitialized() const {
  return true;
}

void GameClientUseItem::InternalSwap(GameClientUseItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientUseItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[25]);
}

// ===================================================================

class GameClientEquipItem::_Internal {
 public:
};

GameClientEquipItem::GameClientEquipItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameClientEquipItem)
}
GameClientEquipItem::GameClientEquipItem(const GameClientEquipItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&src_pos_, &from.src_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&dest_pos_) -
    reinterpret_cast<char*>(&src_pos_)) + sizeof(dest_pos_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameClientEquipItem)
}

void GameClientEquipItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&src_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dest_pos_) -
    reinterpret_cast<char*>(&src_pos_)) + sizeof(dest_pos_));
}

GameClientEquipItem::~GameClientEquipItem() {
  // @@protoc_insertion_point(destructor:protocol.GameClientEquipItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientEquipItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientEquipItem::ArenaDtor(void* object) {
  GameClientEquipItem* _this = reinterpret_cast< GameClientEquipItem* >(object);
  (void)_this;
}
void GameClientEquipItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientEquipItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientEquipItem::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameClientEquipItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&src_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dest_pos_) -
      reinterpret_cast<char*>(&src_pos_)) + sizeof(dest_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientEquipItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 src_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          src_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dest_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dest_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientEquipItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameClientEquipItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src_pos = 1;
  if (this->src_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_src_pos(), target);
  }

  // int32 dest_pos = 2;
  if (this->dest_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dest_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameClientEquipItem)
  return target;
}

size_t GameClientEquipItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameClientEquipItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 src_pos = 1;
  if (this->src_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_pos());
  }

  // int32 dest_pos = 2;
  if (this->dest_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dest_pos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientEquipItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameClientEquipItem)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientEquipItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientEquipItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameClientEquipItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameClientEquipItem)
    MergeFrom(*source);
  }
}

void GameClientEquipItem::MergeFrom(const GameClientEquipItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameClientEquipItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src_pos() != 0) {
    _internal_set_src_pos(from._internal_src_pos());
  }
  if (from.dest_pos() != 0) {
    _internal_set_dest_pos(from._internal_dest_pos());
  }
}

void GameClientEquipItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameClientEquipItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientEquipItem::CopyFrom(const GameClientEquipItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameClientEquipItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientEquipItem::IsInitialized() const {
  return true;
}

void GameClientEquipItem::InternalSwap(GameClientEquipItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientEquipItem, dest_pos_)
      + sizeof(GameClientEquipItem::dest_pos_)
      - PROTOBUF_FIELD_OFFSET(GameClientEquipItem, src_pos_)>(
          reinterpret_cast<char*>(&src_pos_),
          reinterpret_cast<char*>(&other->src_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientEquipItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[26]);
}

// ===================================================================

class GameClientUnequipItem::_Internal {
 public:
};

GameClientUnequipItem::GameClientUnequipItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameClientUnequipItem)
}
GameClientUnequipItem::GameClientUnequipItem(const GameClientUnequipItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&src_pos_, &from.src_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&dest_pos_) -
    reinterpret_cast<char*>(&src_pos_)) + sizeof(dest_pos_));
  // @@protoc_insertion_point(copy_constructor:protocol.GameClientUnequipItem)
}

void GameClientUnequipItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&src_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dest_pos_) -
    reinterpret_cast<char*>(&src_pos_)) + sizeof(dest_pos_));
}

GameClientUnequipItem::~GameClientUnequipItem() {
  // @@protoc_insertion_point(destructor:protocol.GameClientUnequipItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientUnequipItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientUnequipItem::ArenaDtor(void* object) {
  GameClientUnequipItem* _this = reinterpret_cast< GameClientUnequipItem* >(object);
  (void)_this;
}
void GameClientUnequipItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientUnequipItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientUnequipItem::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameClientUnequipItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&src_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dest_pos_) -
      reinterpret_cast<char*>(&src_pos_)) + sizeof(dest_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientUnequipItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 src_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          src_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dest_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dest_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientUnequipItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameClientUnequipItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src_pos = 1;
  if (this->src_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_src_pos(), target);
  }

  // int32 dest_pos = 2;
  if (this->dest_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dest_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameClientUnequipItem)
  return target;
}

size_t GameClientUnequipItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameClientUnequipItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 src_pos = 1;
  if (this->src_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_pos());
  }

  // int32 dest_pos = 2;
  if (this->dest_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dest_pos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientUnequipItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameClientUnequipItem)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientUnequipItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientUnequipItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameClientUnequipItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameClientUnequipItem)
    MergeFrom(*source);
  }
}

void GameClientUnequipItem::MergeFrom(const GameClientUnequipItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameClientUnequipItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src_pos() != 0) {
    _internal_set_src_pos(from._internal_src_pos());
  }
  if (from.dest_pos() != 0) {
    _internal_set_dest_pos(from._internal_dest_pos());
  }
}

void GameClientUnequipItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameClientUnequipItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientUnequipItem::CopyFrom(const GameClientUnequipItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameClientUnequipItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientUnequipItem::IsInitialized() const {
  return true;
}

void GameClientUnequipItem::InternalSwap(GameClientUnequipItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientUnequipItem, dest_pos_)
      + sizeof(GameClientUnequipItem::dest_pos_)
      - PROTOBUF_FIELD_OFFSET(GameClientUnequipItem, src_pos_)>(
          reinterpret_cast<char*>(&src_pos_),
          reinterpret_cast<char*>(&other->src_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientUnequipItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[27]);
}

// ===================================================================

class GameServerAddMeso::_Internal {
 public:
};

GameServerAddMeso::GameServerAddMeso(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.GameServerAddMeso)
}
GameServerAddMeso::GameServerAddMeso(const GameServerAddMeso& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  meso_ = from.meso_;
  // @@protoc_insertion_point(copy_constructor:protocol.GameServerAddMeso)
}

void GameServerAddMeso::SharedCtor() {
meso_ = 0;
}

GameServerAddMeso::~GameServerAddMeso() {
  // @@protoc_insertion_point(destructor:protocol.GameServerAddMeso)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerAddMeso::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerAddMeso::ArenaDtor(void* object) {
  GameServerAddMeso* _this = reinterpret_cast< GameServerAddMeso* >(object);
  (void)_this;
}
void GameServerAddMeso::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerAddMeso::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerAddMeso::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GameServerAddMeso)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meso_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerAddMeso::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 meso = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          meso_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerAddMeso::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GameServerAddMeso)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 meso = 1;
  if (this->meso() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_meso(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.GameServerAddMeso)
  return target;
}

size_t GameServerAddMeso::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GameServerAddMeso)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 meso = 1;
  if (this->meso() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_meso());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerAddMeso::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GameServerAddMeso)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerAddMeso* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerAddMeso>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GameServerAddMeso)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GameServerAddMeso)
    MergeFrom(*source);
  }
}

void GameServerAddMeso::MergeFrom(const GameServerAddMeso& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GameServerAddMeso)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.meso() != 0) {
    _internal_set_meso(from._internal_meso());
  }
}

void GameServerAddMeso::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GameServerAddMeso)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerAddMeso::CopyFrom(const GameServerAddMeso& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GameServerAddMeso)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerAddMeso::IsInitialized() const {
  return true;
}

void GameServerAddMeso::InternalSwap(GameServerAddMeso* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(meso_, other->meso_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerAddMeso::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[28]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::GameClientEnter* Arena::CreateMaybeMessage< ::protocol::GameClientEnter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameClientEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerEnter* Arena::CreateMaybeMessage< ::protocol::GameServerEnter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerEnter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerAddPlayer* Arena::CreateMaybeMessage< ::protocol::GameServerAddPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerAddPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerAddMonster* Arena::CreateMaybeMessage< ::protocol::GameServerAddMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerAddMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerRemoveObject* Arena::CreateMaybeMessage< ::protocol::GameServerRemoveObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerRemoveObject >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerChangeMap* Arena::CreateMaybeMessage< ::protocol::GameServerChangeMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerChangeMap >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameClientPlayerMove* Arena::CreateMaybeMessage< ::protocol::GameClientPlayerMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameClientPlayerMove >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerPlayerMove* Arena::CreateMaybeMessage< ::protocol::GameServerPlayerMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerPlayerMove >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameClientChangeKeySetting* Arena::CreateMaybeMessage< ::protocol::GameClientChangeKeySetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameClientChangeKeySetting >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerMobMove* Arena::CreateMaybeMessage< ::protocol::GameServerMobMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerMobMove >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerMobAttack* Arena::CreateMaybeMessage< ::protocol::GameServerMobAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerMobAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerPlayerDamage* Arena::CreateMaybeMessage< ::protocol::GameServerPlayerDamage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerPlayerDamage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerMobDamage* Arena::CreateMaybeMessage< ::protocol::GameServerMobDamage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerMobDamage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameClientChat* Arena::CreateMaybeMessage< ::protocol::GameClientChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameClientChat >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerChat* Arena::CreateMaybeMessage< ::protocol::GameServerChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerChat >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerPlayerDead* Arena::CreateMaybeMessage< ::protocol::GameServerPlayerDead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerPlayerDead >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameClientRevive* Arena::CreateMaybeMessage< ::protocol::GameClientRevive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameClientRevive >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerRevive* Arena::CreateMaybeMessage< ::protocol::GameServerRevive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerRevive >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerTeleportPlayer* Arena::CreateMaybeMessage< ::protocol::GameServerTeleportPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerTeleportPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerUpdatePlayerStat* Arena::CreateMaybeMessage< ::protocol::GameServerUpdatePlayerStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerUpdatePlayerStat >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameClientAttack* Arena::CreateMaybeMessage< ::protocol::GameClientAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameClientAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerAttack* Arena::CreateMaybeMessage< ::protocol::GameServerAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerPlayerLevelUp* Arena::CreateMaybeMessage< ::protocol::GameServerPlayerLevelUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerPlayerLevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerAddExpMessage* Arena::CreateMaybeMessage< ::protocol::GameServerAddExpMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerAddExpMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameClientMoveInventory* Arena::CreateMaybeMessage< ::protocol::GameClientMoveInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameClientMoveInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameClientUseItem* Arena::CreateMaybeMessage< ::protocol::GameClientUseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameClientUseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameClientEquipItem* Arena::CreateMaybeMessage< ::protocol::GameClientEquipItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameClientEquipItem >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameClientUnequipItem* Arena::CreateMaybeMessage< ::protocol::GameClientUnequipItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameClientUnequipItem >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::GameServerAddMeso* Arena::CreateMaybeMessage< ::protocol::GameServerAddMeso >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::GameServerAddMeso >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
