// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fstruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fstruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "game_enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fstruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fstruct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fstruct_2eproto;
namespace protocol {
class ItemInfo;
struct ItemInfoDefaultTypeInternal;
extern ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
class KeySetting;
struct KeySettingDefaultTypeInternal;
extern KeySettingDefaultTypeInternal _KeySetting_default_instance_;
class MobInfo;
struct MobInfoDefaultTypeInternal;
extern MobInfoDefaultTypeInternal _MobInfo_default_instance_;
class OtherPlayerInfo;
struct OtherPlayerInfoDefaultTypeInternal;
extern OtherPlayerInfoDefaultTypeInternal _OtherPlayerInfo_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::ItemInfo* Arena::CreateMaybeMessage<::protocol::ItemInfo>(Arena*);
template<> ::protocol::KeySetting* Arena::CreateMaybeMessage<::protocol::KeySetting>(Arena*);
template<> ::protocol::MobInfo* Arena::CreateMaybeMessage<::protocol::MobInfo>(Arena*);
template<> ::protocol::OtherPlayerInfo* Arena::CreateMaybeMessage<::protocol::OtherPlayerInfo>(Arena*);
template<> ::protocol::PlayerInfo* Arena::CreateMaybeMessage<::protocol::PlayerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit constexpr PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return new PlayerInfo();
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeySettingsFieldNumber = 20,
    kItemsFieldNumber = 21,
    kNameFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 4,
    kLevelFieldNumber = 5,
    kExpFieldNumber = 6,
    kMesoFieldNumber = 7,
    kHpFieldNumber = 8,
    kMpFieldNumber = 9,
    kMaxHpFieldNumber = 10,
    kMaxMpFieldNumber = 11,
    kStrFieldNumber = 12,
    kDexFieldNumber = 13,
    kLukFieldNumber = 14,
    kIntFieldNumber = 15,
    kXFieldNumber = 16,
    kYFieldNumber = 17,
    kApFieldNumber = 18,
    kSpFieldNumber = 19,
  };
  // repeated .protocol.KeySetting key_settings = 20;
  int key_settings_size() const;
  private:
  int _internal_key_settings_size() const;
  public:
  void clear_key_settings();
  ::protocol::KeySetting* mutable_key_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::KeySetting >*
      mutable_key_settings();
  private:
  const ::protocol::KeySetting& _internal_key_settings(int index) const;
  ::protocol::KeySetting* _internal_add_key_settings();
  public:
  const ::protocol::KeySetting& key_settings(int index) const;
  ::protocol::KeySetting* add_key_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::KeySetting >&
      key_settings() const;

  // repeated .protocol.ItemInfo items = 21;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::protocol::ItemInfo* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ItemInfo >*
      mutable_items();
  private:
  const ::protocol::ItemInfo& _internal_items(int index) const;
  ::protocol::ItemInfo* _internal_add_items();
  public:
  const ::protocol::ItemInfo& items(int index) const;
  ::protocol::ItemInfo* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ItemInfo >&
      items() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 exp = 6;
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 meso = 7;
  void clear_meso();
  ::PROTOBUF_NAMESPACE_ID::int32 meso() const;
  void set_meso(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_meso() const;
  void _internal_set_meso(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hp = 8;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mp = 9;
  void clear_mp();
  ::PROTOBUF_NAMESPACE_ID::int32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mp() const;
  void _internal_set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_hp = 10;
  void clear_max_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp() const;
  void set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_hp() const;
  void _internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_mp = 11;
  void clear_max_mp();
  ::PROTOBUF_NAMESPACE_ID::int32 max_mp() const;
  void set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_mp() const;
  void _internal_set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 str = 12;
  void clear_str();
  ::PROTOBUF_NAMESPACE_ID::int32 str() const;
  void set_str(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_str() const;
  void _internal_set_str(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dex = 13;
  void clear_dex();
  ::PROTOBUF_NAMESPACE_ID::int32 dex() const;
  void set_dex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dex() const;
  void _internal_set_dex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 luk = 14;
  void clear_luk();
  ::PROTOBUF_NAMESPACE_ID::int32 luk() const;
  void set_luk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_luk() const;
  void _internal_set_luk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 int = 15;
  void clear_int_();
  ::PROTOBUF_NAMESPACE_ID::int32 int_() const;
  void set_int_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_() const;
  void _internal_set_int_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 16;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 17;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // int32 ap = 18;
  void clear_ap();
  ::PROTOBUF_NAMESPACE_ID::int32 ap() const;
  void set_ap(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ap() const;
  void _internal_set_ap(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sp = 19;
  void clear_sp();
  ::PROTOBUF_NAMESPACE_ID::int32 sp() const;
  void set_sp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sp() const;
  void _internal_set_sp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::KeySetting > key_settings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ItemInfo > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_;
  ::PROTOBUF_NAMESPACE_ID::int32 meso_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 str_;
  ::PROTOBUF_NAMESPACE_ID::int32 dex_;
  ::PROTOBUF_NAMESPACE_ID::int32 luk_;
  ::PROTOBUF_NAMESPACE_ID::int32 int__;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int32 ap_;
  ::PROTOBUF_NAMESPACE_ID::int32 sp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class OtherPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.OtherPlayerInfo) */ {
 public:
  inline OtherPlayerInfo() : OtherPlayerInfo(nullptr) {}
  ~OtherPlayerInfo() override;
  explicit constexpr OtherPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OtherPlayerInfo(const OtherPlayerInfo& from);
  OtherPlayerInfo(OtherPlayerInfo&& from) noexcept
    : OtherPlayerInfo() {
    *this = ::std::move(from);
  }

  inline OtherPlayerInfo& operator=(const OtherPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherPlayerInfo& operator=(OtherPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OtherPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const OtherPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const OtherPlayerInfo*>(
               &_OtherPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OtherPlayerInfo& a, OtherPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherPlayerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OtherPlayerInfo* New() const final {
    return new OtherPlayerInfo();
  }

  OtherPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OtherPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OtherPlayerInfo& from);
  void MergeFrom(const OtherPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.OtherPlayerInfo";
  }
  protected:
  explicit OtherPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kLevelFieldNumber = 4,
    kHpFieldNumber = 5,
    kMaxHpFieldNumber = 6,
    kXFieldNumber = 7,
    kYFieldNumber = 8,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hp = 5;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_hp = 6;
  void clear_max_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp() const;
  void set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_hp() const;
  void _internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 7;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 8;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.OtherPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class ItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ItemInfo) */ {
 public:
  inline ItemInfo() : ItemInfo(nullptr) {}
  ~ItemInfo() override;
  explicit constexpr ItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemInfo(const ItemInfo& from);
  ItemInfo(ItemInfo&& from) noexcept
    : ItemInfo() {
    *this = ::std::move(from);
  }

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemInfo& operator=(ItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemInfo* internal_default_instance() {
    return reinterpret_cast<const ItemInfo*>(
               &_ItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ItemInfo& a, ItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemInfo* New() const final {
    return new ItemInfo();
  }

  ItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemInfo& from);
  void MergeFrom(const ItemInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ItemInfo";
  }
  protected:
  explicit ItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kCountFieldNumber = 3,
    kSubTypeFieldNumber = 4,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sub_type = 4;
  void clear_sub_type();
  ::PROTOBUF_NAMESPACE_ID::int32 sub_type() const;
  void set_sub_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sub_type() const;
  void _internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 sub_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class KeySetting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.KeySetting) */ {
 public:
  inline KeySetting() : KeySetting(nullptr) {}
  ~KeySetting() override;
  explicit constexpr KeySetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeySetting(const KeySetting& from);
  KeySetting(KeySetting&& from) noexcept
    : KeySetting() {
    *this = ::std::move(from);
  }

  inline KeySetting& operator=(const KeySetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeySetting& operator=(KeySetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeySetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeySetting* internal_default_instance() {
    return reinterpret_cast<const KeySetting*>(
               &_KeySetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KeySetting& a, KeySetting& b) {
    a.Swap(&b);
  }
  inline void Swap(KeySetting* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeySetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeySetting* New() const final {
    return new KeySetting();
  }

  KeySetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeySetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeySetting& from);
  void MergeFrom(const KeySetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeySetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.KeySetting";
  }
  protected:
  explicit KeySetting(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyCodeFieldNumber = 1,
    kKeyTypeFieldNumber = 2,
    kItemIdFieldNumber = 3,
    kSkillIdFieldNumber = 4,
  };
  // .protocol.KeyCode key_code = 1;
  void clear_key_code();
  ::protocol::KeyCode key_code() const;
  void set_key_code(::protocol::KeyCode value);
  private:
  ::protocol::KeyCode _internal_key_code() const;
  void _internal_set_key_code(::protocol::KeyCode value);
  public:

  // .protocol.KeyType key_type = 2;
  void clear_key_type();
  ::protocol::KeyType key_type() const;
  void set_key_type(::protocol::KeyType value);
  private:
  ::protocol::KeyType _internal_key_type() const;
  void _internal_set_key_type(::protocol::KeyType value);
  public:

  // optional uint32 item_id = 3;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 skill_id = 4;
  bool has_skill_id() const;
  private:
  bool _internal_has_skill_id() const;
  public:
  void clear_skill_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id() const;
  void set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skill_id() const;
  void _internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.KeySetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int key_code_;
  int key_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skill_id_;
  friend struct ::TableStruct_game_5fstruct_2eproto;
};
// -------------------------------------------------------------------

class MobInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.MobInfo) */ {
 public:
  inline MobInfo() : MobInfo(nullptr) {}
  ~MobInfo() override;
  explicit constexpr MobInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MobInfo(const MobInfo& from);
  MobInfo(MobInfo&& from) noexcept
    : MobInfo() {
    *this = ::std::move(from);
  }

  inline MobInfo& operator=(const MobInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobInfo& operator=(MobInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MobInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MobInfo* internal_default_instance() {
    return reinterpret_cast<const MobInfo*>(
               &_MobInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MobInfo& a, MobInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MobInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MobInfo* New() const final {
    return new MobInfo();
  }

  MobInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MobInfo& from);
  void MergeFrom(const MobInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.MobInfo";
  }
  protected:
  explicit MobInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kStateFieldNumber = 5,
    kFlipFieldNumber = 6,
  };
  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // .protocol.MobActionType state = 5;
  void clear_state();
  ::protocol::MobActionType state() const;
  void set_state(::protocol::MobActionType value);
  private:
  ::protocol::MobActionType _internal_state() const;
  void _internal_set_state(::protocol::MobActionType value);
  public:

  // bool flip = 6;
  void clear_flip();
  bool flip() const;
  void set_flip(bool value);
  private:
  bool _internal_flip() const;
  void _internal_set_flip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.MobInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float x_;
  float y_;
  int state_;
  bool flip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fstruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerInfo

// int64 object_id = 1;
inline void PlayerInfo::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::object_id() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.object_id)
  return _internal_object_id();
}
inline void PlayerInfo::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void PlayerInfo::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.object_id)
}

// uint32 id = 2;
inline void PlayerInfo::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerInfo::id() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.id)
  return _internal_id();
}
inline void PlayerInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void PlayerInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.id)
}

// string name = 3;
inline void PlayerInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.name)
}
inline std::string* PlayerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.PlayerInfo.name)
  return _internal_mutable_name();
}
inline const std::string& PlayerInfo::_internal_name() const {
  return name_.Get();
}
inline void PlayerInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:protocol.PlayerInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.PlayerInfo.name)
}

// int32 type = 4;
inline void PlayerInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::type() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.type)
  return _internal_type();
}
inline void PlayerInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void PlayerInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.type)
}

// int32 level = 5;
inline void PlayerInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.level)
  return _internal_level();
}
inline void PlayerInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void PlayerInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.level)
}

// int32 exp = 6;
inline void PlayerInfo::clear_exp() {
  exp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::exp() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.exp)
  return _internal_exp();
}
inline void PlayerInfo::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exp_ = value;
}
inline void PlayerInfo::set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.exp)
}

// int32 meso = 7;
inline void PlayerInfo::clear_meso() {
  meso_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_meso() const {
  return meso_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::meso() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.meso)
  return _internal_meso();
}
inline void PlayerInfo::_internal_set_meso(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  meso_ = value;
}
inline void PlayerInfo::set_meso(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_meso(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.meso)
}

// int32 hp = 8;
inline void PlayerInfo::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::hp() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.hp)
  return _internal_hp();
}
inline void PlayerInfo::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void PlayerInfo::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.hp)
}

// int32 mp = 9;
inline void PlayerInfo::clear_mp() {
  mp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_mp() const {
  return mp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::mp() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.mp)
  return _internal_mp();
}
inline void PlayerInfo::_internal_set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mp_ = value;
}
inline void PlayerInfo::set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.mp)
}

// int32 max_hp = 10;
inline void PlayerInfo::clear_max_hp() {
  max_hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_max_hp() const {
  return max_hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::max_hp() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.max_hp)
  return _internal_max_hp();
}
inline void PlayerInfo::_internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_hp_ = value;
}
inline void PlayerInfo::set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.max_hp)
}

// int32 max_mp = 11;
inline void PlayerInfo::clear_max_mp() {
  max_mp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_max_mp() const {
  return max_mp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::max_mp() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.max_mp)
  return _internal_max_mp();
}
inline void PlayerInfo::_internal_set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_mp_ = value;
}
inline void PlayerInfo::set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_mp(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.max_mp)
}

// int32 str = 12;
inline void PlayerInfo::clear_str() {
  str_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_str() const {
  return str_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::str() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.str)
  return _internal_str();
}
inline void PlayerInfo::_internal_set_str(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  str_ = value;
}
inline void PlayerInfo::set_str(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.str)
}

// int32 dex = 13;
inline void PlayerInfo::clear_dex() {
  dex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_dex() const {
  return dex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::dex() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.dex)
  return _internal_dex();
}
inline void PlayerInfo::_internal_set_dex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dex_ = value;
}
inline void PlayerInfo::set_dex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dex(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.dex)
}

// int32 luk = 14;
inline void PlayerInfo::clear_luk() {
  luk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_luk() const {
  return luk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::luk() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.luk)
  return _internal_luk();
}
inline void PlayerInfo::_internal_set_luk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  luk_ = value;
}
inline void PlayerInfo::set_luk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_luk(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.luk)
}

// int32 int = 15;
inline void PlayerInfo::clear_int_() {
  int__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_int_() const {
  return int__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::int_() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.int)
  return _internal_int_();
}
inline void PlayerInfo::_internal_set_int_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int__ = value;
}
inline void PlayerInfo::set_int_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.int)
}

// float x = 16;
inline void PlayerInfo::clear_x() {
  x_ = 0;
}
inline float PlayerInfo::_internal_x() const {
  return x_;
}
inline float PlayerInfo::x() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.x)
  return _internal_x();
}
inline void PlayerInfo::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PlayerInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.x)
}

// float y = 17;
inline void PlayerInfo::clear_y() {
  y_ = 0;
}
inline float PlayerInfo::_internal_y() const {
  return y_;
}
inline float PlayerInfo::y() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.y)
  return _internal_y();
}
inline void PlayerInfo::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PlayerInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.y)
}

// int32 ap = 18;
inline void PlayerInfo::clear_ap() {
  ap_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_ap() const {
  return ap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::ap() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.ap)
  return _internal_ap();
}
inline void PlayerInfo::_internal_set_ap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ap_ = value;
}
inline void PlayerInfo::set_ap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ap(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.ap)
}

// int32 sp = 19;
inline void PlayerInfo::clear_sp() {
  sp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_sp() const {
  return sp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::sp() const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.sp)
  return _internal_sp();
}
inline void PlayerInfo::_internal_set_sp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sp_ = value;
}
inline void PlayerInfo::set_sp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sp(value);
  // @@protoc_insertion_point(field_set:protocol.PlayerInfo.sp)
}

// repeated .protocol.KeySetting key_settings = 20;
inline int PlayerInfo::_internal_key_settings_size() const {
  return key_settings_.size();
}
inline int PlayerInfo::key_settings_size() const {
  return _internal_key_settings_size();
}
inline void PlayerInfo::clear_key_settings() {
  key_settings_.Clear();
}
inline ::protocol::KeySetting* PlayerInfo::mutable_key_settings(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PlayerInfo.key_settings)
  return key_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::KeySetting >*
PlayerInfo::mutable_key_settings() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PlayerInfo.key_settings)
  return &key_settings_;
}
inline const ::protocol::KeySetting& PlayerInfo::_internal_key_settings(int index) const {
  return key_settings_.Get(index);
}
inline const ::protocol::KeySetting& PlayerInfo::key_settings(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.key_settings)
  return _internal_key_settings(index);
}
inline ::protocol::KeySetting* PlayerInfo::_internal_add_key_settings() {
  return key_settings_.Add();
}
inline ::protocol::KeySetting* PlayerInfo::add_key_settings() {
  // @@protoc_insertion_point(field_add:protocol.PlayerInfo.key_settings)
  return _internal_add_key_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::KeySetting >&
PlayerInfo::key_settings() const {
  // @@protoc_insertion_point(field_list:protocol.PlayerInfo.key_settings)
  return key_settings_;
}

// repeated .protocol.ItemInfo items = 21;
inline int PlayerInfo::_internal_items_size() const {
  return items_.size();
}
inline int PlayerInfo::items_size() const {
  return _internal_items_size();
}
inline void PlayerInfo::clear_items() {
  items_.Clear();
}
inline ::protocol::ItemInfo* PlayerInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.PlayerInfo.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ItemInfo >*
PlayerInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:protocol.PlayerInfo.items)
  return &items_;
}
inline const ::protocol::ItemInfo& PlayerInfo::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::protocol::ItemInfo& PlayerInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:protocol.PlayerInfo.items)
  return _internal_items(index);
}
inline ::protocol::ItemInfo* PlayerInfo::_internal_add_items() {
  return items_.Add();
}
inline ::protocol::ItemInfo* PlayerInfo::add_items() {
  // @@protoc_insertion_point(field_add:protocol.PlayerInfo.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ItemInfo >&
PlayerInfo::items() const {
  // @@protoc_insertion_point(field_list:protocol.PlayerInfo.items)
  return items_;
}

// -------------------------------------------------------------------

// OtherPlayerInfo

// int64 object_id = 1;
inline void OtherPlayerInfo::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OtherPlayerInfo::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OtherPlayerInfo::object_id() const {
  // @@protoc_insertion_point(field_get:protocol.OtherPlayerInfo.object_id)
  return _internal_object_id();
}
inline void OtherPlayerInfo::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void OtherPlayerInfo::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:protocol.OtherPlayerInfo.object_id)
}

// string name = 2;
inline void OtherPlayerInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& OtherPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:protocol.OtherPlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OtherPlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.OtherPlayerInfo.name)
}
inline std::string* OtherPlayerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.OtherPlayerInfo.name)
  return _internal_mutable_name();
}
inline const std::string& OtherPlayerInfo::_internal_name() const {
  return name_.Get();
}
inline void OtherPlayerInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OtherPlayerInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OtherPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:protocol.OtherPlayerInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OtherPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.OtherPlayerInfo.name)
}

// int32 type = 3;
inline void OtherPlayerInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::type() const {
  // @@protoc_insertion_point(field_get:protocol.OtherPlayerInfo.type)
  return _internal_type();
}
inline void OtherPlayerInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void OtherPlayerInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.OtherPlayerInfo.type)
}

// int32 level = 4;
inline void OtherPlayerInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:protocol.OtherPlayerInfo.level)
  return _internal_level();
}
inline void OtherPlayerInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void OtherPlayerInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:protocol.OtherPlayerInfo.level)
}

// int32 hp = 5;
inline void OtherPlayerInfo::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::hp() const {
  // @@protoc_insertion_point(field_get:protocol.OtherPlayerInfo.hp)
  return _internal_hp();
}
inline void OtherPlayerInfo::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void OtherPlayerInfo::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:protocol.OtherPlayerInfo.hp)
}

// int32 max_hp = 6;
inline void OtherPlayerInfo::clear_max_hp() {
  max_hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::_internal_max_hp() const {
  return max_hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::max_hp() const {
  // @@protoc_insertion_point(field_get:protocol.OtherPlayerInfo.max_hp)
  return _internal_max_hp();
}
inline void OtherPlayerInfo::_internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_hp_ = value;
}
inline void OtherPlayerInfo::set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:protocol.OtherPlayerInfo.max_hp)
}

// float x = 7;
inline void OtherPlayerInfo::clear_x() {
  x_ = 0;
}
inline float OtherPlayerInfo::_internal_x() const {
  return x_;
}
inline float OtherPlayerInfo::x() const {
  // @@protoc_insertion_point(field_get:protocol.OtherPlayerInfo.x)
  return _internal_x();
}
inline void OtherPlayerInfo::_internal_set_x(float value) {
  
  x_ = value;
}
inline void OtherPlayerInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.OtherPlayerInfo.x)
}

// float y = 8;
inline void OtherPlayerInfo::clear_y() {
  y_ = 0;
}
inline float OtherPlayerInfo::_internal_y() const {
  return y_;
}
inline float OtherPlayerInfo::y() const {
  // @@protoc_insertion_point(field_get:protocol.OtherPlayerInfo.y)
  return _internal_y();
}
inline void OtherPlayerInfo::_internal_set_y(float value) {
  
  y_ = value;
}
inline void OtherPlayerInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.OtherPlayerInfo.y)
}

// -------------------------------------------------------------------

// ItemInfo

// uint32 id = 1;
inline void ItemInfo::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ItemInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ItemInfo::id() const {
  // @@protoc_insertion_point(field_get:protocol.ItemInfo.id)
  return _internal_id();
}
inline void ItemInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ItemInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.ItemInfo.id)
}

// int32 type = 2;
inline void ItemInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemInfo::type() const {
  // @@protoc_insertion_point(field_get:protocol.ItemInfo.type)
  return _internal_type();
}
inline void ItemInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void ItemInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.ItemInfo.type)
}

// int32 count = 3;
inline void ItemInfo::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemInfo::count() const {
  // @@protoc_insertion_point(field_get:protocol.ItemInfo.count)
  return _internal_count();
}
inline void ItemInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ItemInfo::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:protocol.ItemInfo.count)
}

// int32 sub_type = 4;
inline void ItemInfo::clear_sub_type() {
  sub_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemInfo::_internal_sub_type() const {
  return sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ItemInfo::sub_type() const {
  // @@protoc_insertion_point(field_get:protocol.ItemInfo.sub_type)
  return _internal_sub_type();
}
inline void ItemInfo::_internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sub_type_ = value;
}
inline void ItemInfo::set_sub_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:protocol.ItemInfo.sub_type)
}

// -------------------------------------------------------------------

// KeySetting

// .protocol.KeyCode key_code = 1;
inline void KeySetting::clear_key_code() {
  key_code_ = 0;
}
inline ::protocol::KeyCode KeySetting::_internal_key_code() const {
  return static_cast< ::protocol::KeyCode >(key_code_);
}
inline ::protocol::KeyCode KeySetting::key_code() const {
  // @@protoc_insertion_point(field_get:protocol.KeySetting.key_code)
  return _internal_key_code();
}
inline void KeySetting::_internal_set_key_code(::protocol::KeyCode value) {
  
  key_code_ = value;
}
inline void KeySetting::set_key_code(::protocol::KeyCode value) {
  _internal_set_key_code(value);
  // @@protoc_insertion_point(field_set:protocol.KeySetting.key_code)
}

// .protocol.KeyType key_type = 2;
inline void KeySetting::clear_key_type() {
  key_type_ = 0;
}
inline ::protocol::KeyType KeySetting::_internal_key_type() const {
  return static_cast< ::protocol::KeyType >(key_type_);
}
inline ::protocol::KeyType KeySetting::key_type() const {
  // @@protoc_insertion_point(field_get:protocol.KeySetting.key_type)
  return _internal_key_type();
}
inline void KeySetting::_internal_set_key_type(::protocol::KeyType value) {
  
  key_type_ = value;
}
inline void KeySetting::set_key_type(::protocol::KeyType value) {
  _internal_set_key_type(value);
  // @@protoc_insertion_point(field_set:protocol.KeySetting.key_type)
}

// optional uint32 item_id = 3;
inline bool KeySetting::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeySetting::has_item_id() const {
  return _internal_has_item_id();
}
inline void KeySetting::clear_item_id() {
  item_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeySetting::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeySetting::item_id() const {
  // @@protoc_insertion_point(field_get:protocol.KeySetting.item_id)
  return _internal_item_id();
}
inline void KeySetting::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
}
inline void KeySetting::set_item_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:protocol.KeySetting.item_id)
}

// optional uint32 skill_id = 4;
inline bool KeySetting::_internal_has_skill_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeySetting::has_skill_id() const {
  return _internal_has_skill_id();
}
inline void KeySetting::clear_skill_id() {
  skill_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeySetting::_internal_skill_id() const {
  return skill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeySetting::skill_id() const {
  // @@protoc_insertion_point(field_get:protocol.KeySetting.skill_id)
  return _internal_skill_id();
}
inline void KeySetting::_internal_set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  skill_id_ = value;
}
inline void KeySetting::set_skill_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:protocol.KeySetting.skill_id)
}

// -------------------------------------------------------------------

// MobInfo

// int64 object_id = 1;
inline void MobInfo::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MobInfo::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MobInfo::object_id() const {
  // @@protoc_insertion_point(field_get:protocol.MobInfo.object_id)
  return _internal_object_id();
}
inline void MobInfo::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void MobInfo::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:protocol.MobInfo.object_id)
}

// uint32 id = 2;
inline void MobInfo::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MobInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MobInfo::id() const {
  // @@protoc_insertion_point(field_get:protocol.MobInfo.id)
  return _internal_id();
}
inline void MobInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void MobInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.MobInfo.id)
}

// float x = 3;
inline void MobInfo::clear_x() {
  x_ = 0;
}
inline float MobInfo::_internal_x() const {
  return x_;
}
inline float MobInfo::x() const {
  // @@protoc_insertion_point(field_get:protocol.MobInfo.x)
  return _internal_x();
}
inline void MobInfo::_internal_set_x(float value) {
  
  x_ = value;
}
inline void MobInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.MobInfo.x)
}

// float y = 4;
inline void MobInfo::clear_y() {
  y_ = 0;
}
inline float MobInfo::_internal_y() const {
  return y_;
}
inline float MobInfo::y() const {
  // @@protoc_insertion_point(field_get:protocol.MobInfo.y)
  return _internal_y();
}
inline void MobInfo::_internal_set_y(float value) {
  
  y_ = value;
}
inline void MobInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.MobInfo.y)
}

// .protocol.MobActionType state = 5;
inline void MobInfo::clear_state() {
  state_ = 0;
}
inline ::protocol::MobActionType MobInfo::_internal_state() const {
  return static_cast< ::protocol::MobActionType >(state_);
}
inline ::protocol::MobActionType MobInfo::state() const {
  // @@protoc_insertion_point(field_get:protocol.MobInfo.state)
  return _internal_state();
}
inline void MobInfo::_internal_set_state(::protocol::MobActionType value) {
  
  state_ = value;
}
inline void MobInfo::set_state(::protocol::MobActionType value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:protocol.MobInfo.state)
}

// bool flip = 6;
inline void MobInfo::clear_flip() {
  flip_ = false;
}
inline bool MobInfo::_internal_flip() const {
  return flip_;
}
inline bool MobInfo::flip() const {
  // @@protoc_insertion_point(field_get:protocol.MobInfo.flip)
  return _internal_flip();
}
inline void MobInfo::_internal_set_flip(bool value) {
  
  flip_ = value;
}
inline void MobInfo::set_flip(bool value) {
  _internal_set_flip(value);
  // @@protoc_insertion_point(field_set:protocol.MobInfo.flip)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fstruct_2eproto
