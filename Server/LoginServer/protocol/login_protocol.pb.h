// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "login_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_5fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_5fprotocol_2eproto;
namespace protocol {
class LoginClientLogin;
struct LoginClientLoginDefaultTypeInternal;
extern LoginClientLoginDefaultTypeInternal _LoginClientLogin_default_instance_;
class LoginServerLogin;
struct LoginServerLoginDefaultTypeInternal;
extern LoginServerLoginDefaultTypeInternal _LoginServerLogin_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::LoginClientLogin* Arena::CreateMaybeMessage<::protocol::LoginClientLogin>(Arena*);
template<> ::protocol::LoginServerLogin* Arena::CreateMaybeMessage<::protocol::LoginServerLogin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class LoginClientLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.LoginClientLogin) */ {
 public:
  inline LoginClientLogin() : LoginClientLogin(nullptr) {}
  ~LoginClientLogin() override;
  explicit constexpr LoginClientLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginClientLogin(const LoginClientLogin& from);
  LoginClientLogin(LoginClientLogin&& from) noexcept
    : LoginClientLogin() {
    *this = ::std::move(from);
  }

  inline LoginClientLogin& operator=(const LoginClientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginClientLogin& operator=(LoginClientLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginClientLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginClientLogin* internal_default_instance() {
    return reinterpret_cast<const LoginClientLogin*>(
               &_LoginClientLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginClientLogin& a, LoginClientLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginClientLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginClientLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginClientLogin* New() const final {
    return new LoginClientLogin();
  }

  LoginClientLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginClientLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginClientLogin& from);
  void MergeFrom(const LoginClientLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginClientLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.LoginClientLogin";
  }
  protected:
  explicit LoginClientLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.LoginClientLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LoginServerLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.LoginServerLogin) */ {
 public:
  inline LoginServerLogin() : LoginServerLogin(nullptr) {}
  ~LoginServerLogin() override;
  explicit constexpr LoginServerLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginServerLogin(const LoginServerLogin& from);
  LoginServerLogin(LoginServerLogin&& from) noexcept
    : LoginServerLogin() {
    *this = ::std::move(from);
  }

  inline LoginServerLogin& operator=(const LoginServerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginServerLogin& operator=(LoginServerLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginServerLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginServerLogin* internal_default_instance() {
    return reinterpret_cast<const LoginServerLogin*>(
               &_LoginServerLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginServerLogin& a, LoginServerLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginServerLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginServerLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginServerLogin* New() const final {
    return new LoginServerLogin();
  }

  LoginServerLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginServerLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginServerLogin& from);
  void MergeFrom(const LoginServerLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginServerLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.LoginServerLogin";
  }
  protected:
  explicit LoginServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .protocol.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::protocol::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >*
      mutable_players();
  private:
  const ::protocol::Player& _internal_players(int index) const;
  ::protocol::Player* _internal_add_players();
  public:
  const ::protocol::Player& players(int index) const;
  ::protocol::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >&
      players() const;

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.LoginServerLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player > players_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginClientLogin

// -------------------------------------------------------------------

// LoginServerLogin

// bool success = 1;
inline void LoginServerLogin::clear_success() {
  success_ = false;
}
inline bool LoginServerLogin::_internal_success() const {
  return success_;
}
inline bool LoginServerLogin::success() const {
  // @@protoc_insertion_point(field_get:protocol.LoginServerLogin.success)
  return _internal_success();
}
inline void LoginServerLogin::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void LoginServerLogin::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:protocol.LoginServerLogin.success)
}

// repeated .protocol.Player players = 2;
inline int LoginServerLogin::_internal_players_size() const {
  return players_.size();
}
inline int LoginServerLogin::players_size() const {
  return _internal_players_size();
}
inline ::protocol::Player* LoginServerLogin::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.LoginServerLogin.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >*
LoginServerLogin::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:protocol.LoginServerLogin.players)
  return &players_;
}
inline const ::protocol::Player& LoginServerLogin::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::protocol::Player& LoginServerLogin::players(int index) const {
  // @@protoc_insertion_point(field_get:protocol.LoginServerLogin.players)
  return _internal_players(index);
}
inline ::protocol::Player* LoginServerLogin::_internal_add_players() {
  return players_.Add();
}
inline ::protocol::Player* LoginServerLogin::add_players() {
  // @@protoc_insertion_point(field_add:protocol.LoginServerLogin.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >&
LoginServerLogin::players() const {
  // @@protoc_insertion_point(field_list:protocol.LoginServerLogin.players)
  return players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_5fprotocol_2eproto
