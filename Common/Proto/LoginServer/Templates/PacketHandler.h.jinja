// ReSharper disable CppInconsistentNaming

#pragma once
#include "network/protocol/login_protocol.pb.h"

namespace {{namespace}} {
  using PacketHandler = std::function<bool(PacketSessionRef&, std::byte*, int32_t)>;

  enum : uint16_t {
  {%- for packet in parser.total_packet %}
    PKT_{{packet.name_upper}} = {{packet.id}},
  {%- endfor %}
  };

  bool HandleLoginInvalid(PacketSessionRef& session, std::byte* buffer, const int32_t len);

  {%- for packet in parser.recv_packet %}
  bool Handle{{packet.name}}(const PacketSessionRef& session, const protocol::{{packet.name}}& packet);
  {%- endfor %}

  class {{output}} {
  public:
    static void Init() {
      _packet_handler_map.reserve(UINT16_MAX);

      for (uint16_t i = 0; i < UINT16_MAX; i++) {
        _packet_handler_map[i] = HandleLoginInvalid;
      }

  {% for packet in parser.recv_packet %}
      _packet_handler_map[PKT_{{packet.name_upper}}] = [](PacketSessionRef& session, std::byte* buffer, const int32_t len) {
        return HandlePacket<protocol::{{packet.name}}>(Handle{{packet.name}}, session, buffer, len);
      };
  {%- endfor %}
    }

    static bool HandlePacket(PacketSessionRef& session, std::byte* buffer, const int32_t len) {
      const PacketHeader* header = reinterpret_cast<PacketHeader*>(buffer);

      if (!_packet_handler_map.contains(header->id)) {
        return false;
      }

      return _packet_handler_map[header->id](session, buffer, len);
    }

  {% for packet in parser.send_packet %}
    static SendBufferRef MakeSendBuffer(const protocol::{{packet.name}}& packet) { 
      return MakeSendBufferInternal(packet, PKT_{{packet.name_upper}}); 
    }
  {%- endfor %}

  private:
    template <typename PacketType, typename Handler>
    static bool HandlePacket(Handler handler, PacketSessionRef& session, std::byte* buffer, const int32_t len) {
      PacketType packet;

      if (!packet.ParseFromArray(buffer + sizeof(PacketHeader), len - sizeof(PacketHeader))) {
        return false;
      }

      return handler(session, packet);
    }

    template <typename T>
    static SendBufferRef MakeSendBufferInternal(const T& packet, const uint16_t packet_id) {
      const uint16_t data_size = static_cast<uint16_t>(packet.ByteSizeLong());
      const uint16_t packet_size = data_size + sizeof(PacketHeader);
      SendBufferRef  send_buffer = SendBufferManager::GetInstance().Open(packet_size);

      PacketHeader* header = reinterpret_cast<PacketHeader*>(send_buffer->GetBuffer());
      header->size = packet_size;
      header->id = packet_id;

      ASSERT_CRASH(packet.SerializeToArray(&header[1], data_size));

      send_buffer->Close(packet_size);
      return send_buffer;
    }

  private:
    inline static std::unordered_map<uint16_t, PacketHandler> _packet_handler_map;
  };
}